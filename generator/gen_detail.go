package generator

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"

	"github.com/kyle-hy/es2go/utils"
)

// DetailTplData 生成详情的模板数据
type DetailTplData struct {
	PackageName   string         // 代码包名
	StructName    string         // 模型结构体名称
	StructComment string         // 模型结构体注释
	IndexName     string         // es索引名称(表名)
	Fields        []*FieldInfo   // es相关字段信息
	FuncDatas     []*FuncTplData // 预处理生产的函数模板需要的信息
}

// FuncTplData 预处理生产的函数模板需要的信息
type FuncTplData struct {
	Name    string // 函数名称
	Comment string // 函数注释
	Params  string // 参数列表
	Query   string // 查询条件
}

// PreDetailCond 使用go代码预处理渲染需要的一些逻辑，template脚本出来调试困难
func PreDetailCond(esInfo *EsModelInfo) []*FuncTplData {
	funcDatas := []*FuncTplData{}
	grpFileds := GroupFieldsByType(esInfo.Fields)
	fields := grpFileds[TypeText]
	cmbFields := utils.Combinations(fields, MaxCombine)
	for _, cfs := range cmbFields {
		ftd := &FuncTplData{
			Name:    GetFuncName(esInfo.StructName, cfs),
			Comment: GetFuncComment(esInfo.StructComment, cfs),
			Params:  GetFuncParams(cfs),
			Query:   GetMatchQuery(cfs),
		}
		funcDatas = append(funcDatas, ftd)
	}

	utils.JPrint(funcDatas)
	return funcDatas
}

// GetFuncName 获取函数名称
func GetFuncName(StructName string, fields []*FieldInfo) string {
	fn := "Query" + StructName + "By"
	for _, f := range fields {
		fn += f.FieldName
	}
	return fn
}

// GetFuncComment 获取函数注释
func GetFuncComment(StructComment string, fields []*FieldInfo) string {
	cmt := "根据"
	for _, f := range fields {
		cmt += f.FieldComment + "、"
	}
	cmt = strings.TrimSuffix(cmt, "、")
	cmt += "查询" + StructComment + "的详细数据"
	return cmt
}

// GetFuncParams 获取函数参数列表
func GetFuncParams(fields []*FieldInfo) string {
	fp := ""
	for _, f := range fields {
		fp += utils.ToFirstLower(f.FieldName) + " " + f.FieldType + ", "
	}
	fp = strings.TrimSuffix(fp, ", ")
	return fp
}

// GetMatchQuery 获取函数的查询条件
func GetMatchQuery(fields []*FieldInfo) string {
	fq := ""
	if len(fields) == 1 {
		f := fields[0]
		fq = "esQuery := eq.ESQuery{\n"
		fq += fmt.Sprintf("		Query: eq.Match(\"%s\", %s),\n", f.EsFieldPath, utils.ToFirstLower(f.FieldName))
		fq += "	}\n"
	} else {
		fq = "queries := []eq.Map{\n"
		for _, f := range fields {
			fq += fmt.Sprintf("		eq.Match(\"%s\", %s),\n", f.EsFieldPath, utils.ToFirstLower(f.FieldName))
		}
		fq += "	}\n"

		fq += `	esQuery := eq.ESQuery{Query: eq.Bool(eq.WithMust(queries))}`
	}
	return fq
}

// GenEsDetail 生成es检索详情
func GenEsDetail(outputPath string, esInfo *EsModelInfo) error {
	// 预处理渲染所需的内容
	funcData := PreDetailCond(esInfo)
	detailData := DetailTplData{
		PackageName:   esInfo.PackageName,
		StructName:    esInfo.StructName,
		StructComment: esInfo.StructComment,
		IndexName:     esInfo.IndexName,
		FuncDatas:     funcData,
	}

	// 渲染
	tmpl, err := template.New("structDatail").Parse(DetailTpl)
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, detailData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// 写入文件
	outputPath = strings.Replace(outputPath, ".go", "_datail.go", -1)
	err = os.WriteFile(outputPath, buf.Bytes(), 0644)
	if err != nil {
		return fmt.Errorf("Failed to write output file %s: %v", outputPath, err)
	}

	// 调用go格式化工具格式化代码
	cmd := exec.Command("goimports", "-w", outputPath)
	cmd.Run()

	return nil
}

// DetailTpl 检索详情代码模板
const DetailTpl = `// Code generated by es2go. DO NOT EDIT.

package {{.PackageName}}

import (
	"time"
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

{{$in := .}}
{{range $in.FuncDatas}}
// {{.Name}} {{.Comment}}
func {{.Name}}(es *elasticsearch.Client, {{.Params}}) ([]*{{$in.StructName}}, int, error) {
	{{.Query}}
	l, t, err := eq.QueryList[{{$in.StructName}}](es, "{{$in.IndexName}}", esQuery)
	if err != nil {
		return nil, 0, err
	}
	return l, t, nil
}
{{end}}
`

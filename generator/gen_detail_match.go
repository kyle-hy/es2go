package generator

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"

	"github.com/kyle-hy/es2go/utils"
)

// 生成对text字段检索的代码

// PreDetailMatchCond 使用go代码预处理渲染需要的一些逻辑，template脚本出来调试困难
func PreDetailMatchCond(mappingPath string, esInfo *EsModelInfo) []*FuncTplData {
	funcDatas := []*FuncTplData{}

	// 尝试加载自定义生成配置
	genCfg := LoadCustomGenConfig(mappingPath)

	// 根据配置处理全文本字段的配置
	fields := RetainTextFieldByName(esInfo.Fields, genCfg.AllTextFieldOnly, genCfg.AllTextField)

	// 根据配置文件自定义字段分组进行随机组合
	cmbFields := CombineCustom(fields, genCfg.Combine, genCfg.MaxCombine)
	cmbFields = LimitCombineFilter(cmbFields, map[string]int{TypeVector: -1})

	// 构造渲染模板所需的数据
	for _, cfs := range cmbFields {
		ftd := &FuncTplData{
			Name:    getDetailMatchFuncName(esInfo.StructName, cfs),
			Comment: getDetailMatchFuncComment(esInfo.StructComment, cfs),
			Params:  getDetailMatchFuncParams(cfs),
			Query:   getDetailMatchQuery(cfs, genCfg.TermInShould),
		}
		funcDatas = append(funcDatas, ftd)
	}

	return funcDatas
}

// getDetailMatchFuncName 获取函数名称
func getDetailMatchFuncName(structName string, fields []*FieldInfo) string {
	fn := "Match" + structName + "By" + GenFieldsName(fields)
	return fn
}

// getDetailMatchFuncComment 获取函数注释
func getDetailMatchFuncComment(structComment string, fields []*FieldInfo) string {
	// 函数注释
	cmt := "根据" + GenFieldsCmt(fields, true)
	cmt += "进行检索(等于)查找" + structComment + "的详细数据列表和总数量\n"

	// 参数注释
	cmt += GenParamCmt(fields, true)

	return cmt
}

// getDetailMatchFuncParams 获取函数参数列表
func getDetailMatchFuncParams(fields []*FieldInfo) string {
	fp := GenParam(fields, true)
	return fp
}

// getDetailMatchQuery 获取函数的查找条件
func getDetailMatchQuery(fields []*FieldInfo, termInShould bool) string {
	// match部分参数
	mq := GenMatchCond(fields)

	// term部分参数
	tq := GenTermCond(fields)

	// bool部分参数
	bq := GenBoolCond(mq, tq, termInShould)
	esq := GenESQueryCond(bq, "", "", "")

	// 拼接match和term条件
	fq := mq + tq + esq

	return fq
}

// GenEsDetailMatch 生成es检索详情
func GenEsDetailMatch(mappingPath, outputPath string, esInfo *EsModelInfo) error {
	// 预处理渲染所需的内容
	funcData := PreDetailMatchCond(mappingPath, esInfo)
	detailData := DetailTplData{
		PackageName:   esInfo.PackageName,
		StructName:    esInfo.StructName,
		StructComment: esInfo.StructComment,
		IndexName:     esInfo.IndexName,
		FuncDatas:     funcData,
	}

	// 创建 FuncMap，将函数名映射到 Go 函数
	funcMap := template.FuncMap{
		"FirstLine": utils.FirstLine,
	}

	// 渲染
	tmpl, err := template.New("structDatail").Funcs(funcMap).Parse(DetailTpl + DetailListTpl)
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, detailData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	// 写入文件
	outputPath = strings.Replace(outputPath, ".go", "_detail_match.go", -1)
	err = os.WriteFile(outputPath, buf.Bytes(), 0644)
	if err != nil {
		return fmt.Errorf("Failed to write output file %s: %v", outputPath, err)
	}

	// 调用go格式化工具格式化代码
	cmd := exec.Command("goimports", "-w", outputPath)
	cmd.Run()

	return nil
}

// DetailTpl 检索详情代码模板
const DetailTpl = `// Code generated by es2go. DO NOT EDIT.

package {{.PackageName}}

import (
	"time"
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

{{$in := .}}
{{range $in.FuncDatas}}
// {{.Name}} {{.Comment}}
func {{.Name}}(es *elasticsearch.Client, {{.Params}}) (*eq.Data, *eq.Query, error) {
	{{.Query}}
	return queryBooksList(es, esQuery)
}
{{end}}
`

// DetailListTpl 检索详情列表通用代码模板
const DetailListTpl = `
// 根据query条件查找{{$in.IndexName}}详细数据列表和总数量
func query{{$in.StructName}}List (es *elasticsearch.Client, esQuery *eq.ESQuery) (*eq.Data, *eq.Query, error) {
	l, t, err := eq.QueryList[{{$in.StructName}}](es, "{{$in.IndexName}}", esQuery)
	if err != nil {
		return nil, nil, err
	}

	data := &eq.Data{Detail: l, Total: t}
	qinfo := &eq.Query{Index: "{{$in.IndexName}}", DSL: esQuery}
	return data, qinfo, nil
}
`

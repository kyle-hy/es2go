// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// QuarterBooksByReleaseDateGteMaxNPageCount 根据发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteMaxNPageCount(es *elasticsearch.Client, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteMinNPageCount 根据发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteMinNPageCount(es *elasticsearch.Client, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteMaxNPrice 根据发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteMaxNPrice(es *elasticsearch.Client, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteMinNPrice 根据发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteMinNPrice(es *elasticsearch.Client, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextMaxNPageCount 根据全文本、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextMinNPageCount 根据全文本、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextMaxNPrice 根据全文本、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextMinNPrice 根据全文本、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorMaxNPageCount 根据作者、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorMinNPageCount 根据作者、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorMaxNPrice 根据作者、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorMinNPrice 根据作者、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassMaxNPageCount 根据类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassMinNPageCount 根据类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassMaxNPrice 根据类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassMinNPrice 根据类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2MaxNPageCount 根据子类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2MinNPageCount 根据子类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2MaxNPrice 根据子类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2MinNPrice 根据子类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameMaxNPageCount 根据书名、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameMinNPageCount 根据书名、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameMaxNPrice 根据书名、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameMinNPrice 根据书名、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteMaxNPrice 根据页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteMinNPrice 根据页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteMaxNPrice 根据页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteMinNPrice 根据页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteMaxNPrice 根据页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteMinNPrice 根据页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteMaxNPrice 根据页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteMinNPrice 根据页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteMaxNPrice 根据页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteMinNPrice 根据页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteMaxNPageCount 根据价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteMinNPageCount 根据价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteMaxNPageCount 根据价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteMinNPageCount 根据价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteMaxNPageCount 根据价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteMinNPageCount 根据价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteMaxNPageCount 根据价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteMinNPageCount 根据价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteMaxNPageCount 根据价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteMinNPageCount 根据价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithSeqMaxNPageCount 根据编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithSeqMinNPageCount 根据编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithSeqMaxNPrice 根据编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithSeqMinNPrice 根据编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClassMinNPrice 根据全文本、类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextNameMinNPrice 根据全文本、书名、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassMinNPageCount 根据作者、类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassMaxNPrice 根据作者、类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassMinNPrice 根据作者、类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorNameMinNPageCount 根据作者、书名、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorNameMaxNPrice 根据作者、书名、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorNameMinNPrice 根据作者、书名、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorSeqMinNPrice 根据作者、编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassClass2MinNPageCount 根据类别、子类别、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassClass2MaxNPrice 根据类别、子类别、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassClass2MinNPrice 根据类别、子类别、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassNameMaxNPageCount 根据类别、书名、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassNameMinNPageCount 根据类别、书名、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassNameMaxNPrice 根据类别、书名、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassNameMinNPrice 根据类别、书名、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClassMaxNPrice 根据类别、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClassMinNPrice 根据类别、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClassMaxNPrice 根据类别、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClassMinNPrice 根据类别、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClassMaxNPrice 根据类别、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClassMinNPrice 根据类别、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClassMinNPageCount 根据类别、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClassMinNPageCount 根据类别、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClassMinNPageCount 根据类别、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassSeqMaxNPageCount 根据类别、编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassSeqMinNPageCount 根据类别、编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassSeqMaxNPrice 根据类别、编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassSeqMinNPrice 根据类别、编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2NameMinNPageCount 根据子类别、书名、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2NameMaxNPrice 根据子类别、书名、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2NameMinNPrice 根据子类别、书名、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass2SeqMinNPrice 根据子类别、编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithNameMaxNPrice 根据书名、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithNameMinNPrice 根据书名、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithNameMaxNPrice 根据书名、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithNameMinNPrice 根据书名、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithNameMaxNPrice 根据书名、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithNameMinNPrice 根据书名、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithNameMinNPageCount 根据书名、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithNameMinNPageCount 根据书名、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithNameMinNPageCount 根据书名、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameSeqMaxNPageCount 根据书名、编号、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameSeqMinNPageCount 根据书名、编号、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameSeqMaxNPrice 根据书名、编号、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameSeqMinNPrice 根据书名、编号、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByReleaseDateGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithSeqMinNPrice 根据编号、页数大于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithSeqMinNPrice 根据编号、页数小于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithSeqMinNPrice 根据编号、页数小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期为近几个季度检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几个季度检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
// size int 前N条记录
func QuarterBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MatchBooksByAuthor 对author进行检索(等于)查找books的详细数据列表和总数量
// author string author
func MatchBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass 对class进行检索(等于)查找books的详细数据列表和总数量
// class string class
func MatchBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByName 对书名进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
func MatchBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCount 对page_count进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
func MatchBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPrice 对价格进行检索(等于)查找books的详细数据列表和总数量
// price float64 价格
func MatchBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDate 对release_date进行检索(等于)查找books的详细数据列表和总数量
// releaseDate time.Time release_date
func MatchBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeq 对seq进行检索(等于)查找books的详细数据列表和总数量
// seq string seq
func MatchBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass 对author、class进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
func MatchBooksByAuthorClass(es *elasticsearch.Client, author string, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorName 对author、书名进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
func MatchBooksByAuthorName(es *elasticsearch.Client, author string, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCount 对author、page_count进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
func MatchBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPrice 对author、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// price float64 价格
func MatchBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDate 对author、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// releaseDate time.Time release_date
func MatchBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeq 对author、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// seq string seq
func MatchBooksByAuthorSeq(es *elasticsearch.Client, author string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassName 对class、书名进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
func MatchBooksByClassName(es *elasticsearch.Client, class string, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCount 对class、page_count进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
func MatchBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPrice 对class、价格进行检索(等于)查找books的详细数据列表和总数量
// class string class
// price float64 价格
func MatchBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDate 对class、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// releaseDate time.Time release_date
func MatchBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeq 对class、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// seq string seq
func MatchBooksByClassSeq(es *elasticsearch.Client, class string, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCount 对书名、page_count进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
func MatchBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePrice 对书名、价格进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
func MatchBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDate 对书名、release_date进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// releaseDate time.Time release_date
func MatchBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeq 对书名、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// seq string seq
func MatchBooksByNameSeq(es *elasticsearch.Client, name string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPrice 对page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func MatchBooksByPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDate 对page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeq 对page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// seq string seq
func MatchBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDate 对价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeq 对价格、seq进行检索(等于)查找books的详细数据列表和总数量
// price float64 价格
// seq string seq
func MatchBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeq 对release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassName 对author、class、书名进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
func MatchBooksByAuthorClassName(es *elasticsearch.Client, author string, class string, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCount 对author、class、page_count进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// pageCount int64 page_count
func MatchBooksByAuthorClassPageCount(es *elasticsearch.Client, author string, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPrice 对author、class、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// price float64 价格
func MatchBooksByAuthorClassPrice(es *elasticsearch.Client, author string, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDate 对author、class、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// releaseDate time.Time release_date
func MatchBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author string, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeq 对author、class、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// seq string seq
func MatchBooksByAuthorClassSeq(es *elasticsearch.Client, author string, class string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCount 对author、书名、page_count进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// pageCount int64 page_count
func MatchBooksByAuthorNamePageCount(es *elasticsearch.Client, author string, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePrice 对author、书名、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePrice(es *elasticsearch.Client, author string, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDate 对author、书名、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// releaseDate time.Time release_date
func MatchBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author string, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeq 对author、书名、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// seq string seq
func MatchBooksByAuthorNameSeq(es *elasticsearch.Client, author string, name string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPrice 对author、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// price float64 价格
func MatchBooksByAuthorPageCountPrice(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDate 对author、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeq 对author、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// seq string seq
func MatchBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDate 对author、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeq 对author、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// price float64 价格
// seq string seq
func MatchBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeq 对author、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCount 对class、书名、page_count进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// pageCount int64 page_count
func MatchBooksByClassNamePageCount(es *elasticsearch.Client, class string, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePrice 对class、书名、价格进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// price float64 价格
func MatchBooksByClassNamePrice(es *elasticsearch.Client, class string, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDate 对class、书名、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// releaseDate time.Time release_date
func MatchBooksByClassNameReleaseDate(es *elasticsearch.Client, class string, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeq 对class、书名、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// seq string seq
func MatchBooksByClassNameSeq(es *elasticsearch.Client, class string, name string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPrice 对class、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
func MatchBooksByClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDate 对class、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountSeq 对class、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// seq string seq
func MatchBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDate 对class、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceSeq 对class、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// price float64 价格
// seq string seq
func MatchBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeq 对class、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPrice 对书名、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// price float64 价格
func MatchBooksByNamePageCountPrice(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDate 对书名、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeq 对书名、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// seq string seq
func MatchBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDate 对书名、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeq 对书名、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// seq string seq
func MatchBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeq 对书名、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDate 对page_count、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByPageCountPriceReleaseDate(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceSeq 对page_count、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// seq string seq
func MatchBooksByPageCountPriceSeq(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeq 对page_count、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeq 对价格、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePageCount 对author、class、书名、page_count进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// pageCount int64 page_count
func MatchBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author string, class string, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePrice 对author、class、书名、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// price float64 价格
func MatchBooksByAuthorClassNamePrice(es *elasticsearch.Client, author string, class string, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameReleaseDate 对author、class、书名、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// releaseDate time.Time release_date
func MatchBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author string, class string, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameSeq 对author、class、书名、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// seq string seq
func MatchBooksByAuthorClassNameSeq(es *elasticsearch.Client, author string, class string, name string, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountPrice 对author、class、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// pageCount int64 page_count
// price float64 价格
func MatchBooksByAuthorClassPageCountPrice(es *elasticsearch.Client, author string, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountReleaseDate 对author、class、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author string, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountSeq 对author、class、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// pageCount int64 page_count
// seq string seq
func MatchBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author string, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceReleaseDate 对author、class、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author string, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceSeq 对author、class、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// price float64 价格
// seq string seq
func MatchBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author string, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateSeq 对author、class、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// class string class
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author string, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPrice 对author、书名、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// pageCount int64 page_count
// price float64 价格
func MatchBooksByAuthorNamePageCountPrice(es *elasticsearch.Client, author string, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDate 对author、书名、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author string, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountSeq 对author、书名、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// pageCount int64 page_count
// seq string seq
func MatchBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author string, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDate 对author、书名、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author string, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceSeq 对author、书名、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// price float64 价格
// seq string seq
func MatchBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author string, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateSeq 对author、书名、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// name string 书名
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author string, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDate 对author、page_count、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByAuthorPageCountPriceReleaseDate(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceSeq 对author、page_count、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// price float64 价格
// seq string seq
func MatchBooksByAuthorPageCountPriceSeq(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateSeq 对author、page_count、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateSeq 对author、价格、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// author string author
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountPrice 对class、书名、page_count、价格进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// pageCount int64 page_count
// price float64 价格
func MatchBooksByClassNamePageCountPrice(es *elasticsearch.Client, class string, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountReleaseDate 对class、书名、page_count、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// pageCount int64 page_count
// releaseDate time.Time release_date
func MatchBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class string, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountSeq 对class、书名、page_count、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// pageCount int64 page_count
// seq string seq
func MatchBooksByClassNamePageCountSeq(es *elasticsearch.Client, class string, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceReleaseDate 对class、书名、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class string, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceSeq 对class、书名、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// price float64 价格
// seq string seq
func MatchBooksByClassNamePriceSeq(es *elasticsearch.Client, class string, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateSeq 对class、书名、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// name string 书名
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class string, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceReleaseDate 对class、page_count、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByClassPageCountPriceReleaseDate(es *elasticsearch.Client, class string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceSeq 对class、page_count、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
// seq string seq
func MatchBooksByClassPageCountPriceSeq(es *elasticsearch.Client, class string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateSeq 对class、page_count、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateSeq 对class、价格、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// class string class
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDate 对书名、page_count、价格、release_date进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
func MatchBooksByNamePageCountPriceReleaseDate(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceSeq 对书名、page_count、价格、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// price float64 价格
// seq string seq
func MatchBooksByNamePageCountPriceSeq(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateSeq 对书名、page_count、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateSeq 对书名、价格、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateSeq 对page_count、价格、release_date、seq进行检索(等于)查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
func MatchBooksByPageCountPriceReleaseDateSeq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// 根据query条件查找books详细数据列表和总数量
func queryBooksList(es *elasticsearch.Client, esQuery *eq.ESQuery) (*eq.Data, *eq.Query, error) {
	l, t, err := eq.QueryList[Books](es, "books", esQuery)
	if err != nil {
		return nil, nil, err
	}

	data := &eq.Data{Detail: l, Total: t}
	qinfo := &eq.Query{Index: "books", DSL: esQuery}
	return data, qinfo, nil
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MatchBooksByAllText 对全文本进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
func MatchBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthor 对作者进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
func MatchBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass 对类别进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
func MatchBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2 对子类别进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
func MatchBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByName 对书名进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
func MatchBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCount 对页数进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
func MatchBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPrice 对价格进行检索(等于)查找books表的详细数据列表和总数量
// price float64 价格
func MatchBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDate 对发布日期进行检索(等于)查找books表的详细数据列表和总数量
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeq 对编号进行检索(等于)查找books表的详细数据列表和总数量
// seq string 编号
func MatchBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthor 对全文本、作者进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass 对全文本、类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
func MatchBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2 对全文本、子类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
func MatchBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextName 对全文本、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
func MatchBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCount 对全文本、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPrice 对全文本、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDate 对全文本、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeq 对全文本、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// seq string 编号
func MatchBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass 对作者、类别进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
func MatchBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2 对作者、子类别进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
func MatchBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorName 对作者、书名进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
func MatchBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCount 对作者、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPrice 对作者、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
func MatchBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDate 对作者、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeq 对作者、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// seq string 编号
func MatchBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2 对类别、子类别进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
func MatchBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassName 对类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
func MatchBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCount 对类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
func MatchBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPrice 对类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
func MatchBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDate 对类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeq 对类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// seq string 编号
func MatchBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2Name 对子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
func MatchBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCount 对子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2Price 对子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
func MatchBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDate 对子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2Seq 对子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// seq string 编号
func MatchBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCount 对书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePrice 对书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
func MatchBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDate 对书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeq 对书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// seq string 编号
func MatchBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPrice 对页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDate 对页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeq 对页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// seq string 编号
func MatchBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDate 对价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeq 对价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// price float64 价格
// seq string 编号
func MatchBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeq 对发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass 对全文本、作者、类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
func MatchBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2 对全文本、作者、子类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
func MatchBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorName 对全文本、作者、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCount 对全文本、作者、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPrice 对全文本、作者、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDate 对全文本、作者、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeq 对全文本、作者、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// seq string 编号
func MatchBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2 对全文本、类别、子类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
func MatchBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassName 对全文本、类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
func MatchBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCount 对全文本、类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPrice 对全文本、类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// price float64 价格
func MatchBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDate 对全文本、类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeq 对全文本、类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// seq string 编号
func MatchBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2Name 对全文本、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCount 对全文本、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2Price 对全文本、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDate 对全文本、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2Seq 对全文本、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// seq string 编号
func MatchBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCount 对全文本、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePrice 对全文本、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDate 对全文本、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeq 对全文本、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// seq string 编号
func MatchBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPrice 对全文本、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPrice(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDate 对全文本、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeq 对全文本、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDate 对全文本、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeq 对全文本、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeq 对全文本、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2 对作者、类别、子类别进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
func MatchBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassName 对作者、类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCount 对作者、类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPrice 对作者、类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDate 对作者、类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeq 对作者、类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// seq string 编号
func MatchBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2Name 对作者、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCount 对作者、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2Price 对作者、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDate 对作者、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2Seq 对作者、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// seq string 编号
func MatchBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCount 对作者、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePrice 对作者、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDate 对作者、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeq 对作者、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPrice 对作者、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPrice(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDate 对作者、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeq 对作者、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDate 对作者、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeq 对作者、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeq 对作者、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2Name 对类别、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCount 对类别、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2Price 对类别、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDate 对类别、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2Seq 对类别、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// seq string 编号
func MatchBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCount 对类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePrice 对类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDate 对类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeq 对类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPrice 对类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDate 对类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountSeq 对类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDate 对类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceSeq 对类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeq 对类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCount 对子类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePrice 对子类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDate 对子类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeq 对子类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPrice 对子类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2PageCountPrice(es *elasticsearch.Client, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDate 对子类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountSeq 对子类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDate 对子类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceSeq 对子类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeq 对子类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPrice 对书名、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPrice(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDate 对书名、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeq 对书名、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDate 对书名、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeq 对书名、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeq 对书名、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDate 对页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDate(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceSeq 对页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByPageCountPriceSeq(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeq 对页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeq 对价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassClass2 对全文本、作者、类别、子类别进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func MatchBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassName 对全文本、作者、类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPageCount 对全文本、作者、类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPrice 对全文本、作者、类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassReleaseDate 对全文本、作者、类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassSeq 对全文本、作者、类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func MatchBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2Name 对全文本、作者、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PageCount 对全文本、作者、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2Price 对全文本、作者、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2ReleaseDate 对全文本、作者、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2Seq 对全文本、作者、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func MatchBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCount 对全文本、作者、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePrice 对全文本、作者、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDate 对全文本、作者、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameSeq 对全文本、作者、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPrice 对全文本、作者、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPrice(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDate 对全文本、作者、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDate(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountSeq 对全文本、作者、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDate 对全文本、作者、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDate(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceSeq 对全文本、作者、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateSeq 对全文本、作者、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2Name 对全文本、类别、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2PageCount 对全文本、类别、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2Price 对全文本、类别、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2ReleaseDate 对全文本、类别、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2Seq 对全文本、类别、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func MatchBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePageCount 对全文本、类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePrice 对全文本、类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameReleaseDate 对全文本、类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameSeq 对全文本、类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountPrice 对全文本、类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClassPageCountPrice(es *elasticsearch.Client, allText, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountReleaseDate 对全文本、类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPageCountReleaseDate(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountSeq 对全文本、类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceReleaseDate 对全文本、类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPriceReleaseDate(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceSeq 对全文本、类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateSeq 对全文本、类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePageCount 对全文本、子类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePrice 对全文本、子类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameReleaseDate 对全文本、子类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameSeq 对全文本、子类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountPrice 对全文本、子类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClass2PageCountPrice(es *elasticsearch.Client, allText, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountReleaseDate 对全文本、子类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PageCountReleaseDate(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountSeq 对全文本、子类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceReleaseDate 对全文本、子类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PriceReleaseDate(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceSeq 对全文本、子类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateSeq 对全文本、子类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPrice 对全文本、书名、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPrice(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDate 对全文本、书名、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDate(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountSeq 对全文本、书名、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDate 对全文本、书名、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDate(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceSeq 对全文本、书名、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateSeq 对全文本、书名、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDate 对全文本、页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceSeq 对全文本、页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPageCountPriceSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateSeq 对全文本、页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPageCountReleaseDateSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateSeq 对全文本、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPriceReleaseDateSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2Name 对作者、类别、子类别、书名进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2PageCount 对作者、类别、子类别、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2Price 对作者、类别、子类别、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2ReleaseDate 对作者、类别、子类别、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2Seq 对作者、类别、子类别、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func MatchBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePageCount 对作者、类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePrice 对作者、类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameReleaseDate 对作者、类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameSeq 对作者、类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountPrice 对作者、类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClassPageCountPrice(es *elasticsearch.Client, author, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountReleaseDate 对作者、类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountSeq 对作者、类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceReleaseDate 对作者、类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceSeq 对作者、类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateSeq 对作者、类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePageCount 对作者、子类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePrice 对作者、子类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameReleaseDate 对作者、子类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameSeq 对作者、子类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountPrice 对作者、子类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClass2PageCountPrice(es *elasticsearch.Client, author, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountReleaseDate 对作者、子类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PageCountReleaseDate(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountSeq 对作者、子类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceReleaseDate 对作者、子类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PriceReleaseDate(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceSeq 对作者、子类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateSeq 对作者、子类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPrice 对作者、书名、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPrice(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDate 对作者、书名、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountSeq 对作者、书名、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDate 对作者、书名、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceSeq 对作者、书名、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateSeq 对作者、书名、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDate 对作者、页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDate(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceSeq 对作者、页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPageCountPriceSeq(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateSeq 对作者、页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateSeq 对作者、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NamePageCount 对类别、子类别、书名、页数进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NamePrice 对类别、子类别、书名、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameReleaseDate 对类别、子类别、书名、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameSeq 对类别、子类别、书名、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountPrice 对类别、子类别、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassClass2PageCountPrice(es *elasticsearch.Client, class, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountReleaseDate 对类别、子类别、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2PageCountReleaseDate(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountSeq 对类别、子类别、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceReleaseDate 对类别、子类别、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2PriceReleaseDate(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceSeq 对类别、子类别、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateSeq 对类别、子类别、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountPrice 对类别、书名、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassNamePageCountPrice(es *elasticsearch.Client, class, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountReleaseDate 对类别、书名、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountSeq 对类别、书名、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceReleaseDate 对类别、书名、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceSeq 对类别、书名、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateSeq 对类别、书名、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceReleaseDate 对类别、页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountPriceReleaseDate(es *elasticsearch.Client, class string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceSeq 对类别、页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByClassPageCountPriceSeq(es *elasticsearch.Client, class string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateSeq 对类别、页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateSeq 对类别、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountPrice 对子类别、书名、页数、价格进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2NamePageCountPrice(es *elasticsearch.Client, class2, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountReleaseDate 对子类别、书名、页数、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePageCountReleaseDate(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountSeq 对子类别、书名、页数、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceReleaseDate 对子类别、书名、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePriceReleaseDate(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceSeq 对子类别、书名、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateSeq 对子类别、书名、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceReleaseDate 对子类别、页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountPriceReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceSeq 对子类别、页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByClass2PageCountPriceSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateSeq 对子类别、页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2PageCountReleaseDateSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateSeq 对子类别、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2PriceReleaseDateSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDate 对书名、页数、价格、发布日期进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDate(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceSeq 对书名、页数、价格、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByNamePageCountPriceSeq(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateSeq 对书名、页数、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateSeq 对书名、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateSeq 对页数、价格、发布日期、编号进行检索(等于)查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountPriceReleaseDateSeq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms))}
	return queryBooksList(es, esQuery)
}

// 根据query条件查找books详细数据列表和总数量
func queryBooksList(es *elasticsearch.Client, esQuery *eq.ESQuery) (*eq.Data, *eq.Query, error) {
	l, t, err := eq.QueryList[Books](es, "books", esQuery)
	if err != nil {
		return nil, nil, err
	}

	data := &eq.Data{Detail: l, Total: t}
	qinfo := &eq.Query{Index: "books", DSL: esQuery}
	return data, qinfo, nil
}

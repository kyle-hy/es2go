// Code generated by es2go. DO NOT EDIT.
// gen_agg_recent_date_hist_stats.go

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// StatsPageCountInHourHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每天页数的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每天价格的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每周页数的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByReleaseDateGte 根据发布日期为近几周检索books表并分桶统计每周价格的统计信息
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorReleaseDateGte 根据作者、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassReleaseDateGte 根据类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNameReleaseDateGte 根据书名、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqReleaseDateGte 根据编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInHourHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInDayHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInDayHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInWeekHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周价格的统计信息
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPriceInWeekHistOfWeekBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistOfWeekBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每小时页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInHourHistOfWeekBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInDayHistOfWeekBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每天页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInDayHistOfWeekBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("day"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInWeekHistOfWeekBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几周检索books表并分桶统计每周页数的统计信息
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
func StatsPageCountInWeekHistOfWeekBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNWeek int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

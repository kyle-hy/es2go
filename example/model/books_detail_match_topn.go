// Code generated by es2go. DO NOT EDIT.
// gen_detail_match_topn.go

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MatchBooksByAllTextMaxNPageCount 根据全文本检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// size int 前N条记录
func MatchBooksByAllTextMaxNPageCount(es *elasticsearch.Client, allText string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextMinNPageCount 根据全文本检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// size int 前N条记录
func MatchBooksByAllTextMinNPageCount(es *elasticsearch.Client, allText string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextMaxNPrice 根据全文本检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// size int 前N条记录
func MatchBooksByAllTextMaxNPrice(es *elasticsearch.Client, allText string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextMinNPrice 根据全文本检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// size int 前N条记录
func MatchBooksByAllTextMinNPrice(es *elasticsearch.Client, allText string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorMaxNPageCount 根据作者检索books表中页数最大的前N条详细数据列表
// author string 作者
// size int 前N条记录
func MatchBooksByAuthorMaxNPageCount(es *elasticsearch.Client, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorMinNPageCount 根据作者检索books表中页数最小的前N条详细数据列表
// author string 作者
// size int 前N条记录
func MatchBooksByAuthorMinNPageCount(es *elasticsearch.Client, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorMaxNPrice 根据作者检索books表中价格最大的前N条详细数据列表
// author string 作者
// size int 前N条记录
func MatchBooksByAuthorMaxNPrice(es *elasticsearch.Client, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorMinNPrice 根据作者检索books表中价格最小的前N条详细数据列表
// author string 作者
// size int 前N条记录
func MatchBooksByAuthorMinNPrice(es *elasticsearch.Client, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassMaxNPageCount 根据类别检索books表中页数最大的前N条详细数据列表
// class string 类别
// size int 前N条记录
func MatchBooksByClassMaxNPageCount(es *elasticsearch.Client, class string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassMinNPageCount 根据类别检索books表中页数最小的前N条详细数据列表
// class string 类别
// size int 前N条记录
func MatchBooksByClassMinNPageCount(es *elasticsearch.Client, class string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassMaxNPrice 根据类别检索books表中价格最大的前N条详细数据列表
// class string 类别
// size int 前N条记录
func MatchBooksByClassMaxNPrice(es *elasticsearch.Client, class string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassMinNPrice 根据类别检索books表中价格最小的前N条详细数据列表
// class string 类别
// size int 前N条记录
func MatchBooksByClassMinNPrice(es *elasticsearch.Client, class string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2MaxNPageCount 根据子类别检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClass2MaxNPageCount(es *elasticsearch.Client, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2MinNPageCount 根据子类别检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClass2MinNPageCount(es *elasticsearch.Client, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2MaxNPrice 根据子类别检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClass2MaxNPrice(es *elasticsearch.Client, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2MinNPrice 根据子类别检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClass2MinNPrice(es *elasticsearch.Client, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameMaxNPageCount 根据书名检索books表中页数最大的前N条详细数据列表
// name string 书名
// size int 前N条记录
func MatchBooksByNameMaxNPageCount(es *elasticsearch.Client, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameMinNPageCount 根据书名检索books表中页数最小的前N条详细数据列表
// name string 书名
// size int 前N条记录
func MatchBooksByNameMinNPageCount(es *elasticsearch.Client, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameMaxNPrice 根据书名检索books表中价格最大的前N条详细数据列表
// name string 书名
// size int 前N条记录
func MatchBooksByNameMaxNPrice(es *elasticsearch.Client, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameMinNPrice 根据书名检索books表中价格最小的前N条详细数据列表
// name string 书名
// size int 前N条记录
func MatchBooksByNameMinNPrice(es *elasticsearch.Client, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountMaxNPrice 根据页数检索books表中价格最大的前N条详细数据列表
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByPageCountMaxNPrice(es *elasticsearch.Client, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountMinNPrice 根据页数检索books表中价格最小的前N条详细数据列表
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByPageCountMinNPrice(es *elasticsearch.Client, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceMaxNPageCount 根据价格检索books表中页数最大的前N条详细数据列表
// price float64 价格
// size int 前N条记录
func MatchBooksByPriceMaxNPageCount(es *elasticsearch.Client, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceMinNPageCount 根据价格检索books表中页数最小的前N条详细数据列表
// price float64 价格
// size int 前N条记录
func MatchBooksByPriceMinNPageCount(es *elasticsearch.Client, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateMaxNPageCount 根据发布日期检索books表中页数最大的前N条详细数据列表
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByReleaseDateMaxNPageCount(es *elasticsearch.Client, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateMinNPageCount 根据发布日期检索books表中页数最小的前N条详细数据列表
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByReleaseDateMinNPageCount(es *elasticsearch.Client, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateMaxNPrice 根据发布日期检索books表中价格最大的前N条详细数据列表
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByReleaseDateMaxNPrice(es *elasticsearch.Client, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateMinNPrice 根据发布日期检索books表中价格最小的前N条详细数据列表
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByReleaseDateMinNPrice(es *elasticsearch.Client, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqMaxNPageCount 根据编号检索books表中页数最大的前N条详细数据列表
// seq string 编号
// size int 前N条记录
func MatchBooksBySeqMaxNPageCount(es *elasticsearch.Client, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqMinNPageCount 根据编号检索books表中页数最小的前N条详细数据列表
// seq string 编号
// size int 前N条记录
func MatchBooksBySeqMinNPageCount(es *elasticsearch.Client, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqMaxNPrice 根据编号检索books表中价格最大的前N条详细数据列表
// seq string 编号
// size int 前N条记录
func MatchBooksBySeqMaxNPrice(es *elasticsearch.Client, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqMinNPrice 根据编号检索books表中价格最小的前N条详细数据列表
// seq string 编号
// size int 前N条记录
func MatchBooksBySeqMinNPrice(es *elasticsearch.Client, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorMaxNPageCount 根据全文本、作者检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// size int 前N条记录
func MatchBooksByAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorMinNPageCount 根据全文本、作者检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// size int 前N条记录
func MatchBooksByAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorMaxNPrice 根据全文本、作者检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// size int 前N条记录
func MatchBooksByAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorMinNPrice 根据全文本、作者检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// size int 前N条记录
func MatchBooksByAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassMaxNPageCount 根据全文本、类别检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassMinNPageCount 根据全文本、类别检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassMaxNPrice 根据全文本、类别检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassMinNPrice 根据全文本、类别检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2MaxNPageCount 根据全文本、子类别检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2MinNPageCount 根据全文本、子类别检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2MaxNPrice 根据全文本、子类别检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2MinNPrice 根据全文本、子类别检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameMaxNPageCount 根据全文本、书名检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameMinNPageCount 根据全文本、书名检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameMaxNPrice 根据全文本、书名检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameMinNPrice 根据全文本、书名检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountMaxNPrice 根据全文本、页数检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextPageCountMaxNPrice(es *elasticsearch.Client, allText string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountMinNPrice 根据全文本、页数检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextPageCountMinNPrice(es *elasticsearch.Client, allText string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceMaxNPageCount 根据全文本、价格检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextPriceMaxNPageCount(es *elasticsearch.Client, allText string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceMinNPageCount 根据全文本、价格检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextPriceMinNPageCount(es *elasticsearch.Client, allText string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateMaxNPageCount 根据全文本、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextReleaseDateMaxNPageCount(es *elasticsearch.Client, allText string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateMinNPageCount 根据全文本、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextReleaseDateMinNPageCount(es *elasticsearch.Client, allText string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateMaxNPrice 根据全文本、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextReleaseDateMaxNPrice(es *elasticsearch.Client, allText string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateMinNPrice 根据全文本、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextReleaseDateMinNPrice(es *elasticsearch.Client, allText string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqMaxNPageCount 根据全文本、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqMinNPageCount 根据全文本、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqMaxNPrice 根据全文本、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqMinNPrice 根据全文本、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassMaxNPageCount 根据作者、类别检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassMinNPageCount 根据作者、类别检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassMaxNPrice 根据作者、类别检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassMinNPrice 根据作者、类别检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2MaxNPageCount 根据作者、子类别检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2MinNPageCount 根据作者、子类别检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2MaxNPrice 根据作者、子类别检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2MinNPrice 根据作者、子类别检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameMaxNPageCount 根据作者、书名检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameMinNPageCount 根据作者、书名检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameMaxNPrice 根据作者、书名检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameMinNPrice 根据作者、书名检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountMaxNPrice 根据作者、页数检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorPageCountMaxNPrice(es *elasticsearch.Client, author string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountMinNPrice 根据作者、页数检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorPageCountMinNPrice(es *elasticsearch.Client, author string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceMaxNPageCount 根据作者、价格检索books表中页数最大的前N条详细数据列表
// author string 作者
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorPriceMaxNPageCount(es *elasticsearch.Client, author string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceMinNPageCount 根据作者、价格检索books表中页数最小的前N条详细数据列表
// author string 作者
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorPriceMinNPageCount(es *elasticsearch.Client, author string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateMaxNPageCount 根据作者、发布日期检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorReleaseDateMaxNPageCount(es *elasticsearch.Client, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateMinNPageCount 根据作者、发布日期检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorReleaseDateMinNPageCount(es *elasticsearch.Client, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateMaxNPrice 根据作者、发布日期检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorReleaseDateMaxNPrice(es *elasticsearch.Client, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateMinNPrice 根据作者、发布日期检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorReleaseDateMinNPrice(es *elasticsearch.Client, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqMaxNPageCount 根据作者、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqMinNPageCount 根据作者、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqMaxNPrice 根据作者、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqMinNPrice 根据作者、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2MaxNPageCount 根据类别、子类别检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2MinNPageCount 根据类别、子类别检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2MaxNPrice 根据类别、子类别检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2MinNPrice 根据类别、子类别检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameMaxNPageCount 根据类别、书名检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameMinNPageCount 根据类别、书名检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassNameMinNPageCount(es *elasticsearch.Client, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameMaxNPrice 根据类别、书名检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassNameMaxNPrice(es *elasticsearch.Client, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameMinNPrice 根据类别、书名检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassNameMinNPrice(es *elasticsearch.Client, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountMaxNPrice 根据类别、页数检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassPageCountMaxNPrice(es *elasticsearch.Client, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountMinNPrice 根据类别、页数检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassPageCountMinNPrice(es *elasticsearch.Client, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceMaxNPageCount 根据类别、价格检索books表中页数最大的前N条详细数据列表
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClassPriceMaxNPageCount(es *elasticsearch.Client, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceMinNPageCount 根据类别、价格检索books表中页数最小的前N条详细数据列表
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClassPriceMinNPageCount(es *elasticsearch.Client, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateMaxNPageCount 根据类别、发布日期检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassReleaseDateMaxNPageCount(es *elasticsearch.Client, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateMinNPageCount 根据类别、发布日期检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassReleaseDateMinNPageCount(es *elasticsearch.Client, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateMaxNPrice 根据类别、发布日期检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassReleaseDateMaxNPrice(es *elasticsearch.Client, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateMinNPrice 根据类别、发布日期检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassReleaseDateMinNPrice(es *elasticsearch.Client, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeqMaxNPageCount 根据类别、编号检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeqMinNPageCount 根据类别、编号检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeqMaxNPrice 根据类别、编号检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeqMinNPrice 根据类别、编号检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameMaxNPageCount 根据子类别、书名检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameMinNPageCount 根据子类别、书名检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameMaxNPrice 根据子类别、书名检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameMinNPrice 根据子类别、书名检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountMaxNPrice 根据子类别、页数检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClass2PageCountMaxNPrice(es *elasticsearch.Client, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountMinNPrice 根据子类别、页数检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClass2PageCountMinNPrice(es *elasticsearch.Client, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceMaxNPageCount 根据子类别、价格检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClass2PriceMaxNPageCount(es *elasticsearch.Client, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceMinNPageCount 根据子类别、价格检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClass2PriceMinNPageCount(es *elasticsearch.Client, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateMaxNPageCount 根据子类别、发布日期检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2ReleaseDateMaxNPageCount(es *elasticsearch.Client, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateMinNPageCount 根据子类别、发布日期检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2ReleaseDateMinNPageCount(es *elasticsearch.Client, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateMaxNPrice 根据子类别、发布日期检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2ReleaseDateMaxNPrice(es *elasticsearch.Client, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateMinNPrice 根据子类别、发布日期检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2ReleaseDateMinNPrice(es *elasticsearch.Client, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2SeqMaxNPageCount 根据子类别、编号检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2SeqMinNPageCount 根据子类别、编号检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2SeqMaxNPrice 根据子类别、编号检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2SeqMinNPrice 根据子类别、编号检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountMaxNPrice 根据书名、页数检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByNamePageCountMaxNPrice(es *elasticsearch.Client, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountMinNPrice 根据书名、页数检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByNamePageCountMinNPrice(es *elasticsearch.Client, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceMaxNPageCount 根据书名、价格检索books表中页数最大的前N条详细数据列表
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByNamePriceMaxNPageCount(es *elasticsearch.Client, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceMinNPageCount 根据书名、价格检索books表中页数最小的前N条详细数据列表
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByNamePriceMinNPageCount(es *elasticsearch.Client, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateMaxNPageCount 根据书名、发布日期检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNameReleaseDateMaxNPageCount(es *elasticsearch.Client, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateMinNPageCount 根据书名、发布日期检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNameReleaseDateMinNPageCount(es *elasticsearch.Client, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateMaxNPrice 根据书名、发布日期检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNameReleaseDateMaxNPrice(es *elasticsearch.Client, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateMinNPrice 根据书名、发布日期检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNameReleaseDateMinNPrice(es *elasticsearch.Client, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqMaxNPageCount 根据书名、编号检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqMinNPageCount 根据书名、编号检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqMaxNPrice 根据书名、编号检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqMinNPrice 根据书名、编号检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateMaxNPrice 根据页数、发布日期检索books表中价格最大的前N条详细数据列表
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByPageCountReleaseDateMaxNPrice(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateMinNPrice 根据页数、发布日期检索books表中价格最小的前N条详细数据列表
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByPageCountReleaseDateMinNPrice(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeqMaxNPrice 根据页数、编号检索books表中价格最大的前N条详细数据列表
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByPageCountSeqMaxNPrice(es *elasticsearch.Client, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeqMinNPrice 根据页数、编号检索books表中价格最小的前N条详细数据列表
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByPageCountSeqMinNPrice(es *elasticsearch.Client, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateMaxNPageCount 根据价格、发布日期检索books表中页数最大的前N条详细数据列表
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByPriceReleaseDateMaxNPageCount(es *elasticsearch.Client, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateMinNPageCount 根据价格、发布日期检索books表中页数最小的前N条详细数据列表
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByPriceReleaseDateMinNPageCount(es *elasticsearch.Client, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeqMaxNPageCount 根据价格、编号检索books表中页数最大的前N条详细数据列表
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByPriceSeqMaxNPageCount(es *elasticsearch.Client, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeqMinNPageCount 根据价格、编号检索books表中页数最小的前N条详细数据列表
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByPriceSeqMinNPageCount(es *elasticsearch.Client, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqMaxNPageCount 根据发布日期、编号检索books表中页数最大的前N条详细数据列表
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqMinNPageCount 根据发布日期、编号检索books表中页数最小的前N条详细数据列表
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByReleaseDateSeqMinNPageCount(es *elasticsearch.Client, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqMaxNPrice 根据发布日期、编号检索books表中价格最大的前N条详细数据列表
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByReleaseDateSeqMaxNPrice(es *elasticsearch.Client, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqMinNPrice 根据发布日期、编号检索books表中价格最小的前N条详细数据列表
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByReleaseDateSeqMinNPrice(es *elasticsearch.Client, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassMaxNPageCount 根据全文本、作者、类别检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClassMaxNPageCount(es *elasticsearch.Client, allText, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassMinNPageCount 根据全文本、作者、类别检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClassMinNPageCount(es *elasticsearch.Client, allText, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassMaxNPrice 根据全文本、作者、类别检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClassMaxNPrice(es *elasticsearch.Client, allText, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassMinNPrice 根据全文本、作者、类别检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// class string 类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClassMinNPrice(es *elasticsearch.Client, allText, author, class string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2MaxNPageCount 根据全文本、作者、子类别检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClass2MaxNPageCount(es *elasticsearch.Client, allText, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2MinNPageCount 根据全文本、作者、子类别检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClass2MinNPageCount(es *elasticsearch.Client, allText, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2MaxNPrice 根据全文本、作者、子类别检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClass2MaxNPrice(es *elasticsearch.Client, allText, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2MinNPrice 根据全文本、作者、子类别检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextAuthorClass2MinNPrice(es *elasticsearch.Client, allText, author, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameMaxNPageCount 根据全文本、作者、书名检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextAuthorNameMaxNPageCount(es *elasticsearch.Client, allText, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameMinNPageCount 根据全文本、作者、书名检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextAuthorNameMinNPageCount(es *elasticsearch.Client, allText, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameMaxNPrice 根据全文本、作者、书名检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextAuthorNameMaxNPrice(es *elasticsearch.Client, allText, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameMinNPrice 根据全文本、作者、书名检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextAuthorNameMinNPrice(es *elasticsearch.Client, allText, author, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountMaxNPrice 根据全文本、作者、页数检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextAuthorPageCountMaxNPrice(es *elasticsearch.Client, allText, author string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountMinNPrice 根据全文本、作者、页数检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextAuthorPageCountMinNPrice(es *elasticsearch.Client, allText, author string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceMaxNPageCount 根据全文本、作者、价格检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextAuthorPriceMaxNPageCount(es *elasticsearch.Client, allText, author string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceMinNPageCount 根据全文本、作者、价格检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextAuthorPriceMinNPageCount(es *elasticsearch.Client, allText, author string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateMaxNPageCount 根据全文本、作者、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextAuthorReleaseDateMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateMinNPageCount 根据全文本、作者、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextAuthorReleaseDateMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateMaxNPrice 根据全文本、作者、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextAuthorReleaseDateMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateMinNPrice 根据全文本、作者、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextAuthorReleaseDateMinNPrice(es *elasticsearch.Client, allText, author string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqMaxNPageCount 根据全文本、作者、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextAuthorSeqMaxNPageCount(es *elasticsearch.Client, allText, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqMinNPageCount 根据全文本、作者、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextAuthorSeqMinNPageCount(es *elasticsearch.Client, allText, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqMaxNPrice 根据全文本、作者、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextAuthorSeqMaxNPrice(es *elasticsearch.Client, allText, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqMinNPrice 根据全文本、作者、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextAuthorSeqMinNPrice(es *elasticsearch.Client, allText, author, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2MaxNPageCount 根据全文本、类别、子类别检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClassClass2MaxNPageCount(es *elasticsearch.Client, allText, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2MinNPageCount 根据全文本、类别、子类别检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClassClass2MinNPageCount(es *elasticsearch.Client, allText, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2MaxNPrice 根据全文本、类别、子类别检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClassClass2MaxNPrice(es *elasticsearch.Client, allText, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2MinNPrice 根据全文本、类别、子类别检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAllTextClassClass2MinNPrice(es *elasticsearch.Client, allText, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameMaxNPageCount 根据全文本、类别、书名检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClassNameMaxNPageCount(es *elasticsearch.Client, allText, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameMinNPageCount 根据全文本、类别、书名检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClassNameMinNPageCount(es *elasticsearch.Client, allText, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameMaxNPrice 根据全文本、类别、书名检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClassNameMaxNPrice(es *elasticsearch.Client, allText, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameMinNPrice 根据全文本、类别、书名检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClassNameMinNPrice(es *elasticsearch.Client, allText, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountMaxNPrice 根据全文本、类别、页数检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextClassPageCountMaxNPrice(es *elasticsearch.Client, allText, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountMinNPrice 根据全文本、类别、页数检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextClassPageCountMinNPrice(es *elasticsearch.Client, allText, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceMaxNPageCount 根据全文本、类别、价格检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextClassPriceMaxNPageCount(es *elasticsearch.Client, allText, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceMinNPageCount 根据全文本、类别、价格检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextClassPriceMinNPageCount(es *elasticsearch.Client, allText, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateMaxNPageCount 根据全文本、类别、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClassReleaseDateMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateMinNPageCount 根据全文本、类别、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClassReleaseDateMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateMaxNPrice 根据全文本、类别、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClassReleaseDateMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateMinNPrice 根据全文本、类别、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClassReleaseDateMinNPrice(es *elasticsearch.Client, allText, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeqMaxNPageCount 根据全文本、类别、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClassSeqMaxNPageCount(es *elasticsearch.Client, allText, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeqMinNPageCount 根据全文本、类别、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClassSeqMinNPageCount(es *elasticsearch.Client, allText, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeqMaxNPrice 根据全文本、类别、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClassSeqMaxNPrice(es *elasticsearch.Client, allText, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeqMinNPrice 根据全文本、类别、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClassSeqMinNPrice(es *elasticsearch.Client, allText, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameMaxNPageCount 根据全文本、子类别、书名检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClass2NameMaxNPageCount(es *elasticsearch.Client, allText, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameMinNPageCount 根据全文本、子类别、书名检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClass2NameMinNPageCount(es *elasticsearch.Client, allText, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameMaxNPrice 根据全文本、子类别、书名检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClass2NameMaxNPrice(es *elasticsearch.Client, allText, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameMinNPrice 根据全文本、子类别、书名检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAllTextClass2NameMinNPrice(es *elasticsearch.Client, allText, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountMaxNPrice 根据全文本、子类别、页数检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextClass2PageCountMaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountMinNPrice 根据全文本、子类别、页数检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextClass2PageCountMinNPrice(es *elasticsearch.Client, allText, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceMaxNPageCount 根据全文本、子类别、价格检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextClass2PriceMaxNPageCount(es *elasticsearch.Client, allText, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceMinNPageCount 根据全文本、子类别、价格检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextClass2PriceMinNPageCount(es *elasticsearch.Client, allText, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateMaxNPageCount 根据全文本、子类别、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClass2ReleaseDateMaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateMinNPageCount 根据全文本、子类别、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClass2ReleaseDateMinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateMaxNPrice 根据全文本、子类别、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClass2ReleaseDateMaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateMinNPrice 根据全文本、子类别、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextClass2ReleaseDateMinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2SeqMaxNPageCount 根据全文本、子类别、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClass2SeqMaxNPageCount(es *elasticsearch.Client, allText, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2SeqMinNPageCount 根据全文本、子类别、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClass2SeqMinNPageCount(es *elasticsearch.Client, allText, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2SeqMaxNPrice 根据全文本、子类别、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClass2SeqMaxNPrice(es *elasticsearch.Client, allText, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2SeqMinNPrice 根据全文本、子类别、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextClass2SeqMinNPrice(es *elasticsearch.Client, allText, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountMaxNPrice 根据全文本、书名、页数检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextNamePageCountMaxNPrice(es *elasticsearch.Client, allText, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountMinNPrice 根据全文本、书名、页数检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAllTextNamePageCountMinNPrice(es *elasticsearch.Client, allText, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceMaxNPageCount 根据全文本、书名、价格检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextNamePriceMaxNPageCount(es *elasticsearch.Client, allText, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceMinNPageCount 根据全文本、书名、价格检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByAllTextNamePriceMinNPageCount(es *elasticsearch.Client, allText, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateMaxNPageCount 根据全文本、书名、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextNameReleaseDateMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateMinNPageCount 根据全文本、书名、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextNameReleaseDateMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateMaxNPrice 根据全文本、书名、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextNameReleaseDateMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateMinNPrice 根据全文本、书名、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextNameReleaseDateMinNPrice(es *elasticsearch.Client, allText, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqMaxNPageCount 根据全文本、书名、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextNameSeqMaxNPageCount(es *elasticsearch.Client, allText, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqMinNPageCount 根据全文本、书名、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextNameSeqMinNPageCount(es *elasticsearch.Client, allText, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqMaxNPrice 根据全文本、书名、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextNameSeqMaxNPrice(es *elasticsearch.Client, allText, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqMinNPrice 根据全文本、书名、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextNameSeqMinNPrice(es *elasticsearch.Client, allText, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateMaxNPrice 根据全文本、页数、发布日期检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextPageCountReleaseDateMaxNPrice(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateMinNPrice 根据全文本、页数、发布日期检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextPageCountReleaseDateMinNPrice(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeqMaxNPrice 根据全文本、页数、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextPageCountSeqMaxNPrice(es *elasticsearch.Client, allText string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeqMinNPrice 根据全文本、页数、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextPageCountSeqMinNPrice(es *elasticsearch.Client, allText string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateMaxNPageCount 根据全文本、价格、发布日期检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextPriceReleaseDateMaxNPageCount(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateMinNPageCount 根据全文本、价格、发布日期检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAllTextPriceReleaseDateMinNPageCount(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeqMaxNPageCount 根据全文本、价格、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextPriceSeqMaxNPageCount(es *elasticsearch.Client, allText string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeqMinNPageCount 根据全文本、价格、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextPriceSeqMinNPageCount(es *elasticsearch.Client, allText string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqMaxNPageCount 根据全文本、发布日期、编号检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqMinNPageCount 根据全文本、发布日期、编号检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextReleaseDateSeqMinNPageCount(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqMaxNPrice 根据全文本、发布日期、编号检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextReleaseDateSeqMaxNPrice(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqMinNPrice 根据全文本、发布日期、编号检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAllTextReleaseDateSeqMinNPrice(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2MaxNPageCount 根据作者、类别、子类别检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClassClass2MaxNPageCount(es *elasticsearch.Client, author, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2MinNPageCount 根据作者、类别、子类别检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClassClass2MinNPageCount(es *elasticsearch.Client, author, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2MaxNPrice 根据作者、类别、子类别检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClassClass2MaxNPrice(es *elasticsearch.Client, author, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2MinNPrice 根据作者、类别、子类别检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// class2 string 子类别
// size int 前N条记录
func MatchBooksByAuthorClassClass2MinNPrice(es *elasticsearch.Client, author, class, class2 string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameMaxNPageCount 根据作者、类别、书名检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClassNameMaxNPageCount(es *elasticsearch.Client, author, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameMinNPageCount 根据作者、类别、书名检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClassNameMinNPageCount(es *elasticsearch.Client, author, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameMaxNPrice 根据作者、类别、书名检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClassNameMaxNPrice(es *elasticsearch.Client, author, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameMinNPrice 根据作者、类别、书名检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClassNameMinNPrice(es *elasticsearch.Client, author, class, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountMaxNPrice 根据作者、类别、页数检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorClassPageCountMaxNPrice(es *elasticsearch.Client, author, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountMinNPrice 根据作者、类别、页数检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorClassPageCountMinNPrice(es *elasticsearch.Client, author, class string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceMaxNPageCount 根据作者、类别、价格检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorClassPriceMaxNPageCount(es *elasticsearch.Client, author, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceMinNPageCount 根据作者、类别、价格检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorClassPriceMinNPageCount(es *elasticsearch.Client, author, class string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateMaxNPageCount 根据作者、类别、发布日期检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClassReleaseDateMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateMinNPageCount 根据作者、类别、发布日期检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClassReleaseDateMinNPageCount(es *elasticsearch.Client, author, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateMaxNPrice 根据作者、类别、发布日期检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClassReleaseDateMaxNPrice(es *elasticsearch.Client, author, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateMinNPrice 根据作者、类别、发布日期检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClassReleaseDateMinNPrice(es *elasticsearch.Client, author, class string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeqMaxNPageCount 根据作者、类别、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClassSeqMaxNPageCount(es *elasticsearch.Client, author, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeqMinNPageCount 根据作者、类别、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClassSeqMinNPageCount(es *elasticsearch.Client, author, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeqMaxNPrice 根据作者、类别、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClassSeqMaxNPrice(es *elasticsearch.Client, author, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeqMinNPrice 根据作者、类别、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClassSeqMinNPrice(es *elasticsearch.Client, author, class, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameMaxNPageCount 根据作者、子类别、书名检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClass2NameMaxNPageCount(es *elasticsearch.Client, author, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameMinNPageCount 根据作者、子类别、书名检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClass2NameMinNPageCount(es *elasticsearch.Client, author, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameMaxNPrice 根据作者、子类别、书名检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClass2NameMaxNPrice(es *elasticsearch.Client, author, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameMinNPrice 根据作者、子类别、书名检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByAuthorClass2NameMinNPrice(es *elasticsearch.Client, author, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountMaxNPrice 根据作者、子类别、页数检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorClass2PageCountMaxNPrice(es *elasticsearch.Client, author, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountMinNPrice 根据作者、子类别、页数检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorClass2PageCountMinNPrice(es *elasticsearch.Client, author, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceMaxNPageCount 根据作者、子类别、价格检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorClass2PriceMaxNPageCount(es *elasticsearch.Client, author, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceMinNPageCount 根据作者、子类别、价格检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorClass2PriceMinNPageCount(es *elasticsearch.Client, author, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateMaxNPageCount 根据作者、子类别、发布日期检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClass2ReleaseDateMaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateMinNPageCount 根据作者、子类别、发布日期检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClass2ReleaseDateMinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateMaxNPrice 根据作者、子类别、发布日期检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClass2ReleaseDateMaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateMinNPrice 根据作者、子类别、发布日期检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorClass2ReleaseDateMinNPrice(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2SeqMaxNPageCount 根据作者、子类别、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClass2SeqMaxNPageCount(es *elasticsearch.Client, author, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2SeqMinNPageCount 根据作者、子类别、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClass2SeqMinNPageCount(es *elasticsearch.Client, author, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2SeqMaxNPrice 根据作者、子类别、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClass2SeqMaxNPrice(es *elasticsearch.Client, author, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2SeqMinNPrice 根据作者、子类别、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorClass2SeqMinNPrice(es *elasticsearch.Client, author, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountMaxNPrice 根据作者、书名、页数检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorNamePageCountMaxNPrice(es *elasticsearch.Client, author, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountMinNPrice 根据作者、书名、页数检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByAuthorNamePageCountMinNPrice(es *elasticsearch.Client, author, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceMaxNPageCount 根据作者、书名、价格检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorNamePriceMaxNPageCount(es *elasticsearch.Client, author, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceMinNPageCount 根据作者、书名、价格检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByAuthorNamePriceMinNPageCount(es *elasticsearch.Client, author, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateMaxNPageCount 根据作者、书名、发布日期检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorNameReleaseDateMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateMinNPageCount 根据作者、书名、发布日期检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorNameReleaseDateMinNPageCount(es *elasticsearch.Client, author, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateMaxNPrice 根据作者、书名、发布日期检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorNameReleaseDateMaxNPrice(es *elasticsearch.Client, author, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateMinNPrice 根据作者、书名、发布日期检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorNameReleaseDateMinNPrice(es *elasticsearch.Client, author, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqMaxNPageCount 根据作者、书名、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorNameSeqMaxNPageCount(es *elasticsearch.Client, author, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqMinNPageCount 根据作者、书名、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorNameSeqMinNPageCount(es *elasticsearch.Client, author, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqMaxNPrice 根据作者、书名、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorNameSeqMaxNPrice(es *elasticsearch.Client, author, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqMinNPrice 根据作者、书名、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorNameSeqMinNPrice(es *elasticsearch.Client, author, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateMaxNPrice 根据作者、页数、发布日期检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorPageCountReleaseDateMaxNPrice(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateMinNPrice 根据作者、页数、发布日期检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorPageCountReleaseDateMinNPrice(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeqMaxNPrice 根据作者、页数、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorPageCountSeqMaxNPrice(es *elasticsearch.Client, author string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeqMinNPrice 根据作者、页数、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorPageCountSeqMinNPrice(es *elasticsearch.Client, author string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateMaxNPageCount 根据作者、价格、发布日期检索books表中页数最大的前N条详细数据列表
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorPriceReleaseDateMaxNPageCount(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateMinNPageCount 根据作者、价格、发布日期检索books表中页数最小的前N条详细数据列表
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByAuthorPriceReleaseDateMinNPageCount(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeqMaxNPageCount 根据作者、价格、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorPriceSeqMaxNPageCount(es *elasticsearch.Client, author string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeqMinNPageCount 根据作者、价格、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorPriceSeqMinNPageCount(es *elasticsearch.Client, author string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqMaxNPageCount 根据作者、发布日期、编号检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqMinNPageCount 根据作者、发布日期、编号检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorReleaseDateSeqMinNPageCount(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqMaxNPrice 根据作者、发布日期、编号检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorReleaseDateSeqMaxNPrice(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqMinNPrice 根据作者、发布日期、编号检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByAuthorReleaseDateSeqMinNPrice(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameMaxNPageCount 根据类别、子类别、书名检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassClass2NameMaxNPageCount(es *elasticsearch.Client, class, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameMinNPageCount 根据类别、子类别、书名检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassClass2NameMinNPageCount(es *elasticsearch.Client, class, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameMaxNPrice 根据类别、子类别、书名检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassClass2NameMaxNPrice(es *elasticsearch.Client, class, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameMinNPrice 根据类别、子类别、书名检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// name string 书名
// size int 前N条记录
func MatchBooksByClassClass2NameMinNPrice(es *elasticsearch.Client, class, class2, name string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountMaxNPrice 根据类别、子类别、页数检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassClass2PageCountMaxNPrice(es *elasticsearch.Client, class, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountMinNPrice 根据类别、子类别、页数检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassClass2PageCountMinNPrice(es *elasticsearch.Client, class, class2 string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceMaxNPageCount 根据类别、子类别、价格检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClassClass2PriceMaxNPageCount(es *elasticsearch.Client, class, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceMinNPageCount 根据类别、子类别、价格检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// price float64 价格
// size int 前N条记录
func MatchBooksByClassClass2PriceMinNPageCount(es *elasticsearch.Client, class, class2 string, price float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateMaxNPageCount 根据类别、子类别、发布日期检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassClass2ReleaseDateMaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateMinNPageCount 根据类别、子类别、发布日期检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassClass2ReleaseDateMinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateMaxNPrice 根据类别、子类别、发布日期检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassClass2ReleaseDateMaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateMinNPrice 根据类别、子类别、发布日期检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassClass2ReleaseDateMinNPrice(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2SeqMaxNPageCount 根据类别、子类别、编号检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassClass2SeqMaxNPageCount(es *elasticsearch.Client, class, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2SeqMinNPageCount 根据类别、子类别、编号检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassClass2SeqMinNPageCount(es *elasticsearch.Client, class, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2SeqMaxNPrice 根据类别、子类别、编号检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassClass2SeqMaxNPrice(es *elasticsearch.Client, class, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2SeqMinNPrice 根据类别、子类别、编号检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// seq string 编号
// size int 前N条记录
func MatchBooksByClassClass2SeqMinNPrice(es *elasticsearch.Client, class, class2, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountMaxNPrice 根据类别、书名、页数检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassNamePageCountMaxNPrice(es *elasticsearch.Client, class, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountMinNPrice 根据类别、书名、页数检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClassNamePageCountMinNPrice(es *elasticsearch.Client, class, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceMaxNPageCount 根据类别、书名、价格检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByClassNamePriceMaxNPageCount(es *elasticsearch.Client, class, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceMinNPageCount 根据类别、书名、价格检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByClassNamePriceMinNPageCount(es *elasticsearch.Client, class, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateMaxNPageCount 根据类别、书名、发布日期检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassNameReleaseDateMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateMinNPageCount 根据类别、书名、发布日期检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassNameReleaseDateMinNPageCount(es *elasticsearch.Client, class, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateMaxNPrice 根据类别、书名、发布日期检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassNameReleaseDateMaxNPrice(es *elasticsearch.Client, class, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateMinNPrice 根据类别、书名、发布日期检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassNameReleaseDateMinNPrice(es *elasticsearch.Client, class, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeqMaxNPageCount 根据类别、书名、编号检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClassNameSeqMaxNPageCount(es *elasticsearch.Client, class, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeqMinNPageCount 根据类别、书名、编号检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClassNameSeqMinNPageCount(es *elasticsearch.Client, class, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeqMaxNPrice 根据类别、书名、编号检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClassNameSeqMaxNPrice(es *elasticsearch.Client, class, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeqMinNPrice 根据类别、书名、编号检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClassNameSeqMinNPrice(es *elasticsearch.Client, class, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateMaxNPrice 根据类别、页数、发布日期检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassPageCountReleaseDateMaxNPrice(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateMinNPrice 根据类别、页数、发布日期检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassPageCountReleaseDateMinNPrice(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountSeqMaxNPrice 根据类别、页数、编号检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByClassPageCountSeqMaxNPrice(es *elasticsearch.Client, class string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountSeqMinNPrice 根据类别、页数、编号检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByClassPageCountSeqMinNPrice(es *elasticsearch.Client, class string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateMaxNPageCount 根据类别、价格、发布日期检索books表中页数最大的前N条详细数据列表
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassPriceReleaseDateMaxNPageCount(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateMinNPageCount 根据类别、价格、发布日期检索books表中页数最小的前N条详细数据列表
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClassPriceReleaseDateMinNPageCount(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceSeqMaxNPageCount 根据类别、价格、编号检索books表中页数最大的前N条详细数据列表
// class string 类别
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByClassPriceSeqMaxNPageCount(es *elasticsearch.Client, class string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceSeqMinNPageCount 根据类别、价格、编号检索books表中页数最小的前N条详细数据列表
// class string 类别
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByClassPriceSeqMinNPageCount(es *elasticsearch.Client, class string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeqMaxNPageCount 根据类别、发布日期、编号检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClassReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeqMinNPageCount 根据类别、发布日期、编号检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClassReleaseDateSeqMinNPageCount(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeqMaxNPrice 根据类别、发布日期、编号检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClassReleaseDateSeqMaxNPrice(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeqMinNPrice 根据类别、发布日期、编号检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClassReleaseDateSeqMinNPrice(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountMaxNPrice 根据子类别、书名、页数检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClass2NamePageCountMaxNPrice(es *elasticsearch.Client, class2, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountMinNPrice 根据子类别、书名、页数检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// size int 前N条记录
func MatchBooksByClass2NamePageCountMinNPrice(es *elasticsearch.Client, class2, name string, pageCount int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceMaxNPageCount 根据子类别、书名、价格检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByClass2NamePriceMaxNPageCount(es *elasticsearch.Client, class2, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceMinNPageCount 根据子类别、书名、价格检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// price float64 价格
// size int 前N条记录
func MatchBooksByClass2NamePriceMinNPageCount(es *elasticsearch.Client, class2, name string, price float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateMaxNPageCount 根据子类别、书名、发布日期检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2NameReleaseDateMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateMinNPageCount 根据子类别、书名、发布日期检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2NameReleaseDateMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateMaxNPrice 根据子类别、书名、发布日期检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2NameReleaseDateMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateMinNPrice 根据子类别、书名、发布日期检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2NameReleaseDateMinNPrice(es *elasticsearch.Client, class2, name string, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeqMaxNPageCount 根据子类别、书名、编号检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2NameSeqMaxNPageCount(es *elasticsearch.Client, class2, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeqMinNPageCount 根据子类别、书名、编号检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2NameSeqMinNPageCount(es *elasticsearch.Client, class2, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeqMaxNPrice 根据子类别、书名、编号检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2NameSeqMaxNPrice(es *elasticsearch.Client, class2, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeqMinNPrice 根据子类别、书名、编号检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2NameSeqMinNPrice(es *elasticsearch.Client, class2, name, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateMaxNPrice 根据子类别、页数、发布日期检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2PageCountReleaseDateMaxNPrice(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateMinNPrice 根据子类别、页数、发布日期检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2PageCountReleaseDateMinNPrice(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountSeqMaxNPrice 根据子类别、页数、编号检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2PageCountSeqMaxNPrice(es *elasticsearch.Client, class2 string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountSeqMinNPrice 根据子类别、页数、编号检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2PageCountSeqMinNPrice(es *elasticsearch.Client, class2 string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateMaxNPageCount 根据子类别、价格、发布日期检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2PriceReleaseDateMaxNPageCount(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateMinNPageCount 根据子类别、价格、发布日期检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByClass2PriceReleaseDateMinNPageCount(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceSeqMaxNPageCount 根据子类别、价格、编号检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2PriceSeqMaxNPageCount(es *elasticsearch.Client, class2 string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceSeqMinNPageCount 根据子类别、价格、编号检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2PriceSeqMinNPageCount(es *elasticsearch.Client, class2 string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeqMaxNPageCount 根据子类别、发布日期、编号检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2ReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeqMinNPageCount 根据子类别、发布日期、编号检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2ReleaseDateSeqMinNPageCount(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeqMaxNPrice 根据子类别、发布日期、编号检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2ReleaseDateSeqMaxNPrice(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeqMinNPrice 根据子类别、发布日期、编号检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByClass2ReleaseDateSeqMinNPrice(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateMaxNPrice 根据书名、页数、发布日期检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNamePageCountReleaseDateMaxNPrice(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateMinNPrice 根据书名、页数、发布日期检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNamePageCountReleaseDateMinNPrice(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeqMaxNPrice 根据书名、页数、编号检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByNamePageCountSeqMaxNPrice(es *elasticsearch.Client, name string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeqMinNPrice 根据书名、页数、编号检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCount int64 页数
// seq string 编号
// size int 前N条记录
func MatchBooksByNamePageCountSeqMinNPrice(es *elasticsearch.Client, name string, pageCount int64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateMaxNPageCount 根据书名、价格、发布日期检索books表中页数最大的前N条详细数据列表
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNamePriceReleaseDateMaxNPageCount(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateMinNPageCount 根据书名、价格、发布日期检索books表中页数最小的前N条详细数据列表
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// size int 前N条记录
func MatchBooksByNamePriceReleaseDateMinNPageCount(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeqMaxNPageCount 根据书名、价格、编号检索books表中页数最大的前N条详细数据列表
// name string 书名
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByNamePriceSeqMaxNPageCount(es *elasticsearch.Client, name string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeqMinNPageCount 根据书名、价格、编号检索books表中页数最小的前N条详细数据列表
// name string 书名
// price float64 价格
// seq string 编号
// size int 前N条记录
func MatchBooksByNamePriceSeqMinNPageCount(es *elasticsearch.Client, name string, price float64, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqMaxNPageCount 根据书名、发布日期、编号检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByNameReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqMinNPageCount 根据书名、发布日期、编号检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByNameReleaseDateSeqMinNPageCount(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqMaxNPrice 根据书名、发布日期、编号检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByNameReleaseDateSeqMaxNPrice(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqMinNPrice 根据书名、发布日期、编号检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByNameReleaseDateSeqMinNPrice(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeqMaxNPrice 根据页数、发布日期、编号检索books表中价格最大的前N条详细数据列表
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByPageCountReleaseDateSeqMaxNPrice(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeqMinNPrice 根据页数、发布日期、编号检索books表中价格最小的前N条详细数据列表
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByPageCountReleaseDateSeqMinNPrice(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeqMaxNPageCount 根据价格、发布日期、编号检索books表中页数最大的前N条详细数据列表
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByPriceReleaseDateSeqMaxNPageCount(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeqMinNPageCount 根据价格、发布日期、编号检索books表中页数最小的前N条详细数据列表
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// size int 前N条记录
func MatchBooksByPriceReleaseDateSeqMinNPageCount(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// KnnBooksByAllVector 对全文本向量进行检索查找books表的详细数据列表和总数量
// allVector []float32 全文本向量
func KnnBooksByAllVector(es *elasticsearch.Client, allVector []float32) (*eq.Data, *eq.Query, error) {
	knn := eq.Knn("all_vector", allVector)
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllText 根据全文本过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllText(es *elasticsearch.Client, allText string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthor 根据作者过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthor(es *elasticsearch.Client, author string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass 根据类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass(es *elasticsearch.Client, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2 根据子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2(es *elasticsearch.Client, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithName 根据书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithName(es *elasticsearch.Client, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCount 根据页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCount(es *elasticsearch.Client, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPrice 根据价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPrice(es *elasticsearch.Client, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithReleaseDate 根据发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithReleaseDate(es *elasticsearch.Client, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithSeq 根据编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithSeq(es *elasticsearch.Client, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthor 根据全文本、作者过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthor(es *elasticsearch.Client, allText, author string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass 根据全文本、类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass(es *elasticsearch.Client, allText, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2 根据全文本、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2(es *elasticsearch.Client, allText, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextName 根据全文本、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextName(es *elasticsearch.Client, allText, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPageCount 根据全文本、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPrice 根据全文本、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPrice(es *elasticsearch.Client, allText string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextReleaseDate 根据全文本、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextSeq 根据全文本、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextSeq(es *elasticsearch.Client, allText, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass 根据作者、类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass(es *elasticsearch.Client, author, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2 根据作者、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2(es *elasticsearch.Client, author, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorName 根据作者、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorName(es *elasticsearch.Client, author, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCount 根据作者、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPrice 根据作者、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPrice(es *elasticsearch.Client, author string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorReleaseDate 根据作者、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorSeq 根据作者、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorSeq(es *elasticsearch.Client, author, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2 根据类别、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2(es *elasticsearch.Client, class, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassName 根据类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassName(es *elasticsearch.Client, class, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCount 根据类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCount(es *elasticsearch.Client, class string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPrice 根据类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPrice(es *elasticsearch.Client, class string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassReleaseDate 根据类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassSeq 根据类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassSeq(es *elasticsearch.Client, class, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2Name 根据子类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2Name(es *elasticsearch.Client, class2, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PageCount 根据子类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2Price 根据子类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2Price(es *elasticsearch.Client, class2 string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2ReleaseDate 根据子类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2Seq 根据子类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2Seq(es *elasticsearch.Client, class2, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCount 根据书名、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCount(es *elasticsearch.Client, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePrice 根据书名、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePrice(es *elasticsearch.Client, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameReleaseDate 根据书名、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameSeq 根据书名、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameSeq(es *elasticsearch.Client, name, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPrice 根据页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountReleaseDate 根据页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountSeq 根据页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceReleaseDate 根据价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceSeq 根据价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceSeq(es *elasticsearch.Client, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithReleaseDateSeq 根据发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorClass 根据全文本、作者、类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class string 类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorClass2 根据全文本、作者、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorName 根据全文本、作者、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorPageCount 根据全文本、作者、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorPrice 根据全文本、作者、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorReleaseDate 根据全文本、作者、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextAuthorSeq 根据全文本、作者、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// author string 作者
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassClass2 根据全文本、类别、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassName 根据全文本、类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassName(es *elasticsearch.Client, allText, class, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassPageCount 根据全文本、类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassPrice 根据全文本、类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassReleaseDate 根据全文本、类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClassSeq 根据全文本、类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class string 类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2Name 根据全文本、子类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2PageCount 根据全文本、子类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2Price 根据全文本、子类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2ReleaseDate 根据全文本、子类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextClass2Seq 根据全文本、子类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// class2 string 子类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextNamePageCount 根据全文本、书名、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextNamePrice 根据全文本、书名、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextNameReleaseDate 根据全文本、书名、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextNameSeq 根据全文本、书名、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// name string 书名
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPageCountPrice 根据全文本、页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPageCountPrice(es *elasticsearch.Client, allText string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPageCountReleaseDate 根据全文本、页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPageCountSeq 根据全文本、页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPriceReleaseDate 根据全文本、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextPriceSeq 根据全文本、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAllTextReleaseDateSeq 根据全文本、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("all_text", allText),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassClass2 根据作者、类别、子类别过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// class2 string 子类别
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassName 根据作者、类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassName(es *elasticsearch.Client, author, class, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassPageCount 根据作者、类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassPrice 根据作者、类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassReleaseDate 根据作者、类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassSeq 根据作者、类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class string 类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2Name 根据作者、子类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2PageCount 根据作者、子类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2Price 根据作者、子类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2ReleaseDate 根据作者、子类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass2Seq 根据作者、子类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// class2 string 子类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNamePageCount 根据作者、书名、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNamePrice 根据作者、书名、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNameReleaseDate 根据作者、书名、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNameSeq 根据作者、书名、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// name string 书名
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountPrice 根据作者、页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountPrice(es *elasticsearch.Client, author string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountReleaseDate 根据作者、页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountSeq 根据作者、页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPriceReleaseDate 根据作者、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPriceSeq 根据作者、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorReleaseDateSeq 根据作者、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2Name 根据类别、子类别、书名过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2Name(es *elasticsearch.Client, class, class2, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2PageCount 根据类别、子类别、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2Price 根据类别、子类别、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2ReleaseDate 根据类别、子类别、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassClass2Seq 根据类别、子类别、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// class2 string 子类别
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNamePageCount 根据类别、书名、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNamePrice 根据类别、书名、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNamePrice(es *elasticsearch.Client, class, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNameReleaseDate 根据类别、书名、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNameSeq 根据类别、书名、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// name string 书名
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNameSeq(es *elasticsearch.Client, class, name, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountPrice 根据类别、页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountReleaseDate 根据类别、页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountSeq 根据类别、页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPriceReleaseDate 根据类别、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPriceSeq 根据类别、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassReleaseDateSeq 根据类别、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2NamePageCount 根据子类别、书名、页数过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2NamePrice 根据子类别、书名、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2NameReleaseDate 根据子类别、书名、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2NameSeq 根据子类别、书名、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// name string 书名
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PageCountPrice 根据子类别、页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PageCountPrice(es *elasticsearch.Client, class2 string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PageCountReleaseDate 根据子类别、页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PageCountSeq 根据子类别、页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PriceReleaseDate 根据子类别、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2PriceSeq 根据子类别、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass2ReleaseDateSeq 根据子类别、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountPrice 根据书名、页数、价格过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountPrice(es *elasticsearch.Client, name string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountReleaseDate 根据书名、页数、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountSeq 根据书名、页数、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// pageCount int64 页数
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePriceReleaseDate 根据书名、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePriceSeq 根据书名、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameReleaseDateSeq 根据书名、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPriceReleaseDate 根据页数、价格、发布日期过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPriceReleaseDate(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPriceSeq 根据页数、价格、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// price float64 价格
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPriceSeq(es *elasticsearch.Client, pageCount int64, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountReleaseDateSeq 根据页数、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceReleaseDateSeq 根据价格、发布日期、编号过滤后对全文本向量进行检索查找books表的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

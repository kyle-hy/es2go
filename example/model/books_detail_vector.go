// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// KnnBooksByAllVector 对全文本向量进行检索查找books的详细数据列表和总数量
// allVector []float32 全文本向量
func KnnBooksByAllVector(es *elasticsearch.Client, allVector []float32) (*eq.Data, *eq.Query, error) {
	knn := eq.Knn("all_vector", allVector)
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthor 根据author过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthor(es *elasticsearch.Client, author string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClass 根据class过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClass(es *elasticsearch.Client, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithName 根据书名过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithName(es *elasticsearch.Client, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCount 根据page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCount(es *elasticsearch.Client, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPrice 根据价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPrice(es *elasticsearch.Client, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithReleaseDate 根据release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithReleaseDate(es *elasticsearch.Client, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithSeq 根据seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithSeq(es *elasticsearch.Client, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClass 根据author、class过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClass(es *elasticsearch.Client, author string, class string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorName 根据author、书名过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorName(es *elasticsearch.Client, author string, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCount 根据author、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPrice 根据author、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPrice(es *elasticsearch.Client, author string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorReleaseDate 根据author、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorSeq 根据author、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorSeq(es *elasticsearch.Client, author string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassName 根据class、书名过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassName(es *elasticsearch.Client, class string, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCount 根据class、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCount(es *elasticsearch.Client, class string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPrice 根据class、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPrice(es *elasticsearch.Client, class string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassReleaseDate 根据class、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassSeq 根据class、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassSeq(es *elasticsearch.Client, class string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCount 根据书名、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCount(es *elasticsearch.Client, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePrice 根据书名、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePrice(es *elasticsearch.Client, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameReleaseDate 根据书名、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameSeq 根据书名、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameSeq(es *elasticsearch.Client, name string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPrice 根据page_count、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountReleaseDate 根据page_count、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountSeq 根据page_count、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceReleaseDate 根据价格、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceSeq 根据价格、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// price float64 价格
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceSeq(es *elasticsearch.Client, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithReleaseDateSeq 根据release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassName 根据author、class、书名过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassName(es *elasticsearch.Client, author string, class string, name string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Match("name", name),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassPageCount 根据author、class、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassPageCount(es *elasticsearch.Client, author string, class string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassPrice 根据author、class、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassPrice(es *elasticsearch.Client, author string, class string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassReleaseDate 根据author、class、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassReleaseDate(es *elasticsearch.Client, author string, class string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorClassSeq 根据author、class、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// class string class
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorClassSeq(es *elasticsearch.Client, author string, class string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNamePageCount 根据author、书名、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// name string 书名
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNamePageCount(es *elasticsearch.Client, author string, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNamePrice 根据author、书名、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNamePrice(es *elasticsearch.Client, author string, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNameReleaseDate 根据author、书名、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// name string 书名
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNameReleaseDate(es *elasticsearch.Client, author string, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorNameSeq 根据author、书名、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// name string 书名
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorNameSeq(es *elasticsearch.Client, author string, name string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountPrice 根据author、page_count、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountPrice(es *elasticsearch.Client, author string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountReleaseDate 根据author、page_count、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPageCountSeq 根据author、page_count、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// pageCount int64 page_count
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPriceReleaseDate 根据author、价格、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// price float64 价格
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorPriceSeq 根据author、价格、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// price float64 价格
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithAuthorReleaseDateSeq 根据author、release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// author string author
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("author", author),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNamePageCount 根据class、书名、page_count过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// name string 书名
// pageCount int64 page_count
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNamePageCount(es *elasticsearch.Client, class string, name string, pageCount int64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNamePrice 根据class、书名、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// name string 书名
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNamePrice(es *elasticsearch.Client, class string, name string, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNameReleaseDate 根据class、书名、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// name string 书名
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNameReleaseDate(es *elasticsearch.Client, class string, name string, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassNameSeq 根据class、书名、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// name string 书名
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassNameSeq(es *elasticsearch.Client, class string, name string, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Match("name", name),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountPrice 根据class、page_count、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountReleaseDate 根据class、page_count、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPageCountSeq 根据class、page_count、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPriceReleaseDate 根据class、价格、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// price float64 价格
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassPriceSeq 根据class、价格、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// price float64 价格
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithClassReleaseDateSeq 根据class、release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// class string class
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountPrice 根据书名、page_count、价格过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// price float64 价格
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountPrice(es *elasticsearch.Client, name string, pageCount int64, price float64, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountReleaseDate 根据书名、page_count、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePageCountSeq 根据书名、page_count、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// pageCount int64 page_count
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePriceReleaseDate 根据书名、价格、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNamePriceSeq 根据书名、价格、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// price float64 价格
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithNameReleaseDateSeq 根据书名、release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// name string 书名
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Match("name", name),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPriceReleaseDate 根据page_count、价格、release_date过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// releaseDate time.Time release_date
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPriceReleaseDate(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountPriceSeq 根据page_count、价格、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountPriceSeq(es *elasticsearch.Client, pageCount int64, price float64, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPageCountReleaseDateSeq 根据page_count、release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// pageCount int64 page_count
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

// KnnBooksByAllVectorWithPriceReleaseDateSeq 根据价格、release_date、seq过滤后对全文本向量进行检索查找books的详细数据列表和总数量
// price float64 价格
// releaseDate time.Time release_date
// seq string seq
// allVector []float32 全文本向量
func KnnBooksByAllVectorWithPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, allVector []float32) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	knn := eq.Knn("all_vector", allVector, eq.WithFilter(eq.Bool(eq.WithMust(filters))))
	esQuery := &eq.ESQuery{Query: knn}
	return queryBooksList(es, esQuery)
}

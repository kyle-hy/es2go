// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// StatsPageCountOfBooksByAllText 根据全文本检索books表并计算页数的统计信息
// allText string 全文本
func StatsPageCountOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllText 根据全文本检索books表并计算价格的统计信息
// allText string 全文本
func StatsPriceOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthor 根据作者检索books表并计算页数的统计信息
// author string 作者
func StatsPageCountOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthor 根据作者检索books表并计算价格的统计信息
// author string 作者
func StatsPriceOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass 根据类别检索books表并计算页数的统计信息
// class string 类别
func StatsPageCountOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass 根据类别检索books表并计算价格的统计信息
// class string 类别
func StatsPriceOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2 根据子类别检索books表并计算页数的统计信息
// class2 string 子类别
func StatsPageCountOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2 根据子类别检索books表并计算价格的统计信息
// class2 string 子类别
func StatsPriceOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByName 根据书名检索books表并计算页数的统计信息
// name string 书名
func StatsPageCountOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByName 根据书名检索books表并计算价格的统计信息
// name string 书名
func StatsPriceOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByPageCount 根据页数检索books表并计算价格的统计信息
// pageCount int64 页数
func StatsPriceOfBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByPrice 根据价格检索books表并计算页数的统计信息
// price float64 价格
func StatsPageCountOfBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByReleaseDate 根据发布日期检索books表并计算页数的统计信息
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByReleaseDate 根据发布日期检索books表并计算价格的统计信息
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksBySeq 根据编号检索books表并计算页数的统计信息
// seq string 编号
func StatsPageCountOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksBySeq 根据编号检索books表并计算价格的统计信息
// seq string 编号
func StatsPriceOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthor 根据全文本、作者检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
func StatsPageCountOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthor 根据全文本、作者检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
func StatsPriceOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass 根据全文本、类别检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
func StatsPageCountOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass 根据全文本、类别检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
func StatsPriceOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2 根据全文本、子类别检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
func StatsPageCountOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2 根据全文本、子类别检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
func StatsPriceOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextName 根据全文本、书名检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
func StatsPageCountOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextName 根据全文本、书名检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
func StatsPriceOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextPageCount 根据全文本、页数检索books表并计算价格的统计信息
// allText string 全文本
// pageCount int64 页数
func StatsPriceOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextPrice 根据全文本、价格检索books表并计算页数的统计信息
// allText string 全文本
// price float64 价格
func StatsPageCountOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextSeq 根据全文本、编号检索books表并计算页数的统计信息
// allText string 全文本
// seq string 编号
func StatsPageCountOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextSeq 根据全文本、编号检索books表并计算价格的统计信息
// allText string 全文本
// seq string 编号
func StatsPriceOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass 根据作者、类别检索books表并计算页数的统计信息
// author string 作者
// class string 类别
func StatsPageCountOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass 根据作者、类别检索books表并计算价格的统计信息
// author string 作者
// class string 类别
func StatsPriceOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2 根据作者、子类别检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
func StatsPageCountOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2 根据作者、子类别检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
func StatsPriceOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorName 根据作者、书名检索books表并计算页数的统计信息
// author string 作者
// name string 书名
func StatsPageCountOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorName 根据作者、书名检索books表并计算价格的统计信息
// author string 作者
// name string 书名
func StatsPriceOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorPageCount 根据作者、页数检索books表并计算价格的统计信息
// author string 作者
// pageCount int64 页数
func StatsPriceOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorPrice 根据作者、价格检索books表并计算页数的统计信息
// author string 作者
// price float64 价格
func StatsPageCountOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并计算页数的统计信息
// author string 作者
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并计算价格的统计信息
// author string 作者
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorSeq 根据作者、编号检索books表并计算页数的统计信息
// author string 作者
// seq string 编号
func StatsPageCountOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorSeq 根据作者、编号检索books表并计算价格的统计信息
// author string 作者
// seq string 编号
func StatsPriceOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2 根据类别、子类别检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
func StatsPageCountOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2 根据类别、子类别检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
func StatsPriceOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassName 根据类别、书名检索books表并计算页数的统计信息
// class string 类别
// name string 书名
func StatsPageCountOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassName 根据类别、书名检索books表并计算价格的统计信息
// class string 类别
// name string 书名
func StatsPriceOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassPageCount 根据类别、页数检索books表并计算价格的统计信息
// class string 类别
// pageCount int64 页数
func StatsPriceOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassPrice 根据类别、价格检索books表并计算页数的统计信息
// class string 类别
// price float64 价格
func StatsPageCountOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassReleaseDate 根据类别、发布日期检索books表并计算页数的统计信息
// class string 类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassReleaseDate 根据类别、发布日期检索books表并计算价格的统计信息
// class string 类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassSeq 根据类别、编号检索books表并计算页数的统计信息
// class string 类别
// seq string 编号
func StatsPageCountOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassSeq 根据类别、编号检索books表并计算价格的统计信息
// class string 类别
// seq string 编号
func StatsPriceOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2Name 根据子类别、书名检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2Name 根据子类别、书名检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2PageCount 根据子类别、页数检索books表并计算价格的统计信息
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2Price 根据子类别、价格检索books表并计算页数的统计信息
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并计算页数的统计信息
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并计算价格的统计信息
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2Seq 根据子类别、编号检索books表并计算页数的统计信息
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2Seq 根据子类别、编号检索books表并计算价格的统计信息
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNamePageCount 根据书名、页数检索books表并计算价格的统计信息
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNamePrice 根据书名、价格检索books表并计算页数的统计信息
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNameReleaseDate 根据书名、发布日期检索books表并计算页数的统计信息
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNameReleaseDate 根据书名、发布日期检索books表并计算价格的统计信息
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNameSeq 根据书名、编号检索books表并计算页数的统计信息
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNameSeq 根据书名、编号检索books表并计算价格的统计信息
// name string 书名
// seq string 编号
func StatsPriceOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByPageCountReleaseDate 根据页数、发布日期检索books表并计算价格的统计信息
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByPageCountSeq 根据页数、编号检索books表并计算价格的统计信息
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByPriceReleaseDate 根据价格、发布日期检索books表并计算页数的统计信息
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByPriceSeq 根据价格、编号检索books表并计算页数的统计信息
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并计算页数的统计信息
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并计算价格的统计信息
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
func StatsPageCountOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
func StatsPriceOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
func StatsPageCountOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
func StatsPriceOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
func StatsPageCountOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
func StatsPriceOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// pageCount int64 页数
func StatsPriceOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// price float64 价格
func StatsPageCountOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
func StatsPageCountOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
func StatsPriceOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
func StatsPageCountOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
func StatsPriceOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// pageCount int64 页数
func StatsPriceOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// price float64 价格
func StatsPageCountOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// seq string 编号
func StatsPageCountOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// seq string 编号
func StatsPriceOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextPageCountReleaseDate 根据全文本、页数、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表并计算价格的统计信息
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextPriceReleaseDate 根据全文本、价格、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表并计算页数的统计信息
// allText string 全文本
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPageCountOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPriceOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassName 根据作者、类别、书名检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// name string 书名
func StatsPageCountOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassName 根据作者、类别、书名检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// name string 书名
func StatsPriceOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// pageCount int64 页数
func StatsPriceOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// price float64 价格
func StatsPageCountOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// seq string 编号
func StatsPageCountOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// seq string 编号
func StatsPriceOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorPageCountReleaseDate 根据作者、页数、发布日期检索books表并计算价格的统计信息
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表并计算价格的统计信息
// author string 作者
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorPriceReleaseDate 根据作者、价格、发布日期检索books表并计算页数的统计信息
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表并计算页数的统计信息
// author string 作者
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并计算页数的统计信息
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并计算价格的统计信息
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2Price 根据类别、子类别、价格检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNamePageCount 根据类别、书名、页数检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNamePrice 根据类别、书名、价格检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNameSeq 根据类别、书名、编号检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNameSeq 根据类别、书名、编号检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassPageCountReleaseDate 根据类别、页数、发布日期检索books表并计算价格的统计信息
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表并计算价格的统计信息
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassPriceReleaseDate 根据类别、价格、发布日期检索books表并计算页数的统计信息
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassPriceSeq 根据类别、价格、编号检索books表并计算页数的统计信息
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并计算页数的统计信息
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并计算价格的统计信息
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2PageCountReleaseDate 根据子类别、页数、发布日期检索books表并计算价格的统计信息
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表并计算价格的统计信息
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2PriceReleaseDate 根据子类别、价格、发布日期检索books表并计算页数的统计信息
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表并计算页数的统计信息
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并计算页数的统计信息
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并计算价格的统计信息
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNamePageCountReleaseDate 根据书名、页数、发布日期检索books表并计算价格的统计信息
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表并计算价格的统计信息
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNamePriceReleaseDate 根据书名、价格、发布日期检索books表并计算页数的统计信息
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNamePriceSeq 根据书名、价格、编号检索books表并计算页数的统计信息
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并计算页数的统计信息
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并计算价格的统计信息
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByPageCountReleaseDateSeq 根据页数、发布日期、编号检索books表并计算价格的统计信息
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByPriceReleaseDateSeq 根据价格、发布日期、编号检索books表并计算页数的统计信息
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPageCountOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPriceOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func StatsPageCountOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func StatsPriceOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func StatsPriceOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func StatsPageCountOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorPageCountReleaseDate 根据全文本、作者、页数、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextAuthorPageCountReleaseDate(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorPriceReleaseDate 根据全文本、作者、价格、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextAuthorPriceReleaseDate(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassPageCountReleaseDate 根据全文本、类别、页数、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClassPageCountReleaseDate(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassPriceReleaseDate 根据全文本、类别、价格、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClassPriceReleaseDate(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2PageCountReleaseDate 根据全文本、子类别、页数、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextClass2PageCountReleaseDate(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2PriceReleaseDate 根据全文本、子类别、价格、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextClass2PriceReleaseDate(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNamePageCountReleaseDate 根据全文本、书名、页数、发布日期检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAllTextNamePageCountReleaseDate(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNamePriceReleaseDate 根据全文本、书名、价格、发布日期检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAllTextNamePriceReleaseDate(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAllTextPageCountReleaseDateSeq 根据全文本、页数、发布日期、编号检索books表并计算价格的统计信息
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAllTextPageCountReleaseDateSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAllTextPriceReleaseDateSeq 根据全文本、价格、发布日期、编号检索books表并计算页数的统计信息
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAllTextPriceReleaseDateSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassPageCountReleaseDate 根据作者、类别、页数、发布日期检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassPriceReleaseDate 根据作者、类别、价格、发布日期检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并计算页数的统计信息
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并计算价格的统计信息
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2PageCountReleaseDate 根据作者、子类别、页数、发布日期检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorClass2PageCountReleaseDate(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2PriceReleaseDate 根据作者、子类别、价格、发布日期检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorClass2PriceReleaseDate(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并计算页数的统计信息
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并计算价格的统计信息
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNamePageCountReleaseDate 根据作者、书名、页数、发布日期检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNamePriceReleaseDate 根据作者、书名、价格、发布日期检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并计算页数的统计信息
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并计算价格的统计信息
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByAuthorPageCountReleaseDateSeq 根据作者、页数、发布日期、编号检索books表并计算价格的统计信息
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByAuthorPriceReleaseDateSeq 根据作者、价格、发布日期、编号检索books表并计算页数的统计信息
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2PageCountReleaseDate 根据类别、子类别、页数、发布日期检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassClass2PageCountReleaseDate(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2PriceReleaseDate 根据类别、子类别、价格、发布日期检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassClass2PriceReleaseDate(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并计算页数的统计信息
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并计算价格的统计信息
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNamePageCountReleaseDate 根据类别、书名、页数、发布日期检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNamePriceReleaseDate 根据类别、书名、价格、发布日期检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并计算页数的统计信息
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并计算价格的统计信息
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClassPageCountReleaseDateSeq 根据类别、页数、发布日期、编号检索books表并计算价格的统计信息
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClassPriceReleaseDateSeq 根据类别、价格、发布日期、编号检索books表并计算页数的统计信息
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NamePageCountReleaseDate 根据子类别、书名、页数、发布日期检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func StatsPriceOfBooksByClass2NamePageCountReleaseDate(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NamePriceReleaseDate 根据子类别、书名、价格、发布日期检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func StatsPageCountOfBooksByClass2NamePriceReleaseDate(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并计算页数的统计信息
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并计算价格的统计信息
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByClass2PageCountReleaseDateSeq 根据子类别、页数、发布日期、编号检索books表并计算价格的统计信息
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByClass2PageCountReleaseDateSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByClass2PriceReleaseDateSeq 根据子类别、价格、发布日期、编号检索books表并计算页数的统计信息
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByClass2PriceReleaseDateSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceOfBooksByNamePageCountReleaseDateSeq 根据书名、页数、发布日期、编号检索books表并计算价格的统计信息
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPriceOfBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountOfBooksByNamePriceReleaseDateSeq 根据书名、价格、发布日期、编号检索books表并计算页数的统计信息
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func StatsPageCountOfBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.StatsAgg("pageCount")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

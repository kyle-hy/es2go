// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// WeekHistOfQuarterBooksByReleaseDateGte 根据发布日期为近几个季度检索books表并统计每周的数量直方图分布
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByReleaseDateGte 根据发布日期为近几个季度检索books表并统计每月的数量直方图分布
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByReleaseDateGte 根据发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextReleaseDateGte 根据全文本、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextReleaseDateGte(es *elasticsearch.Client, allText string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorReleaseDateGte 根据作者、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorReleaseDateGte 根据作者、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorReleaseDateGte 根据作者、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorReleaseDateGte(es *elasticsearch.Client, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassReleaseDateGte 根据类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassReleaseDateGte 根据类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassReleaseDateGte 根据类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassReleaseDateGte(es *elasticsearch.Client, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2ReleaseDateGte 根据子类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2ReleaseDateGte(es *elasticsearch.Client, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNameReleaseDateGte 根据书名、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNameReleaseDateGte 根据书名、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNameReleaseDateGte 根据书名、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNameReleaseDateGte(es *elasticsearch.Client, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPriceGtReleaseDateGte 根据价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPriceLtReleaseDateGte 根据价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqReleaseDateGte 根据编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqReleaseDateGte 根据编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqReleaseDateGte 根据编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqReleaseDateGte(es *elasticsearch.Client, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextAuthorReleaseDateGte 根据全文本、作者、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextAuthorReleaseDateGte(es *elasticsearch.Client, allText, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextClassReleaseDateGte 根据全文本、类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextClassReleaseDateGte(es *elasticsearch.Client, allText, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextClass2ReleaseDateGte 根据全文本、子类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextClass2ReleaseDateGte(es *elasticsearch.Client, allText, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextNameReleaseDateGte 根据全文本、书名、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextNameReleaseDateGte(es *elasticsearch.Client, allText, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte 根据全文本、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPageCountGteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte 根据全文本、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPageCountGtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte 根据全文本、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPageCountLtReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte 根据全文本、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPageCountLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte 根据全文本、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPageCountGteLteReleaseDateGte(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPriceGteReleaseDateGte 根据全文本、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPriceGteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPriceGtReleaseDateGte 根据全文本、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPriceGtReleaseDateGte(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPriceLtReleaseDateGte 根据全文本、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPriceLtReleaseDateGte(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPriceLteReleaseDateGte 根据全文本、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPriceLteReleaseDateGte(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte 根据全文本、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextPriceGteLteReleaseDateGte(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAllTextSeqReleaseDateGte 根据全文本、编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// allText string 全文本
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAllTextSeqReleaseDateGte(es *elasticsearch.Client, allText, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorClassReleaseDateGte 根据作者、类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// class string 类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorClassReleaseDateGte(es *elasticsearch.Client, author, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorClass2ReleaseDateGte 根据作者、子类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorClass2ReleaseDateGte(es *elasticsearch.Client, author, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorNameReleaseDateGte 根据作者、书名、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorNameReleaseDateGte(es *elasticsearch.Client, author, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte 根据作者、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPageCountGteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte 根据作者、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPageCountGtReleaseDateGte(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte 根据作者、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPageCountLtReleaseDateGte(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte 根据作者、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPageCountLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte 根据作者、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPageCountGteLteReleaseDateGte(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPriceGteReleaseDateGte 根据作者、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPriceGteReleaseDateGte(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPriceGtReleaseDateGte 根据作者、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPriceGtReleaseDateGte(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPriceLtReleaseDateGte 根据作者、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPriceLtReleaseDateGte(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPriceLteReleaseDateGte 根据作者、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPriceLteReleaseDateGte(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte 根据作者、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorPriceGteLteReleaseDateGte(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByAuthorSeqReleaseDateGte 根据作者、编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// author string 作者
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByAuthorSeqReleaseDateGte(es *elasticsearch.Client, author, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassClass2ReleaseDateGte 根据类别、子类别、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassClass2ReleaseDateGte(es *elasticsearch.Client, class, class2 string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassNameReleaseDateGte 根据类别、书名、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassNameReleaseDateGte(es *elasticsearch.Client, class, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPageCountGteReleaseDateGte 根据类别、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPageCountGteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPageCountGtReleaseDateGte 根据类别、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPageCountGtReleaseDateGte(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPageCountLtReleaseDateGte 根据类别、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPageCountLtReleaseDateGte(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPageCountLteReleaseDateGte 根据类别、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPageCountLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte 根据类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPageCountGteLteReleaseDateGte(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPriceGteReleaseDateGte 根据类别、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPriceGteReleaseDateGte(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPriceGtReleaseDateGte 根据类别、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPriceGtReleaseDateGte(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPriceLtReleaseDateGte 根据类别、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPriceLtReleaseDateGte(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPriceLteReleaseDateGte 根据类别、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPriceLteReleaseDateGte(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassPriceGteLteReleaseDateGte 根据类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassPriceGteLteReleaseDateGte(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClassSeqReleaseDateGte 根据类别、编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class string 类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClassSeqReleaseDateGte(es *elasticsearch.Client, class, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2NameReleaseDateGte 根据子类别、书名、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2NameReleaseDateGte(es *elasticsearch.Client, class2, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PageCountGteReleaseDateGte 根据子类别、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PageCountGteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PageCountGtReleaseDateGte 根据子类别、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PageCountGtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PageCountLtReleaseDateGte 根据子类别、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PageCountLtReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PageCountLteReleaseDateGte 根据子类别、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PageCountLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte 根据子类别、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PageCountGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PriceGteReleaseDateGte 根据子类别、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PriceGteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PriceGtReleaseDateGte 根据子类别、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PriceGtReleaseDateGte(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PriceLtReleaseDateGte 根据子类别、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PriceLtReleaseDateGte(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PriceLteReleaseDateGte 根据子类别、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PriceLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte 根据子类别、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2PriceGteLteReleaseDateGte(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByClass2SeqReleaseDateGte 根据子类别、编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// class2 string 子类别
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByClass2SeqReleaseDateGte(es *elasticsearch.Client, class2, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePageCountGteReleaseDateGte 根据书名、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePageCountGteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePageCountGtReleaseDateGte 根据书名、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePageCountGtReleaseDateGte(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePageCountLtReleaseDateGte 根据书名、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePageCountLtReleaseDateGte(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePageCountLteReleaseDateGte 根据书名、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePageCountLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte 根据书名、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePageCountGteLteReleaseDateGte(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePriceGteReleaseDateGte 根据书名、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePriceGteReleaseDateGte(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePriceGtReleaseDateGte 根据书名、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePriceGtReleaseDateGte(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePriceLtReleaseDateGte 根据书名、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePriceLtReleaseDateGte(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePriceLteReleaseDateGte 根据书名、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePriceLteReleaseDateGte(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNamePriceGteLteReleaseDateGte 根据书名、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNamePriceGteLteReleaseDateGte(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByNameSeqReleaseDateGte 根据书名、编号、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// name string 书名
// seq string 编号
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByNameSeqReleaseDateGte(es *elasticsearch.Client, name, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte 根据页数大于等于、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte 根据页数大于等于、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte 根据页数大于等于、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte 根据页数大于等于、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte 根据页数大于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte 根据页数大于、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte 根据页数大于、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte 根据页数大于、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte 根据页数大于、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte 根据页数大于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte 根据页数小于、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte 根据页数小于、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte 根据页数小于、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte 根据页数小于、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte 根据页数小于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte 根据页数小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte 根据页数小于等于、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte 根据页数小于等于、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte 根据页数小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte 根据页数小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte 根据页数大于等于和小于等于、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte 根据页数大于等于和小于等于、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte 根据页数大于等于和小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte 根据页数大于等于、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte 根据页数大于等于、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte 根据页数大于等于、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte 根据页数大于等于、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte 根据页数大于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte 根据页数大于、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte 根据页数大于、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte 根据页数大于、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte 根据页数大于、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte 根据页数大于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte 根据页数小于、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte 根据页数小于、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte 根据页数小于、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte 根据页数小于、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte 根据页数小于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte 根据页数小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte 根据页数小于等于、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte 根据页数小于等于、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte 根据页数小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte 根据页数小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte 根据页数大于等于和小于等于、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte 根据页数大于等于和小于等于、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte 根据页数大于等于和小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte 根据页数大于等于、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte 根据页数大于等于、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte 根据页数大于等于、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte 根据页数大于等于、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte 根据页数大于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte 根据页数大于、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte 根据页数大于、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte 根据页数大于、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte 根据页数大于、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte 根据页数大于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGt int64 页数大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte 根据页数小于、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte 根据页数小于、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte 根据页数小于、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte 根据页数小于、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte 根据页数小于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLt int64 页数小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte 根据页数小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte 根据页数小于等于、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte 根据页数小于等于、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte 根据页数小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte 根据页数小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte 根据页数大于等于和小于等于、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte 根据页数大于等于和小于等于、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte 根据页数大于等于和小于等于、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte 根据页数大于等于和小于等于、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPageCountGteReleaseDateGte 根据编号、页数大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPageCountGteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPageCountGtReleaseDateGte 根据编号、页数大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPageCountGtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPageCountLtReleaseDateGte 根据编号、页数小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPageCountLtReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPageCountLteReleaseDateGte 根据编号、页数小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPageCountLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte 根据编号、页数大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPageCountGteLteReleaseDateGte(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// WeekHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每周的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func WeekHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MonthHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每月的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func MonthHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("month"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPriceGteReleaseDateGte 根据编号、价格大于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPriceGteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPriceGtReleaseDateGte 根据编号、价格大于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// priceGt float64 价格大于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPriceGtReleaseDateGte(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPriceLtReleaseDateGte 根据编号、价格小于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// priceLt float64 价格小于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPriceLtReleaseDateGte(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPriceLteReleaseDateGte 根据编号、价格小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPriceLteReleaseDateGte(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// QuarterHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte 根据编号、价格大于等于和小于等于、发布日期为近几个季度检索books表并统计每季度的数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int 发布日期为近几个季度
func QuarterHistOfQuarterBooksBySeqPriceGteLteReleaseDateGte(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("quarter"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

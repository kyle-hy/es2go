// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MatchBooksByAllTextTermsClass 根据全文本检索books表并分组统计类别的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClass(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsClass2 根据全文本检索books表并分组统计子类别的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClass2(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsSeq 根据全文本检索books表并分组统计编号的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsSeq(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsClassClass2 根据全文本检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClassClass2(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsClassSeq 根据全文本检索books表并同时统计类别、编号的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClassSeq(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsClass2Seq 根据全文本检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClass2Seq(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextTermsClassClass2Seq 根据全文本检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
func MatchBooksByAllTextTermsClassClass2Seq(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClass 根据作者检索books表并分组统计类别的分布情况
// author string 作者
func MatchBooksByAuthorTermsClass(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClass2 根据作者检索books表并分组统计子类别的分布情况
// author string 作者
func MatchBooksByAuthorTermsClass2(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsSeq 根据作者检索books表并分组统计编号的分布情况
// author string 作者
func MatchBooksByAuthorTermsSeq(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClassClass2 根据作者检索books表并同时统计类别、子类别的分布情况
// author string 作者
func MatchBooksByAuthorTermsClassClass2(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClassSeq 根据作者检索books表并同时统计类别、编号的分布情况
// author string 作者
func MatchBooksByAuthorTermsClassSeq(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClass2Seq 根据作者检索books表并同时统计子类别、编号的分布情况
// author string 作者
func MatchBooksByAuthorTermsClass2Seq(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorTermsClassClass2Seq 根据作者检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
func MatchBooksByAuthorTermsClassClass2Seq(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassTermsClass2 根据类别检索books表并分组统计子类别的分布情况
// class string 类别
func MatchBooksByClassTermsClass2(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassTermsSeq 根据类别检索books表并分组统计编号的分布情况
// class string 类别
func MatchBooksByClassTermsSeq(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassTermsClass2Seq 根据类别检索books表并同时统计子类别、编号的分布情况
// class string 类别
func MatchBooksByClassTermsClass2Seq(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2TermsClass 根据子类别检索books表并分组统计类别的分布情况
// class2 string 子类别
func MatchBooksByClass2TermsClass(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2TermsSeq 根据子类别检索books表并分组统计编号的分布情况
// class2 string 子类别
func MatchBooksByClass2TermsSeq(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2TermsClassSeq 根据子类别检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
func MatchBooksByClass2TermsClassSeq(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClass 根据书名检索books表并分组统计类别的分布情况
// name string 书名
func MatchBooksByNameTermsClass(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClass2 根据书名检索books表并分组统计子类别的分布情况
// name string 书名
func MatchBooksByNameTermsClass2(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsSeq 根据书名检索books表并分组统计编号的分布情况
// name string 书名
func MatchBooksByNameTermsSeq(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClassClass2 根据书名检索books表并同时统计类别、子类别的分布情况
// name string 书名
func MatchBooksByNameTermsClassClass2(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClassSeq 根据书名检索books表并同时统计类别、编号的分布情况
// name string 书名
func MatchBooksByNameTermsClassSeq(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClass2Seq 根据书名检索books表并同时统计子类别、编号的分布情况
// name string 书名
func MatchBooksByNameTermsClass2Seq(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameTermsClassClass2Seq 根据书名检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
func MatchBooksByNameTermsClassClass2Seq(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClass 根据页数检索books表并分组统计类别的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClass(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClass2 根据页数检索books表并分组统计子类别的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClass2(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsSeq 根据页数检索books表并分组统计编号的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsSeq(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClassClass2 根据页数检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClassClass2(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClassSeq 根据页数检索books表并同时统计类别、编号的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClassSeq(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClass2Seq 根据页数检索books表并同时统计子类别、编号的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClass2Seq(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountTermsClassClass2Seq 根据页数检索books表并同时统计类别、子类别、编号的分布情况
// pageCount int64 页数
func MatchBooksByPageCountTermsClassClass2Seq(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClass 根据价格检索books表并分组统计类别的分布情况
// price float64 价格
func MatchBooksByPriceTermsClass(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClass2 根据价格检索books表并分组统计子类别的分布情况
// price float64 价格
func MatchBooksByPriceTermsClass2(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsSeq 根据价格检索books表并分组统计编号的分布情况
// price float64 价格
func MatchBooksByPriceTermsSeq(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClassClass2 根据价格检索books表并同时统计类别、子类别的分布情况
// price float64 价格
func MatchBooksByPriceTermsClassClass2(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClassSeq 根据价格检索books表并同时统计类别、编号的分布情况
// price float64 价格
func MatchBooksByPriceTermsClassSeq(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClass2Seq 根据价格检索books表并同时统计子类别、编号的分布情况
// price float64 价格
func MatchBooksByPriceTermsClass2Seq(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceTermsClassClass2Seq 根据价格检索books表并同时统计类别、子类别、编号的分布情况
// price float64 价格
func MatchBooksByPriceTermsClassClass2Seq(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClass 根据发布日期检索books表并分组统计类别的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClass(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClass2 根据发布日期检索books表并分组统计子类别的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClass2(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsSeq 根据发布日期检索books表并分组统计编号的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsSeq(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClassClass2 根据发布日期检索books表并同时统计类别、子类别的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClassClass2(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClassSeq 根据发布日期检索books表并同时统计类别、编号的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClassSeq(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClass2Seq 根据发布日期检索books表并同时统计子类别、编号的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClass2Seq(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateTermsClassClass2Seq 根据发布日期检索books表并同时统计类别、子类别、编号的分布情况
// releaseDate time.Time 发布日期
func MatchBooksByReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqTermsClass 根据编号检索books表并分组统计类别的分布情况
// seq string 编号
func MatchBooksBySeqTermsClass(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqTermsClass2 根据编号检索books表并分组统计子类别的分布情况
// seq string 编号
func MatchBooksBySeqTermsClass2(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksBySeqTermsClassClass2 根据编号检索books表并同时统计类别、子类别的分布情况
// seq string 编号
func MatchBooksBySeqTermsClassClass2(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClass 根据全文本、作者检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClass(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClass2 根据全文本、作者检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClass2(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsSeq 根据全文本、作者检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsSeq(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClassClass2 根据全文本、作者检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClassClass2(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClassSeq 根据全文本、作者检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClassSeq(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClass2Seq 根据全文本、作者检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClass2Seq(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorTermsClassClass2Seq 根据全文本、作者检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
func MatchBooksByAllTextAuthorTermsClassClass2Seq(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassTermsClass2 根据全文本、类别检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
func MatchBooksByAllTextClassTermsClass2(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassTermsSeq 根据全文本、类别检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
func MatchBooksByAllTextClassTermsSeq(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassTermsClass2Seq 根据全文本、类别检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
func MatchBooksByAllTextClassTermsClass2Seq(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2TermsClass 根据全文本、子类别检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
func MatchBooksByAllTextClass2TermsClass(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2TermsSeq 根据全文本、子类别检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
func MatchBooksByAllTextClass2TermsSeq(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2TermsClassSeq 根据全文本、子类别检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
func MatchBooksByAllTextClass2TermsClassSeq(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClass 根据全文本、书名检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClass(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClass2 根据全文本、书名检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClass2(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsSeq 根据全文本、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsSeq(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClassClass2 根据全文本、书名检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClassClass2(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClassSeq 根据全文本、书名检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClassSeq(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClass2Seq 根据全文本、书名检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClass2Seq(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameTermsClassClass2Seq 根据全文本、书名检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
func MatchBooksByAllTextNameTermsClassClass2Seq(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClass 根据全文本、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClass(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClass2 根据全文本、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClass2(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsSeq 根据全文本、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsSeq(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClassClass2 根据全文本、页数检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClassSeq 根据全文本、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClassSeq(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClass2Seq 根据全文本、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClass2Seq(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountTermsClassClass2Seq 根据全文本、页数检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
func MatchBooksByAllTextPageCountTermsClassClass2Seq(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClass 根据全文本、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClass(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClass2 根据全文本、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClass2(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsSeq 根据全文本、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsSeq(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClassClass2 根据全文本、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClassClass2(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClassSeq 根据全文本、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClassSeq(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClass2Seq 根据全文本、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClass2Seq(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceTermsClassClass2Seq 根据全文本、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// price float64 价格
func MatchBooksByAllTextPriceTermsClassClass2Seq(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClass 根据全文本、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClass(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClass2 根据全文本、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClass2(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsSeq 根据全文本、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsSeq(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClassClass2 根据全文本、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClassClass2(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClassSeq 根据全文本、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClassSeq(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClass2Seq 根据全文本、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateTermsClassClass2Seq 根据全文本、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
func MatchBooksByAllTextReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqTermsClass 根据全文本、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
func MatchBooksByAllTextSeqTermsClass(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqTermsClass2 根据全文本、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
func MatchBooksByAllTextSeqTermsClass2(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextSeqTermsClassClass2 根据全文本、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// seq string 编号
func MatchBooksByAllTextSeqTermsClassClass2(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassTermsClass2 根据作者、类别检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
func MatchBooksByAuthorClassTermsClass2(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassTermsSeq 根据作者、类别检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
func MatchBooksByAuthorClassTermsSeq(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassTermsClass2Seq 根据作者、类别检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
func MatchBooksByAuthorClassTermsClass2Seq(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2TermsClass 根据作者、子类别检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
func MatchBooksByAuthorClass2TermsClass(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2TermsSeq 根据作者、子类别检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
func MatchBooksByAuthorClass2TermsSeq(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2TermsClassSeq 根据作者、子类别检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
func MatchBooksByAuthorClass2TermsClassSeq(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClass 根据作者、书名检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClass(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClass2 根据作者、书名检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClass2(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsSeq 根据作者、书名检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsSeq(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClassClass2 根据作者、书名检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClassClass2(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClassSeq 根据作者、书名检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClassSeq(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClass2Seq 根据作者、书名检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClass2Seq(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameTermsClassClass2Seq 根据作者、书名检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
func MatchBooksByAuthorNameTermsClassClass2Seq(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClass 根据作者、页数检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClass(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClass2 根据作者、页数检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClass2(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsSeq 根据作者、页数检索books表并分组统计编号的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsSeq(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClassClass2 根据作者、页数检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClassSeq 根据作者、页数检索books表并同时统计类别、编号的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClassSeq(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClass2Seq 根据作者、页数检索books表并同时统计子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClass2Seq(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountTermsClassClass2Seq 根据作者、页数检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
func MatchBooksByAuthorPageCountTermsClassClass2Seq(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClass 根据作者、价格检索books表并分组统计类别的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClass(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClass2 根据作者、价格检索books表并分组统计子类别的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClass2(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsSeq 根据作者、价格检索books表并分组统计编号的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsSeq(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClassClass2 根据作者、价格检索books表并同时统计类别、子类别的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClassClass2(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClassSeq 根据作者、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClassSeq(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClass2Seq 根据作者、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClass2Seq(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceTermsClassClass2Seq 根据作者、价格检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// price float64 价格
func MatchBooksByAuthorPriceTermsClassClass2Seq(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClass 根据作者、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClass(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClass2 根据作者、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClass2(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsSeq 根据作者、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsSeq(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClassClass2 根据作者、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClassClass2(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClassSeq 根据作者、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClassSeq(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClass2Seq 根据作者、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClass2Seq(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateTermsClassClass2Seq 根据作者、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAuthorReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqTermsClass 根据作者、编号检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
func MatchBooksByAuthorSeqTermsClass(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqTermsClass2 根据作者、编号检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
func MatchBooksByAuthorSeqTermsClass2(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorSeqTermsClassClass2 根据作者、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// seq string 编号
func MatchBooksByAuthorSeqTermsClassClass2(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2TermsSeq 根据类别、子类别检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
func MatchBooksByClassClass2TermsSeq(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameTermsClass2 根据类别、书名检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
func MatchBooksByClassNameTermsClass2(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameTermsSeq 根据类别、书名检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
func MatchBooksByClassNameTermsSeq(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameTermsClass2Seq 根据类别、书名检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
func MatchBooksByClassNameTermsClass2Seq(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountTermsClass2 根据类别、页数检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
func MatchBooksByClassPageCountTermsClass2(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountTermsSeq 根据类别、页数检索books表并分组统计编号的分布情况
// class string 类别
// pageCount int64 页数
func MatchBooksByClassPageCountTermsSeq(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountTermsClass2Seq 根据类别、页数检索books表并同时统计子类别、编号的分布情况
// class string 类别
// pageCount int64 页数
func MatchBooksByClassPageCountTermsClass2Seq(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceTermsClass2 根据类别、价格检索books表并分组统计子类别的分布情况
// class string 类别
// price float64 价格
func MatchBooksByClassPriceTermsClass2(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceTermsSeq 根据类别、价格检索books表并分组统计编号的分布情况
// class string 类别
// price float64 价格
func MatchBooksByClassPriceTermsSeq(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceTermsClass2Seq 根据类别、价格检索books表并同时统计子类别、编号的分布情况
// class string 类别
// price float64 价格
func MatchBooksByClassPriceTermsClass2Seq(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateTermsClass2 根据类别、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByClassReleaseDateTermsClass2(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateTermsSeq 根据类别、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByClassReleaseDateTermsSeq(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateTermsClass2Seq 根据类别、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByClassReleaseDateTermsClass2Seq(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassSeqTermsClass2 根据类别、编号检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
func MatchBooksByClassSeqTermsClass2(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameTermsClass 根据子类别、书名检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
func MatchBooksByClass2NameTermsClass(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameTermsSeq 根据子类别、书名检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
func MatchBooksByClass2NameTermsSeq(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameTermsClassSeq 根据子类别、书名检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
func MatchBooksByClass2NameTermsClassSeq(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountTermsClass 根据子类别、页数检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClass2PageCountTermsClass(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountTermsSeq 根据子类别、页数检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClass2PageCountTermsSeq(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountTermsClassSeq 根据子类别、页数检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClass2PageCountTermsClassSeq(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceTermsClass 根据子类别、价格检索books表并分组统计类别的分布情况
// class2 string 子类别
// price float64 价格
func MatchBooksByClass2PriceTermsClass(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceTermsSeq 根据子类别、价格检索books表并分组统计编号的分布情况
// class2 string 子类别
// price float64 价格
func MatchBooksByClass2PriceTermsSeq(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceTermsClassSeq 根据子类别、价格检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// price float64 价格
func MatchBooksByClass2PriceTermsClassSeq(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateTermsClass 根据子类别、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClass2ReleaseDateTermsClass(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateTermsSeq 根据子类别、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClass2ReleaseDateTermsSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateTermsClassSeq 根据子类别、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClass2ReleaseDateTermsClassSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2SeqTermsClass 根据子类别、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
func MatchBooksByClass2SeqTermsClass(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClass 根据书名、页数检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClass(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClass2 根据书名、页数检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClass2(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsSeq 根据书名、页数检索books表并分组统计编号的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsSeq(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClassClass2 根据书名、页数检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClassSeq 根据书名、页数检索books表并同时统计类别、编号的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClassSeq(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClass2Seq 根据书名、页数检索books表并同时统计子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClass2Seq(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountTermsClassClass2Seq 根据书名、页数检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
func MatchBooksByNamePageCountTermsClassClass2Seq(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClass 根据书名、价格检索books表并分组统计类别的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClass(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClass2 根据书名、价格检索books表并分组统计子类别的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClass2(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsSeq 根据书名、价格检索books表并分组统计编号的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsSeq(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClassClass2 根据书名、价格检索books表并同时统计类别、子类别的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClassClass2(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClassSeq 根据书名、价格检索books表并同时统计类别、编号的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClassSeq(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClass2Seq 根据书名、价格检索books表并同时统计子类别、编号的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClass2Seq(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceTermsClassClass2Seq 根据书名、价格检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// price float64 价格
func MatchBooksByNamePriceTermsClassClass2Seq(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClass 根据书名、发布日期检索books表并分组统计类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClass(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClass2 根据书名、发布日期检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClass2(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsSeq 根据书名、发布日期检索books表并分组统计编号的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsSeq(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClassClass2 根据书名、发布日期检索books表并同时统计类别、子类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClassClass2(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClassSeq 根据书名、发布日期检索books表并同时统计类别、编号的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClassSeq(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClass2Seq 根据书名、发布日期检索books表并同时统计子类别、编号的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateTermsClassClass2Seq 根据书名、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByNameReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqTermsClass 根据书名、编号检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
func MatchBooksByNameSeqTermsClass(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqTermsClass2 根据书名、编号检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
func MatchBooksByNameSeqTermsClass2(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameSeqTermsClassClass2 根据书名、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// seq string 编号
func MatchBooksByNameSeqTermsClassClass2(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClass 根据页数、价格检索books表并分组统计类别的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClass(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClass2 根据页数、价格检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClass2(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsSeq 根据页数、价格检索books表并分组统计编号的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsSeq(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClassClass2 根据页数、价格检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClassClass2(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClassSeq 根据页数、价格检索books表并同时统计类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClassSeq(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClass2Seq 根据页数、价格检索books表并同时统计子类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClass2Seq(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceTermsClassClass2Seq 根据页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
func MatchBooksByPageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClass 根据页数、发布日期检索books表并分组统计类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClass(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClass2 根据页数、发布日期检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClass2(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsSeq 根据页数、发布日期检索books表并分组统计编号的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClassClass2 根据页数、发布日期检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClassSeq 根据页数、发布日期检索books表并同时统计类别、编号的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClass2Seq 根据页数、发布日期检索books表并同时统计子类别、编号的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateTermsClassClass2Seq 根据页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByPageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeqTermsClass 根据页数、编号检索books表并分组统计类别的分布情况
// pageCount int64 页数
// seq string 编号
func MatchBooksByPageCountSeqTermsClass(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeqTermsClass2 根据页数、编号检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// seq string 编号
func MatchBooksByPageCountSeqTermsClass2(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountSeqTermsClassClass2 根据页数、编号检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// seq string 编号
func MatchBooksByPageCountSeqTermsClassClass2(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClass 根据价格、发布日期检索books表并分组统计类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClass(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClass2 根据价格、发布日期检索books表并分组统计子类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClass2(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsSeq 根据价格、发布日期检索books表并分组统计编号的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsSeq(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClassClass2 根据价格、发布日期检索books表并同时统计类别、子类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClassSeq 根据价格、发布日期检索books表并同时统计类别、编号的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClass2Seq 根据价格、发布日期检索books表并同时统计子类别、编号的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateTermsClassClass2Seq 根据价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeqTermsClass 根据价格、编号检索books表并分组统计类别的分布情况
// price float64 价格
// seq string 编号
func MatchBooksByPriceSeqTermsClass(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeqTermsClass2 根据价格、编号检索books表并分组统计子类别的分布情况
// price float64 价格
// seq string 编号
func MatchBooksByPriceSeqTermsClass2(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceSeqTermsClassClass2 根据价格、编号检索books表并同时统计类别、子类别的分布情况
// price float64 价格
// seq string 编号
func MatchBooksByPriceSeqTermsClassClass2(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqTermsClass 根据发布日期、编号检索books表并分组统计类别的分布情况
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByReleaseDateSeqTermsClass(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqTermsClass2 根据发布日期、编号检索books表并分组统计子类别的分布情况
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByReleaseDateSeqTermsClass2(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByReleaseDateSeqTermsClassClass2 根据发布日期、编号检索books表并同时统计类别、子类别的分布情况
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassTermsClass2 根据全文本、作者、类别检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
func MatchBooksByAllTextAuthorClassTermsClass2(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassTermsSeq 根据全文本、作者、类别检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
func MatchBooksByAllTextAuthorClassTermsSeq(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassTermsClass2Seq 根据全文本、作者、类别检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
func MatchBooksByAllTextAuthorClassTermsClass2Seq(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2TermsClass 根据全文本、作者、子类别检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
func MatchBooksByAllTextAuthorClass2TermsClass(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2TermsSeq 根据全文本、作者、子类别检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
func MatchBooksByAllTextAuthorClass2TermsSeq(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2TermsClassSeq 根据全文本、作者、子类别检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
func MatchBooksByAllTextAuthorClass2TermsClassSeq(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClass 根据全文本、作者、书名检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClass(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClass2 根据全文本、作者、书名检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClass2(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsSeq 根据全文本、作者、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsSeq(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClassClass2 根据全文本、作者、书名检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClassClass2(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClassSeq 根据全文本、作者、书名检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClassSeq(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClass2Seq 根据全文本、作者、书名检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClass2Seq(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameTermsClassClass2Seq 根据全文本、作者、书名检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
func MatchBooksByAllTextAuthorNameTermsClassClass2Seq(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClass 根据全文本、作者、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClass(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClass2 根据全文本、作者、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClass2(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsSeq 根据全文本、作者、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsSeq(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClassClass2 根据全文本、作者、页数检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClassClass2(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClassSeq 根据全文本、作者、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClassSeq(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClass2Seq 根据全文本、作者、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountTermsClassClass2Seq 根据全文本、作者、页数检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MatchBooksByAllTextAuthorPageCountTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClass 根据全文本、作者、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClass(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClass2 根据全文本、作者、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClass2(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsSeq 根据全文本、作者、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsSeq(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClassClass2 根据全文本、作者、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClassClass2(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClassSeq 根据全文本、作者、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClassSeq(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClass2Seq 根据全文本、作者、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClass2Seq(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceTermsClassClass2Seq 根据全文本、作者、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
func MatchBooksByAllTextAuthorPriceTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClass 根据全文本、作者、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClass(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClass2 根据全文本、作者、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClass2(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsSeq 根据全文本、作者、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClassClass2 根据全文本、作者、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClassSeq 根据全文本、作者、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClass2Seq 根据全文本、作者、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateTermsClassClass2Seq 根据全文本、作者、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqTermsClass 根据全文本、作者、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// seq string 编号
func MatchBooksByAllTextAuthorSeqTermsClass(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqTermsClass2 根据全文本、作者、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// seq string 编号
func MatchBooksByAllTextAuthorSeqTermsClass2(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorSeqTermsClassClass2 根据全文本、作者、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// seq string 编号
func MatchBooksByAllTextAuthorSeqTermsClassClass2(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2TermsSeq 根据全文本、类别、子类别检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// class2 string 子类别
func MatchBooksByAllTextClassClass2TermsSeq(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameTermsClass2 根据全文本、类别、书名检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// name string 书名
func MatchBooksByAllTextClassNameTermsClass2(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameTermsSeq 根据全文本、类别、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
func MatchBooksByAllTextClassNameTermsSeq(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameTermsClass2Seq 根据全文本、类别、书名检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
func MatchBooksByAllTextClassNameTermsClass2Seq(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountTermsClass2 根据全文本、类别、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextClassPageCountTermsClass2(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountTermsSeq 根据全文本、类别、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextClassPageCountTermsSeq(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountTermsClass2Seq 根据全文本、类别、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextClassPageCountTermsClass2Seq(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceTermsClass2 根据全文本、类别、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
func MatchBooksByAllTextClassPriceTermsClass2(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceTermsSeq 根据全文本、类别、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
func MatchBooksByAllTextClassPriceTermsSeq(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceTermsClass2Seq 根据全文本、类别、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
func MatchBooksByAllTextClassPriceTermsClass2Seq(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateTermsClass2 根据全文本、类别、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassReleaseDateTermsClass2(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateTermsSeq 根据全文本、类别、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassReleaseDateTermsSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateTermsClass2Seq 根据全文本、类别、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassSeqTermsClass2 根据全文本、类别、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// seq string 编号
func MatchBooksByAllTextClassSeqTermsClass2(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameTermsClass 根据全文本、子类别、书名检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClass2NameTermsClass(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameTermsSeq 根据全文本、子类别、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClass2NameTermsSeq(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameTermsClassSeq 根据全文本、子类别、书名检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClass2NameTermsClassSeq(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountTermsClass 根据全文本、子类别、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClass2PageCountTermsClass(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountTermsSeq 根据全文本、子类别、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClass2PageCountTermsSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountTermsClassSeq 根据全文本、子类别、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClass2PageCountTermsClassSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceTermsClass 根据全文本、子类别、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClass2PriceTermsClass(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceTermsSeq 根据全文本、子类别、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClass2PriceTermsSeq(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceTermsClassSeq 根据全文本、子类别、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClass2PriceTermsClassSeq(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateTermsClass 根据全文本、子类别、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2ReleaseDateTermsClass(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateTermsSeq 根据全文本、子类别、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2ReleaseDateTermsSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateTermsClassSeq 根据全文本、子类别、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2ReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2SeqTermsClass 根据全文本、子类别、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// seq string 编号
func MatchBooksByAllTextClass2SeqTermsClass(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClass 根据全文本、书名、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClass(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClass2 根据全文本、书名、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClass2(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsSeq 根据全文本、书名、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsSeq(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClassClass2 根据全文本、书名、页数检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClassClass2(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClassSeq 根据全文本、书名、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClassSeq(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClass2Seq 根据全文本、书名、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountTermsClassClass2Seq 根据全文本、书名、页数检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextNamePageCountTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClass 根据全文本、书名、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClass(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClass2 根据全文本、书名、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClass2(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsSeq 根据全文本、书名、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsSeq(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClassClass2 根据全文本、书名、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClassClass2(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClassSeq 根据全文本、书名、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClassSeq(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClass2Seq 根据全文本、书名、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClass2Seq(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceTermsClassClass2Seq 根据全文本、书名、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
func MatchBooksByAllTextNamePriceTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClass 根据全文本、书名、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClass(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClass2 根据全文本、书名、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClass2(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsSeq 根据全文本、书名、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClassClass2 根据全文本、书名、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClassSeq 根据全文本、书名、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClass2Seq 根据全文本、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateTermsClassClass2Seq 根据全文本、书名、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNameReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqTermsClass 根据全文本、书名、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// seq string 编号
func MatchBooksByAllTextNameSeqTermsClass(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqTermsClass2 根据全文本、书名、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// seq string 编号
func MatchBooksByAllTextNameSeqTermsClass2(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameSeqTermsClassClass2 根据全文本、书名、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// seq string 编号
func MatchBooksByAllTextNameSeqTermsClassClass2(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClass 根据全文本、页数、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClass(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClass2 根据全文本、页数、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsSeq 根据全文本、页数、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClassClass2 根据全文本、页数、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClassSeq 根据全文本、页数、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClassSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClass2Seq 根据全文本、页数、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceTermsClassClass2Seq 根据全文本、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextPageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClass 根据全文本、页数、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClass(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClass2 根据全文本、页数、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsSeq 根据全文本、页数、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClassClass2 根据全文本、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClassSeq 根据全文本、页数、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClass2Seq 根据全文本、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateTermsClassClass2Seq 根据全文本、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeqTermsClass 根据全文本、页数、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextPageCountSeqTermsClass(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeqTermsClass2 根据全文本、页数、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextPageCountSeqTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountSeqTermsClassClass2 根据全文本、页数、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextPageCountSeqTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClass 根据全文本、价格、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClass(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClass2 根据全文本、价格、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClass2(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsSeq 根据全文本、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClassClass2 根据全文本、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClassSeq 根据全文本、价格、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClass2Seq 根据全文本、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateTermsClassClass2Seq 根据全文本、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeqTermsClass 根据全文本、价格、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPriceSeqTermsClass(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeqTermsClass2 根据全文本、价格、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPriceSeqTermsClass2(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceSeqTermsClassClass2 根据全文本、价格、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPriceSeqTermsClassClass2(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqTermsClass 根据全文本、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextReleaseDateSeqTermsClass(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqTermsClass2 根据全文本、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextReleaseDateSeqTermsClassClass2 根据全文本、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2TermsSeq 根据作者、类别、子类别检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// class2 string 子类别
func MatchBooksByAuthorClassClass2TermsSeq(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameTermsClass2 根据作者、类别、书名检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAuthorClassNameTermsClass2(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameTermsSeq 根据作者、类别、书名检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAuthorClassNameTermsSeq(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameTermsClass2Seq 根据作者、类别、书名检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAuthorClassNameTermsClass2Seq(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountTermsClass2 根据作者、类别、页数检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAuthorClassPageCountTermsClass2(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountTermsSeq 根据作者、类别、页数检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAuthorClassPageCountTermsSeq(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountTermsClass2Seq 根据作者、类别、页数检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAuthorClassPageCountTermsClass2Seq(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceTermsClass2 根据作者、类别、价格检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAuthorClassPriceTermsClass2(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceTermsSeq 根据作者、类别、价格检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAuthorClassPriceTermsSeq(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceTermsClass2Seq 根据作者、类别、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAuthorClassPriceTermsClass2Seq(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateTermsClass2 根据作者、类别、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassReleaseDateTermsClass2(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateTermsSeq 根据作者、类别、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassReleaseDateTermsSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateTermsClass2Seq 根据作者、类别、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassSeqTermsClass2 根据作者、类别、编号检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// seq string 编号
func MatchBooksByAuthorClassSeqTermsClass2(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameTermsClass 根据作者、子类别、书名检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClass2NameTermsClass(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameTermsSeq 根据作者、子类别、书名检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClass2NameTermsSeq(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameTermsClassSeq 根据作者、子类别、书名检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClass2NameTermsClassSeq(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountTermsClass 根据作者、子类别、页数检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClass2PageCountTermsClass(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountTermsSeq 根据作者、子类别、页数检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClass2PageCountTermsSeq(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountTermsClassSeq 根据作者、子类别、页数检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClass2PageCountTermsClassSeq(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceTermsClass 根据作者、子类别、价格检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClass2PriceTermsClass(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceTermsSeq 根据作者、子类别、价格检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClass2PriceTermsSeq(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceTermsClassSeq 根据作者、子类别、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClass2PriceTermsClassSeq(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateTermsClass 根据作者、子类别、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2ReleaseDateTermsClass(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateTermsSeq 根据作者、子类别、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2ReleaseDateTermsSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateTermsClassSeq 根据作者、子类别、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2ReleaseDateTermsClassSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2SeqTermsClass 根据作者、子类别、编号检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// seq string 编号
func MatchBooksByAuthorClass2SeqTermsClass(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClass 根据作者、书名、页数检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClass(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClass2 根据作者、书名、页数检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClass2(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsSeq 根据作者、书名、页数检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsSeq(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClassClass2 根据作者、书名、页数检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClassClass2(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClassSeq 根据作者、书名、页数检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClassSeq(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClass2Seq 根据作者、书名、页数检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountTermsClassClass2Seq 根据作者、书名、页数检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorNamePageCountTermsClassClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClass 根据作者、书名、价格检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClass(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClass2 根据作者、书名、价格检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClass2(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsSeq 根据作者、书名、价格检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsSeq(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClassClass2 根据作者、书名、价格检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClassClass2(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClassSeq 根据作者、书名、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClassSeq(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClass2Seq 根据作者、书名、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClass2Seq(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceTermsClassClass2Seq 根据作者、书名、价格检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAuthorNamePriceTermsClassClass2Seq(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClass 根据作者、书名、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClass(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClass2 根据作者、书名、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClass2(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsSeq 根据作者、书名、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClassClass2 根据作者、书名、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClassClass2(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClassSeq 根据作者、书名、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClassSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClass2Seq 根据作者、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateTermsClassClass2Seq 根据作者、书名、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNameReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqTermsClass 根据作者、书名、编号检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAuthorNameSeqTermsClass(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqTermsClass2 根据作者、书名、编号检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAuthorNameSeqTermsClass2(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameSeqTermsClassClass2 根据作者、书名、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAuthorNameSeqTermsClassClass2(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClass 根据作者、页数、价格检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClass(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClass2 根据作者、页数、价格检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClass2(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsSeq 根据作者、页数、价格检索books表并分组统计编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsSeq(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClassClass2 根据作者、页数、价格检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClassSeq 根据作者、页数、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClassSeq(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClass2Seq 根据作者、页数、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClass2Seq(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceTermsClassClass2Seq 根据作者、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorPageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClass 根据作者、页数、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClass(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClass2 根据作者、页数、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClass2(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsSeq 根据作者、页数、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClassClass2 根据作者、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClassSeq 根据作者、页数、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClass2Seq 根据作者、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateTermsClassClass2Seq 根据作者、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeqTermsClass 根据作者、页数、编号检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorPageCountSeqTermsClass(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeqTermsClass2 根据作者、页数、编号检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorPageCountSeqTermsClass2(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountSeqTermsClassClass2 根据作者、页数、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorPageCountSeqTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClass 根据作者、价格、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClass(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClass2 根据作者、价格、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClass2(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsSeq 根据作者、价格、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClassClass2 根据作者、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClassSeq 根据作者、价格、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClass2Seq 根据作者、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateTermsClassClass2Seq 根据作者、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeqTermsClass 根据作者、价格、编号检索books表并分组统计类别的分布情况
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPriceSeqTermsClass(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeqTermsClass2 根据作者、价格、编号检索books表并分组统计子类别的分布情况
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPriceSeqTermsClass2(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceSeqTermsClassClass2 根据作者、价格、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPriceSeqTermsClassClass2(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqTermsClass 根据作者、发布日期、编号检索books表并分组统计类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorReleaseDateSeqTermsClass(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqTermsClass2 根据作者、发布日期、编号检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorReleaseDateSeqTermsClass2(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorReleaseDateSeqTermsClassClass2 根据作者、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameTermsSeq 根据类别、子类别、书名检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByClassClass2NameTermsSeq(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountTermsSeq 根据类别、子类别、页数检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByClassClass2PageCountTermsSeq(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceTermsSeq 根据类别、子类别、价格检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByClassClass2PriceTermsSeq(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2ReleaseDateTermsSeq 根据类别、子类别、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2ReleaseDateTermsSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountTermsClass2 根据类别、书名、页数检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassNamePageCountTermsClass2(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountTermsSeq 根据类别、书名、页数检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassNamePageCountTermsSeq(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountTermsClass2Seq 根据类别、书名、页数检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassNamePageCountTermsClass2Seq(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceTermsClass2 根据类别、书名、价格检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByClassNamePriceTermsClass2(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceTermsSeq 根据类别、书名、价格检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByClassNamePriceTermsSeq(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceTermsClass2Seq 根据类别、书名、价格检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByClassNamePriceTermsClass2Seq(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateTermsClass2 根据类别、书名、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassNameReleaseDateTermsClass2(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateTermsSeq 根据类别、书名、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassNameReleaseDateTermsSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateTermsClass2Seq 根据类别、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameSeqTermsClass2 根据类别、书名、编号检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByClassNameSeqTermsClass2(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceTermsClass2 根据类别、页数、价格检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassPageCountPriceTermsClass2(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceTermsSeq 根据类别、页数、价格检索books表并分组统计编号的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassPageCountPriceTermsSeq(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceTermsClass2Seq 根据类别、页数、价格检索books表并同时统计子类别、编号的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassPageCountPriceTermsClass2Seq(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateTermsClass2 根据类别、页数、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountReleaseDateTermsClass2(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateTermsSeq 根据类别、页数、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountReleaseDateTermsSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateTermsClass2Seq 根据类别、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountSeqTermsClass2 根据类别、页数、编号检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByClassPageCountSeqTermsClass2(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateTermsClass2 根据类别、价格、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPriceReleaseDateTermsClass2(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateTermsSeq 根据类别、价格、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPriceReleaseDateTermsSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateTermsClass2Seq 根据类别、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceSeqTermsClass2 根据类别、价格、编号检索books表并分组统计子类别的分布情况
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByClassPriceSeqTermsClass2(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassReleaseDateSeqTermsClass2 根据类别、发布日期、编号检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassReleaseDateSeqTermsClass2(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountTermsClass 根据子类别、书名、页数检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClass2NamePageCountTermsClass(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountTermsSeq 根据子类别、书名、页数检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClass2NamePageCountTermsSeq(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountTermsClassSeq 根据子类别、书名、页数检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClass2NamePageCountTermsClassSeq(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceTermsClass 根据子类别、书名、价格检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClass2NamePriceTermsClass(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceTermsSeq 根据子类别、书名、价格检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClass2NamePriceTermsSeq(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceTermsClassSeq 根据子类别、书名、价格检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClass2NamePriceTermsClassSeq(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateTermsClass 根据子类别、书名、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClass2NameReleaseDateTermsClass(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateTermsSeq 根据子类别、书名、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClass2NameReleaseDateTermsSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateTermsClassSeq 根据子类别、书名、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClass2NameReleaseDateTermsClassSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameSeqTermsClass 根据子类别、书名、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByClass2NameSeqTermsClass(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceTermsClass 根据子类别、页数、价格检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2PageCountPriceTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceTermsSeq 根据子类别、页数、价格检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2PageCountPriceTermsSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceTermsClassSeq 根据子类别、页数、价格检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2PageCountPriceTermsClassSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateTermsClass 根据子类别、页数、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountReleaseDateTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateTermsSeq 根据子类别、页数、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountReleaseDateTermsSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateTermsClassSeq 根据子类别、页数、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountSeqTermsClass 根据子类别、页数、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByClass2PageCountSeqTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateTermsClass 根据子类别、价格、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PriceReleaseDateTermsClass(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateTermsSeq 根据子类别、价格、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PriceReleaseDateTermsSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateTermsClassSeq 根据子类别、价格、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PriceReleaseDateTermsClassSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceSeqTermsClass 根据子类别、价格、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByClass2PriceSeqTermsClass(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2ReleaseDateSeqTermsClass 根据子类别、发布日期、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2ReleaseDateSeqTermsClass(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClass 根据书名、页数、价格检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClass(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClass2 根据书名、页数、价格检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClass2(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsSeq 根据书名、页数、价格检索books表并分组统计编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsSeq(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClassClass2 根据书名、页数、价格检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClassSeq 根据书名、页数、价格检索books表并同时统计类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClassSeq(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClass2Seq 根据书名、页数、价格检索books表并同时统计子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClass2Seq(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceTermsClassClass2Seq 根据书名、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByNamePageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClass 根据书名、页数、发布日期检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClass(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClass2 根据书名、页数、发布日期检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClass2(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsSeq 根据书名、页数、发布日期检索books表并分组统计编号的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClassClass2 根据书名、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClassSeq 根据书名、页数、发布日期检索books表并同时统计类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClass2Seq 根据书名、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateTermsClassClass2Seq 根据书名、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeqTermsClass 根据书名、页数、编号检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByNamePageCountSeqTermsClass(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeqTermsClass2 根据书名、页数、编号检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByNamePageCountSeqTermsClass2(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountSeqTermsClassClass2 根据书名、页数、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByNamePageCountSeqTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClass 根据书名、价格、发布日期检索books表并分组统计类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClass(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClass2 根据书名、价格、发布日期检索books表并分组统计子类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClass2(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsSeq 根据书名、价格、发布日期检索books表并分组统计编号的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClassClass2 根据书名、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClassClass2(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClassSeq 根据书名、价格、发布日期检索books表并同时统计类别、编号的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClassSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClass2Seq 根据书名、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateTermsClassClass2Seq 根据书名、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeqTermsClass 根据书名、价格、编号检索books表并分组统计类别的分布情况
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByNamePriceSeqTermsClass(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeqTermsClass2 根据书名、价格、编号检索books表并分组统计子类别的分布情况
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByNamePriceSeqTermsClass2(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceSeqTermsClassClass2 根据书名、价格、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByNamePriceSeqTermsClassClass2(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqTermsClass 根据书名、发布日期、编号检索books表并分组统计类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNameReleaseDateSeqTermsClass(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqTermsClass2 根据书名、发布日期、编号检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNameReleaseDateSeqTermsClass2(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameReleaseDateSeqTermsClassClass2 根据书名、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNameReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClass 根据页数、价格、发布日期检索books表并分组统计类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClass(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClass2 根据页数、价格、发布日期检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClass2(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsSeq 根据页数、价格、发布日期检索books表并分组统计编号的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClassClass2 根据页数、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClassSeq 根据页数、价格、发布日期检索books表并同时统计类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClass2Seq 根据页数、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateTermsClassClass2Seq 根据页数、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByPageCountPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceSeqTermsClass 根据页数、价格、编号检索books表并分组统计类别的分布情况
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByPageCountPriceSeqTermsClass(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceSeqTermsClass2 根据页数、价格、编号检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByPageCountPriceSeqTermsClass2(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceSeqTermsClassClass2 根据页数、价格、编号检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByPageCountPriceSeqTermsClassClass2(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeqTermsClass 根据页数、发布日期、编号检索books表并分组统计类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountReleaseDateSeqTermsClass(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeqTermsClass2 根据页数、发布日期、编号检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountReleaseDateSeqTermsClass2(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountReleaseDateSeqTermsClassClass2 根据页数、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeqTermsClass 根据价格、发布日期、编号检索books表并分组统计类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPriceReleaseDateSeqTermsClass(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeqTermsClass2 根据价格、发布日期、编号检索books表并分组统计子类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPriceReleaseDateSeqTermsClassClass2 根据价格、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPriceReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassClass2TermsSeq 根据全文本、作者、类别、子类别检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func MatchBooksByAllTextAuthorClassClass2TermsSeq(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassNameTermsClass2 根据全文本、作者、类别、书名检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAllTextAuthorClassNameTermsClass2(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassNameTermsSeq 根据全文本、作者、类别、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAllTextAuthorClassNameTermsSeq(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassNameTermsClass2Seq 根据全文本、作者、类别、书名检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MatchBooksByAllTextAuthorClassNameTermsClass2Seq(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPageCountTermsClass2 根据全文本、作者、类别、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClassPageCountTermsClass2(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPageCountTermsSeq 根据全文本、作者、类别、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClassPageCountTermsSeq(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPageCountTermsClass2Seq 根据全文本、作者、类别、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClassPageCountTermsClass2Seq(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPriceTermsClass2 根据全文本、作者、类别、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAllTextAuthorClassPriceTermsClass2(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPriceTermsSeq 根据全文本、作者、类别、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAllTextAuthorClassPriceTermsSeq(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassPriceTermsClass2Seq 根据全文本、作者、类别、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func MatchBooksByAllTextAuthorClassPriceTermsClass2Seq(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassReleaseDateTermsClass2 根据全文本、作者、类别、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClassReleaseDateTermsClass2(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassReleaseDateTermsSeq 根据全文本、作者、类别、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClassReleaseDateTermsSeq(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassReleaseDateTermsClass2Seq 根据全文本、作者、类别、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClassReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClassSeqTermsClass2 根据全文本、作者、类别、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func MatchBooksByAllTextAuthorClassSeqTermsClass2(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2NameTermsClass 根据全文本、作者、子类别、书名检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextAuthorClass2NameTermsClass(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2NameTermsSeq 根据全文本、作者、子类别、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextAuthorClass2NameTermsSeq(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2NameTermsClassSeq 根据全文本、作者、子类别、书名检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextAuthorClass2NameTermsClassSeq(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PageCountTermsClass 根据全文本、作者、子类别、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClass2PageCountTermsClass(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PageCountTermsSeq 根据全文本、作者、子类别、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClass2PageCountTermsSeq(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PageCountTermsClassSeq 根据全文本、作者、子类别、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextAuthorClass2PageCountTermsClassSeq(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PriceTermsClass 根据全文本、作者、子类别、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextAuthorClass2PriceTermsClass(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PriceTermsSeq 根据全文本、作者、子类别、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextAuthorClass2PriceTermsSeq(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2PriceTermsClassSeq 根据全文本、作者、子类别、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextAuthorClass2PriceTermsClassSeq(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2ReleaseDateTermsClass 根据全文本、作者、子类别、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClass2ReleaseDateTermsClass(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2ReleaseDateTermsSeq 根据全文本、作者、子类别、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClass2ReleaseDateTermsSeq(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2ReleaseDateTermsClassSeq 根据全文本、作者、子类别、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorClass2ReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorClass2SeqTermsClass 根据全文本、作者、子类别、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func MatchBooksByAllTextAuthorClass2SeqTermsClass(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClass 根据全文本、作者、书名、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClass(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClass2 根据全文本、作者、书名、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClass2(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsSeq 根据全文本、作者、书名、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsSeq(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClassClass2 根据全文本、作者、书名、页数检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClassClass2(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClassSeq 根据全文本、作者、书名、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClassSeq(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClass2Seq 根据全文本、作者、书名、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClass2Seq(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePageCountTermsClassClass2Seq 根据全文本、作者、书名、页数检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextAuthorNamePageCountTermsClassClass2Seq(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClass 根据全文本、作者、书名、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClass(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClass2 根据全文本、作者、书名、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClass2(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsSeq 根据全文本、作者、书名、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsSeq(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClassClass2 根据全文本、作者、书名、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClassClass2(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClassSeq 根据全文本、作者、书名、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClassSeq(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClass2Seq 根据全文本、作者、书名、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClass2Seq(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNamePriceTermsClassClass2Seq 根据全文本、作者、书名、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MatchBooksByAllTextAuthorNamePriceTermsClassClass2Seq(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClass 根据全文本、作者、书名、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClass(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClass2 根据全文本、作者、书名、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClass2(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsSeq 根据全文本、作者、书名、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsSeq(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClassClass2 根据全文本、作者、书名、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClassSeq 根据全文本、作者、书名、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClass2Seq 根据全文本、作者、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameReleaseDateTermsClassClass2Seq 根据全文本、作者、书名、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorNameReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameSeqTermsClass 根据全文本、作者、书名、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAllTextAuthorNameSeqTermsClass(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameSeqTermsClass2 根据全文本、作者、书名、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAllTextAuthorNameSeqTermsClass2(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorNameSeqTermsClassClass2 根据全文本、作者、书名、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MatchBooksByAllTextAuthorNameSeqTermsClassClass2(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClass 根据全文本、作者、页数、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClass(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClass2 根据全文本、作者、页数、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClass2(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsSeq 根据全文本、作者、页数、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsSeq(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClassClass2 根据全文本、作者、页数、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClassClass2(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClassSeq 根据全文本、作者、页数、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClassSeq(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClass2Seq 根据全文本、作者、页数、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountPriceTermsClassClass2Seq 根据全文本、作者、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextAuthorPageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass 根据全文本、作者、页数、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass2 根据全文本、作者、页数、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass2(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsSeq 根据全文本、作者、页数、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsSeq(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassClass2 根据全文本、作者、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassSeq 根据全文本、作者、页数、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass2Seq 根据全文本、作者、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassClass2Seq 根据全文本、作者、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountSeqTermsClass 根据全文本、作者、页数、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextAuthorPageCountSeqTermsClass(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountSeqTermsClass2 根据全文本、作者、页数、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextAuthorPageCountSeqTermsClass2(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPageCountSeqTermsClassClass2 根据全文本、作者、页数、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextAuthorPageCountSeqTermsClassClass2(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClass 根据全文本、作者、价格、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClass(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClass2 根据全文本、作者、价格、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClass2(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsSeq 根据全文本、作者、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsSeq(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClassClass2 根据全文本、作者、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClassSeq 根据全文本、作者、价格、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClass2Seq 根据全文本、作者、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceReleaseDateTermsClassClass2Seq 根据全文本、作者、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextAuthorPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceSeqTermsClass 根据全文本、作者、价格、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAllTextAuthorPriceSeqTermsClass(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceSeqTermsClass2 根据全文本、作者、价格、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAllTextAuthorPriceSeqTermsClass2(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorPriceSeqTermsClassClass2 根据全文本、作者、价格、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func MatchBooksByAllTextAuthorPriceSeqTermsClassClass2(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateSeqTermsClass 根据全文本、作者、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextAuthorReleaseDateSeqTermsClass(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateSeqTermsClass2 根据全文本、作者、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextAuthorReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextAuthorReleaseDateSeqTermsClassClass2 根据全文本、作者、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextAuthorReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2NameTermsSeq 根据全文本、类别、子类别、书名检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByAllTextClassClass2NameTermsSeq(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2PageCountTermsSeq 根据全文本、类别、子类别、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAllTextClassClass2PageCountTermsSeq(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2PriceTermsSeq 根据全文本、类别、子类别、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByAllTextClassClass2PriceTermsSeq(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassClass2ReleaseDateTermsSeq 根据全文本、类别、子类别、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassClass2ReleaseDateTermsSeq(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePageCountTermsClass2 根据全文本、类别、书名、页数检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClassNamePageCountTermsClass2(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePageCountTermsSeq 根据全文本、类别、书名、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClassNamePageCountTermsSeq(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePageCountTermsClass2Seq 根据全文本、类别、书名、页数检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClassNamePageCountTermsClass2Seq(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePriceTermsClass2 根据全文本、类别、书名、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClassNamePriceTermsClass2(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePriceTermsSeq 根据全文本、类别、书名、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClassNamePriceTermsSeq(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNamePriceTermsClass2Seq 根据全文本、类别、书名、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClassNamePriceTermsClass2Seq(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameReleaseDateTermsClass2 根据全文本、类别、书名、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassNameReleaseDateTermsClass2(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameReleaseDateTermsSeq 根据全文本、类别、书名、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassNameReleaseDateTermsSeq(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameReleaseDateTermsClass2Seq 根据全文本、类别、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassNameSeqTermsClass2 根据全文本、类别、书名、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByAllTextClassNameSeqTermsClass2(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountPriceTermsClass2 根据全文本、类别、页数、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClassPageCountPriceTermsClass2(es *elasticsearch.Client, allText, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountPriceTermsSeq 根据全文本、类别、页数、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClassPageCountPriceTermsSeq(es *elasticsearch.Client, allText, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountPriceTermsClass2Seq 根据全文本、类别、页数、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClassPageCountPriceTermsClass2Seq(es *elasticsearch.Client, allText, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountReleaseDateTermsClass2 根据全文本、类别、页数、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPageCountReleaseDateTermsClass2(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountReleaseDateTermsSeq 根据全文本、类别、页数、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPageCountReleaseDateTermsSeq(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountReleaseDateTermsClass2Seq 根据全文本、类别、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPageCountSeqTermsClass2 根据全文本、类别、页数、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextClassPageCountSeqTermsClass2(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceReleaseDateTermsClass2 根据全文本、类别、价格、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPriceReleaseDateTermsClass2(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceReleaseDateTermsSeq 根据全文本、类别、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPriceReleaseDateTermsSeq(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceReleaseDateTermsClass2Seq 根据全文本、类别、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClassPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassPriceSeqTermsClass2 根据全文本、类别、价格、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByAllTextClassPriceSeqTermsClass2(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClassReleaseDateSeqTermsClass2 根据全文本、类别、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextClassReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePageCountTermsClass 根据全文本、子类别、书名、页数检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClass2NamePageCountTermsClass(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePageCountTermsSeq 根据全文本、子类别、书名、页数检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClass2NamePageCountTermsSeq(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePageCountTermsClassSeq 根据全文本、子类别、书名、页数检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAllTextClass2NamePageCountTermsClassSeq(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePriceTermsClass 根据全文本、子类别、书名、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClass2NamePriceTermsClass(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePriceTermsSeq 根据全文本、子类别、书名、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClass2NamePriceTermsSeq(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NamePriceTermsClassSeq 根据全文本、子类别、书名、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAllTextClass2NamePriceTermsClassSeq(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameReleaseDateTermsClass 根据全文本、子类别、书名、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2NameReleaseDateTermsClass(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameReleaseDateTermsSeq 根据全文本、子类别、书名、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2NameReleaseDateTermsSeq(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameReleaseDateTermsClassSeq 根据全文本、子类别、书名、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2NameReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2NameSeqTermsClass 根据全文本、子类别、书名、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByAllTextClass2NameSeqTermsClass(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountPriceTermsClass 根据全文本、子类别、页数、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClass2PageCountPriceTermsClass(es *elasticsearch.Client, allText, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountPriceTermsSeq 根据全文本、子类别、页数、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClass2PageCountPriceTermsSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountPriceTermsClassSeq 根据全文本、子类别、页数、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextClass2PageCountPriceTermsClassSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountReleaseDateTermsClass 根据全文本、子类别、页数、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PageCountReleaseDateTermsClass(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountReleaseDateTermsSeq 根据全文本、子类别、页数、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PageCountReleaseDateTermsSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountReleaseDateTermsClassSeq 根据全文本、子类别、页数、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PageCountSeqTermsClass 根据全文本、子类别、页数、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextClass2PageCountSeqTermsClass(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceReleaseDateTermsClass 根据全文本、子类别、价格、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PriceReleaseDateTermsClass(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceReleaseDateTermsSeq 根据全文本、子类别、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PriceReleaseDateTermsSeq(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceReleaseDateTermsClassSeq 根据全文本、子类别、价格、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextClass2PriceReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2PriceSeqTermsClass 根据全文本、子类别、价格、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByAllTextClass2PriceSeqTermsClass(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextClass2ReleaseDateSeqTermsClass 根据全文本、子类别、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextClass2ReleaseDateSeqTermsClass(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClass 根据全文本、书名、页数、价格检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClass(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClass2 根据全文本、书名、页数、价格检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClass2(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsSeq 根据全文本、书名、页数、价格检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsSeq(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClassClass2 根据全文本、书名、页数、价格检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClassClass2(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClassSeq 根据全文本、书名、页数、价格检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClassSeq(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClass2Seq 根据全文本、书名、页数、价格检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountPriceTermsClassClass2Seq 根据全文本、书名、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAllTextNamePageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClass 根据全文本、书名、页数、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClass(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClass2 根据全文本、书名、页数、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClass2(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsSeq 根据全文本、书名、页数、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsSeq(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClassClass2 根据全文本、书名、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClassSeq 根据全文本、书名、页数、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClass2Seq 根据全文本、书名、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountReleaseDateTermsClassClass2Seq 根据全文本、书名、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountSeqTermsClass 根据全文本、书名、页数、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextNamePageCountSeqTermsClass(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountSeqTermsClass2 根据全文本、书名、页数、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextNamePageCountSeqTermsClass2(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePageCountSeqTermsClassClass2 根据全文本、书名、页数、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAllTextNamePageCountSeqTermsClassClass2(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClass 根据全文本、书名、价格、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClass(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClass2 根据全文本、书名、价格、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClass2(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsSeq 根据全文本、书名、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsSeq(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClassClass2 根据全文本、书名、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClassClass2(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClassSeq 根据全文本、书名、价格、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClassSeq(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClass2Seq 根据全文本、书名、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceReleaseDateTermsClassClass2Seq 根据全文本、书名、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextNamePriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceSeqTermsClass 根据全文本、书名、价格、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAllTextNamePriceSeqTermsClass(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceSeqTermsClass2 根据全文本、书名、价格、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAllTextNamePriceSeqTermsClass2(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNamePriceSeqTermsClassClass2 根据全文本、书名、价格、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAllTextNamePriceSeqTermsClassClass2(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateSeqTermsClass 根据全文本、书名、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextNameReleaseDateSeqTermsClass(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateSeqTermsClass2 根据全文本、书名、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextNameReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextNameReleaseDateSeqTermsClassClass2 根据全文本、书名、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextNameReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClass 根据全文本、页数、价格、发布日期检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClass(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClass2 根据全文本、页数、价格、发布日期检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsSeq 根据全文本、页数、价格、发布日期检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClassClass2 根据全文本、页数、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClassSeq 根据全文本、页数、价格、发布日期检索books表并同时统计类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClass2Seq 根据全文本、页数、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceReleaseDateTermsClassClass2Seq 根据全文本、页数、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAllTextPageCountPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, allText string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceSeqTermsClass 根据全文本、页数、价格、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPageCountPriceSeqTermsClass(es *elasticsearch.Client, allText string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceSeqTermsClass2 根据全文本、页数、价格、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPageCountPriceSeqTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountPriceSeqTermsClassClass2 根据全文本、页数、价格、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAllTextPageCountPriceSeqTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateSeqTermsClass 根据全文本、页数、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPageCountReleaseDateSeqTermsClass(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateSeqTermsClass2 根据全文本、页数、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPageCountReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPageCountReleaseDateSeqTermsClassClass2 根据全文本、页数、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPageCountReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateSeqTermsClass 根据全文本、价格、发布日期、编号检索books表并分组统计类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPriceReleaseDateSeqTermsClass(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateSeqTermsClass2 根据全文本、价格、发布日期、编号检索books表并分组统计子类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAllTextPriceReleaseDateSeqTermsClassClass2 根据全文本、价格、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAllTextPriceReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2NameTermsSeq 根据作者、类别、子类别、书名检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func MatchBooksByAuthorClassClass2NameTermsSeq(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2PageCountTermsSeq 根据作者、类别、子类别、页数检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MatchBooksByAuthorClassClass2PageCountTermsSeq(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2PriceTermsSeq 根据作者、类别、子类别、价格检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func MatchBooksByAuthorClassClass2PriceTermsSeq(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassClass2ReleaseDateTermsSeq 根据作者、类别、子类别、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassClass2ReleaseDateTermsSeq(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePageCountTermsClass2 根据作者、类别、书名、页数检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClassNamePageCountTermsClass2(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePageCountTermsSeq 根据作者、类别、书名、页数检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClassNamePageCountTermsSeq(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePageCountTermsClass2Seq 根据作者、类别、书名、页数检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClassNamePageCountTermsClass2Seq(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePriceTermsClass2 根据作者、类别、书名、价格检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClassNamePriceTermsClass2(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePriceTermsSeq 根据作者、类别、书名、价格检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClassNamePriceTermsSeq(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNamePriceTermsClass2Seq 根据作者、类别、书名、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClassNamePriceTermsClass2Seq(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameReleaseDateTermsClass2 根据作者、类别、书名、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassNameReleaseDateTermsClass2(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameReleaseDateTermsSeq 根据作者、类别、书名、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassNameReleaseDateTermsSeq(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameReleaseDateTermsClass2Seq 根据作者、类别、书名、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassNameReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassNameSeqTermsClass2 根据作者、类别、书名、编号检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func MatchBooksByAuthorClassNameSeqTermsClass2(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountPriceTermsClass2 根据作者、类别、页数、价格检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClassPageCountPriceTermsClass2(es *elasticsearch.Client, author, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountPriceTermsSeq 根据作者、类别、页数、价格检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClassPageCountPriceTermsSeq(es *elasticsearch.Client, author, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountPriceTermsClass2Seq 根据作者、类别、页数、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClassPageCountPriceTermsClass2Seq(es *elasticsearch.Client, author, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountReleaseDateTermsClass2 根据作者、类别、页数、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPageCountReleaseDateTermsClass2(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountReleaseDateTermsSeq 根据作者、类别、页数、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPageCountReleaseDateTermsSeq(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountReleaseDateTermsClass2Seq 根据作者、类别、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPageCountSeqTermsClass2 根据作者、类别、页数、编号检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorClassPageCountSeqTermsClass2(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceReleaseDateTermsClass2 根据作者、类别、价格、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPriceReleaseDateTermsClass2(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceReleaseDateTermsSeq 根据作者、类别、价格、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPriceReleaseDateTermsSeq(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceReleaseDateTermsClass2Seq 根据作者、类别、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClassPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassPriceSeqTermsClass2 根据作者、类别、价格、编号检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func MatchBooksByAuthorClassPriceSeqTermsClass2(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClassReleaseDateSeqTermsClass2 根据作者、类别、发布日期、编号检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorClassReleaseDateSeqTermsClass2(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePageCountTermsClass 根据作者、子类别、书名、页数检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClass2NamePageCountTermsClass(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePageCountTermsSeq 根据作者、子类别、书名、页数检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClass2NamePageCountTermsSeq(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePageCountTermsClassSeq 根据作者、子类别、书名、页数检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByAuthorClass2NamePageCountTermsClassSeq(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePriceTermsClass 根据作者、子类别、书名、价格检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClass2NamePriceTermsClass(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePriceTermsSeq 根据作者、子类别、书名、价格检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClass2NamePriceTermsSeq(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NamePriceTermsClassSeq 根据作者、子类别、书名、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByAuthorClass2NamePriceTermsClassSeq(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameReleaseDateTermsClass 根据作者、子类别、书名、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2NameReleaseDateTermsClass(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameReleaseDateTermsSeq 根据作者、子类别、书名、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2NameReleaseDateTermsSeq(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameReleaseDateTermsClassSeq 根据作者、子类别、书名、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2NameReleaseDateTermsClassSeq(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2NameSeqTermsClass 根据作者、子类别、书名、编号检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func MatchBooksByAuthorClass2NameSeqTermsClass(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountPriceTermsClass 根据作者、子类别、页数、价格检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClass2PageCountPriceTermsClass(es *elasticsearch.Client, author, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountPriceTermsSeq 根据作者、子类别、页数、价格检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClass2PageCountPriceTermsSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountPriceTermsClassSeq 根据作者、子类别、页数、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorClass2PageCountPriceTermsClassSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountReleaseDateTermsClass 根据作者、子类别、页数、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PageCountReleaseDateTermsClass(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountReleaseDateTermsSeq 根据作者、子类别、页数、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PageCountReleaseDateTermsSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountReleaseDateTermsClassSeq 根据作者、子类别、页数、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PageCountSeqTermsClass 根据作者、子类别、页数、编号检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorClass2PageCountSeqTermsClass(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceReleaseDateTermsClass 根据作者、子类别、价格、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PriceReleaseDateTermsClass(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceReleaseDateTermsSeq 根据作者、子类别、价格、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PriceReleaseDateTermsSeq(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceReleaseDateTermsClassSeq 根据作者、子类别、价格、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorClass2PriceReleaseDateTermsClassSeq(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2PriceSeqTermsClass 根据作者、子类别、价格、编号检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func MatchBooksByAuthorClass2PriceSeqTermsClass(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorClass2ReleaseDateSeqTermsClass 根据作者、子类别、发布日期、编号检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorClass2ReleaseDateSeqTermsClass(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClass 根据作者、书名、页数、价格检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClass(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClass2 根据作者、书名、页数、价格检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClass2(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsSeq 根据作者、书名、页数、价格检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsSeq(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClassClass2 根据作者、书名、页数、价格检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClassClass2(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClassSeq 根据作者、书名、页数、价格检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClassSeq(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClass2Seq 根据作者、书名、页数、价格检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountPriceTermsClassClass2Seq 根据作者、书名、页数、价格检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByAuthorNamePageCountPriceTermsClassClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClass 根据作者、书名、页数、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClass(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClass2 根据作者、书名、页数、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClass2(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsSeq 根据作者、书名、页数、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsSeq(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClassClass2 根据作者、书名、页数、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClassClass2(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClassSeq 根据作者、书名、页数、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClass2Seq 根据作者、书名、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountReleaseDateTermsClassClass2Seq 根据作者、书名、页数、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePageCountReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountSeqTermsClass 根据作者、书名、页数、编号检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorNamePageCountSeqTermsClass(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountSeqTermsClass2 根据作者、书名、页数、编号检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorNamePageCountSeqTermsClass2(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePageCountSeqTermsClassClass2 根据作者、书名、页数、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByAuthorNamePageCountSeqTermsClassClass2(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClass 根据作者、书名、价格、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClass(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClass2 根据作者、书名、价格、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClass2(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsSeq 根据作者、书名、价格、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsSeq(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClassClass2 根据作者、书名、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClassClass2(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClassSeq 根据作者、书名、价格、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClassSeq(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClass2Seq 根据作者、书名、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceReleaseDateTermsClassClass2Seq 根据作者、书名、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorNamePriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceSeqTermsClass 根据作者、书名、价格、编号检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAuthorNamePriceSeqTermsClass(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceSeqTermsClass2 根据作者、书名、价格、编号检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAuthorNamePriceSeqTermsClass2(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNamePriceSeqTermsClassClass2 根据作者、书名、价格、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByAuthorNamePriceSeqTermsClassClass2(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateSeqTermsClass 根据作者、书名、发布日期、编号检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorNameReleaseDateSeqTermsClass(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateSeqTermsClass2 根据作者、书名、发布日期、编号检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorNameReleaseDateSeqTermsClass2(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorNameReleaseDateSeqTermsClassClass2 根据作者、书名、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorNameReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClass 根据作者、页数、价格、发布日期检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClass(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClass2 根据作者、页数、价格、发布日期检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClass2(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsSeq 根据作者、页数、价格、发布日期检索books表并分组统计编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClassClass2 根据作者、页数、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClassSeq 根据作者、页数、价格、发布日期检索books表并同时统计类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClass2Seq 根据作者、页数、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceReleaseDateTermsClassClass2Seq 根据作者、页数、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByAuthorPageCountPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, author string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceSeqTermsClass 根据作者、页数、价格、编号检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPageCountPriceSeqTermsClass(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceSeqTermsClass2 根据作者、页数、价格、编号检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPageCountPriceSeqTermsClass2(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountPriceSeqTermsClassClass2 根据作者、页数、价格、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByAuthorPageCountPriceSeqTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateSeqTermsClass 根据作者、页数、发布日期、编号检索books表并分组统计类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPageCountReleaseDateSeqTermsClass(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateSeqTermsClass2 根据作者、页数、发布日期、编号检索books表并分组统计子类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPageCountReleaseDateSeqTermsClass2(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPageCountReleaseDateSeqTermsClassClass2 根据作者、页数、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPageCountReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateSeqTermsClass 根据作者、价格、发布日期、编号检索books表并分组统计类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPriceReleaseDateSeqTermsClass(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateSeqTermsClass2 根据作者、价格、发布日期、编号检索books表并分组统计子类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorPriceReleaseDateSeqTermsClassClass2 根据作者、价格、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByAuthorPriceReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NamePageCountTermsSeq 根据类别、子类别、书名、页数检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MatchBooksByClassClass2NamePageCountTermsSeq(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NamePriceTermsSeq 根据类别、子类别、书名、价格检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func MatchBooksByClassClass2NamePriceTermsSeq(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2NameReleaseDateTermsSeq 根据类别、子类别、书名、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2NameReleaseDateTermsSeq(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountPriceTermsSeq 根据类别、子类别、页数、价格检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassClass2PageCountPriceTermsSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PageCountReleaseDateTermsSeq 根据类别、子类别、页数、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2PageCountReleaseDateTermsSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassClass2PriceReleaseDateTermsSeq 根据类别、子类别、价格、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassClass2PriceReleaseDateTermsSeq(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountPriceTermsClass2 根据类别、书名、页数、价格检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassNamePageCountPriceTermsClass2(es *elasticsearch.Client, class, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountPriceTermsSeq 根据类别、书名、页数、价格检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassNamePageCountPriceTermsSeq(es *elasticsearch.Client, class, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountPriceTermsClass2Seq 根据类别、书名、页数、价格检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClassNamePageCountPriceTermsClass2Seq(es *elasticsearch.Client, class, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountReleaseDateTermsClass2 根据类别、书名、页数、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePageCountReleaseDateTermsClass2(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountReleaseDateTermsSeq 根据类别、书名、页数、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePageCountReleaseDateTermsSeq(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountReleaseDateTermsClass2Seq 根据类别、书名、页数、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePageCountReleaseDateTermsClass2Seq(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePageCountSeqTermsClass2 根据类别、书名、页数、编号检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByClassNamePageCountSeqTermsClass2(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceReleaseDateTermsClass2 根据类别、书名、价格、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePriceReleaseDateTermsClass2(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceReleaseDateTermsSeq 根据类别、书名、价格、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePriceReleaseDateTermsSeq(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceReleaseDateTermsClass2Seq 根据类别、书名、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassNamePriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNamePriceSeqTermsClass2 根据类别、书名、价格、编号检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByClassNamePriceSeqTermsClass2(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassNameReleaseDateSeqTermsClass2 根据类别、书名、发布日期、编号检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassNameReleaseDateSeqTermsClass2(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceReleaseDateTermsClass2 根据类别、页数、价格、发布日期检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountPriceReleaseDateTermsClass2(es *elasticsearch.Client, class string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceReleaseDateTermsSeq 根据类别、页数、价格、发布日期检索books表并分组统计编号的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, class string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceReleaseDateTermsClass2Seq 根据类别、页数、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClassPageCountPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, class string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountPriceSeqTermsClass2 根据类别、页数、价格、编号检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByClassPageCountPriceSeqTermsClass2(es *elasticsearch.Client, class string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPageCountReleaseDateSeqTermsClass2 根据类别、页数、发布日期、编号检索books表并分组统计子类别的分布情况
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassPageCountReleaseDateSeqTermsClass2(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClassPriceReleaseDateSeqTermsClass2 根据类别、价格、发布日期、编号检索books表并分组统计子类别的分布情况
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClassPriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountPriceTermsClass 根据子类别、书名、页数、价格检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2NamePageCountPriceTermsClass(es *elasticsearch.Client, class2, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountPriceTermsSeq 根据子类别、书名、页数、价格检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2NamePageCountPriceTermsSeq(es *elasticsearch.Client, class2, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountPriceTermsClassSeq 根据子类别、书名、页数、价格检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func MatchBooksByClass2NamePageCountPriceTermsClassSeq(es *elasticsearch.Client, class2, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountReleaseDateTermsClass 根据子类别、书名、页数、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePageCountReleaseDateTermsClass(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountReleaseDateTermsSeq 根据子类别、书名、页数、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePageCountReleaseDateTermsSeq(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountReleaseDateTermsClassSeq 根据子类别、书名、页数、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePageCountReleaseDateTermsClassSeq(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePageCountSeqTermsClass 根据子类别、书名、页数、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MatchBooksByClass2NamePageCountSeqTermsClass(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceReleaseDateTermsClass 根据子类别、书名、价格、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePriceReleaseDateTermsClass(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceReleaseDateTermsSeq 根据子类别、书名、价格、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePriceReleaseDateTermsSeq(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceReleaseDateTermsClassSeq 根据子类别、书名、价格、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2NamePriceReleaseDateTermsClassSeq(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NamePriceSeqTermsClass 根据子类别、书名、价格、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func MatchBooksByClass2NamePriceSeqTermsClass(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2NameReleaseDateSeqTermsClass 根据子类别、书名、发布日期、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2NameReleaseDateSeqTermsClass(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceReleaseDateTermsClass 根据子类别、页数、价格、发布日期检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountPriceReleaseDateTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceReleaseDateTermsSeq 根据子类别、页数、价格、发布日期检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceReleaseDateTermsClassSeq 根据子类别、页数、价格、发布日期检索books表并同时统计类别、编号的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByClass2PageCountPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountPriceSeqTermsClass 根据子类别、页数、价格、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByClass2PageCountPriceSeqTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PageCountReleaseDateSeqTermsClass 根据子类别、页数、发布日期、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2PageCountReleaseDateSeqTermsClass(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByClass2PriceReleaseDateSeqTermsClass 根据子类别、价格、发布日期、编号检索books表并分组统计类别的分布情况
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByClass2PriceReleaseDateSeqTermsClass(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClass 根据书名、页数、价格、发布日期检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClass(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClass2 根据书名、页数、价格、发布日期检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClass2(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsSeq 根据书名、页数、价格、发布日期检索books表并分组统计编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsSeq(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClassClass2 根据书名、页数、价格、发布日期检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClassSeq 根据书名、页数、价格、发布日期检索books表并同时统计类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClassSeq(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClass2Seq 根据书名、页数、价格、发布日期检索books表并同时统计子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClass2Seq(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class2").With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceReleaseDateTermsClassClass2Seq 根据书名、页数、价格、发布日期检索books表并同时统计类别、子类别、编号的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
func MatchBooksByNamePageCountPriceReleaseDateTermsClassClass2Seq(es *elasticsearch.Client, name string, pageCount int64, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2")).With(eq.TermsAgg("seq"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceSeqTermsClass 根据书名、页数、价格、编号检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByNamePageCountPriceSeqTermsClass(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceSeqTermsClass2 根据书名、页数、价格、编号检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByNamePageCountPriceSeqTermsClass2(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountPriceSeqTermsClassClass2 根据书名、页数、价格、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// price float64 价格
// seq string 编号
func MatchBooksByNamePageCountPriceSeqTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateSeqTermsClass 根据书名、页数、发布日期、编号检索books表并分组统计类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePageCountReleaseDateSeqTermsClass(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateSeqTermsClass2 根据书名、页数、发布日期、编号检索books表并分组统计子类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePageCountReleaseDateSeqTermsClass2(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePageCountReleaseDateSeqTermsClassClass2 根据书名、页数、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePageCountReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateSeqTermsClass 根据书名、价格、发布日期、编号检索books表并分组统计类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePriceReleaseDateSeqTermsClass(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateSeqTermsClass2 根据书名、价格、发布日期、编号检索books表并分组统计子类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNamePriceReleaseDateSeqTermsClassClass2 根据书名、价格、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByNamePriceReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateSeqTermsClass 根据页数、价格、发布日期、编号检索books表并分组统计类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountPriceReleaseDateSeqTermsClass(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateSeqTermsClass2 根据页数、价格、发布日期、编号检索books表并分组统计子类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountPriceReleaseDateSeqTermsClass2(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MatchBooksByPageCountPriceReleaseDateSeqTermsClassClass2 根据页数、价格、发布日期、编号检索books表并同时统计类别、子类别的分布情况
// pageCount int64 页数
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func MatchBooksByPageCountPriceReleaseDateSeqTermsClassClass2(es *elasticsearch.Client, pageCount int64, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.TermsAgg("class").With(eq.TermsAgg("class2"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MaxPageCountInWeekHistReleaseDateOfBooksByAllText 根据全文本检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
func MaxPageCountInWeekHistReleaseDateOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllText 根据全文本检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
func MaxPriceInWeekHistReleaseDateOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthor 根据作者检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthor 根据作者检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
func MaxPriceInWeekHistReleaseDateOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass 根据类别检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
func MaxPageCountInWeekHistReleaseDateOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass 根据类别检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
func MaxPriceInWeekHistReleaseDateOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2 根据子类别检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2 根据子类别检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByName 根据书名检索books表，并按发布日期分桶统计每周页数的最大值
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByName 根据书名检索books表，并按发布日期分桶统计每周价格的最大值
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByPageCount 根据页数检索books表，并按发布日期分桶统计每周价格的最大值
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByPrice 根据价格检索books表，并按发布日期分桶统计每周页数的最大值
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksBySeq 根据编号检索books表，并按发布日期分桶统计每周页数的最大值
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksBySeq 根据编号检索books表，并按发布日期分桶统计每周价格的最大值
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass 根据全文本、类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass 根据全文本、类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextName 根据全文本、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextName 根据全文本、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextPageCount 根据全文本、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextPrice 根据全文本、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextSeq 根据全文本、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextSeq 根据全文本、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass 根据作者、类别检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass 根据作者、类别检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2 根据作者、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2 根据作者、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorName 根据作者、书名检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorName 根据作者、书名检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorPageCount 根据作者、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorPrice 根据作者、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorSeq 根据作者、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorSeq 根据作者、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2 根据类别、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2 根据类别、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassName 根据类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassName 根据类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassPageCount 根据类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassPrice 根据类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassSeq 根据类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassSeq 根据类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2Name 根据子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2Name 根据子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2PageCount 根据子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2Price 根据子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2Seq 根据子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2Seq 根据子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByNamePageCount 根据书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByNamePrice 根据书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByNameSeq 根据书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByNameSeq 根据书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByPageCountSeq 根据页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByPriceSeq 根据价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class string 类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class string 类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Price 根据类别、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassNamePageCount 根据类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassNamePrice 根据类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassPriceSeq 根据类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// name string 书名
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByNamePriceSeq 根据书名、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// name string 书名
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPriceInWeekHistReleaseDateOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表，并按发布日期分桶统计每周价格的最大值
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func MaxPriceInWeekHistReleaseDateOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// MaxPageCountInWeekHistReleaseDateOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表，并按发布日期分桶统计每周页数的最大值
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func MaxPageCountInWeekHistReleaseDateOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("week"))
	aggs = aggs.Nested(eq.MaxAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

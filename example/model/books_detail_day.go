// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// DayBooksByReleaseDateGte 从Books查找release_date为近几日的详细数据列表和总数量
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthor 根据Author从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass 根据Class从Books查找release_date为近几日的详细数据列表和总数量
// class string class
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithClass(es *elasticsearch.Client, class string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithName 根据Name从Books查找release_date为近几日的详细数据列表和总数量
// name string 书名
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithName(es *elasticsearch.Client, name string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGte 从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGte 从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGte 从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGte 从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGte 从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGte 从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGte 从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGte 从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGte 从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGte 从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithSeq 根据Seq从Books查找release_date为近几日的详细数据列表和总数量
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClass 根据Author、Class从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorName 根据Author、Name从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthor 根据Author从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthor 根据Author从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthor 根据Author从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthor 根据Author从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassName 根据Class、Name从Books查找release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClass 根据Class从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClass 根据Class从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClass 根据Class从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClass 根据Class从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClass 根据Class从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClass 根据Class从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClass 根据Class从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassSeq 根据Class、Seq从Books查找release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithName 根据Name从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithName 根据Name从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithName 根据Name从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithName 根据Name从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithName 根据Name从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithName 根据Name从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithName 根据Name从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithName 根据Name从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithName 根据Name从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameSeq 根据Name、Seq从Books查找release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteReleaseDateGte 从Books查找page_count大于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGtReleaseDateGte 从Books查找page_count大于等于、价格大于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLtReleaseDateGte 从Books查找page_count大于等于、价格小于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLteReleaseDateGte 从Books查找page_count大于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteLteReleaseDateGte 从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteReleaseDateGte 从Books查找page_count大于、价格大于等于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGtReleaseDateGte 从Books查找page_count大于、价格大于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLtReleaseDateGte 从Books查找page_count大于、价格小于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLteReleaseDateGte 从Books查找page_count大于、价格小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteLteReleaseDateGte 从Books查找page_count大于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteReleaseDateGte 从Books查找page_count小于、价格大于等于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGtReleaseDateGte 从Books查找page_count小于、价格大于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLtReleaseDateGte 从Books查找page_count小于、价格小于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLteReleaseDateGte 从Books查找page_count小于、价格小于等于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteLteReleaseDateGte 从Books查找page_count小于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteReleaseDateGte 从Books查找page_count小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGtReleaseDateGte 从Books查找page_count小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLtReleaseDateGte 从Books查找page_count小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLteReleaseDateGte 从Books查找page_count小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteLteReleaseDateGte 从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGtReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLtReleaseDateGte 从Books查找page_count大于等于和小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteLteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithSeq 根据Seq从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithSeq 根据Seq从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithSeq 根据Seq从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithSeq 根据Seq从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassName 根据Author、Class、Name从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorClassName(es *elasticsearch.Client, author string, class string, name string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthorClass 根据Author、Class从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthorClass 根据Author、Class从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthorClass 根据Author、Class从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthorClass 根据Author、Class从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthorClass 根据Author、Class从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassSeq 根据Author、Class、Seq从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// class string class
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorClassSeq(es *elasticsearch.Client, author string, class string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthorName 根据Author、Name从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthorName 根据Author、Name从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthorName 根据Author、Name从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthorName 根据Author、Name从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthorName 根据Author、Name从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthorName 根据Author、Name从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthorName 根据Author、Name从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthorName 根据Author、Name从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthorName 根据Author、Name从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthorName 根据Author、Name从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorNameSeq 根据Author、Name、Seq从Books查找release_date为近几日的详细数据列表和总数量
// author string author
// name string 书名
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithAuthorNameSeq(es *elasticsearch.Client, author string, name string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGtReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLtReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGtReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLtReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLtReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithAuthor 根据Author从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthorSeq 根据Author、Seq从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// author string author
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClassName 根据Class、Name从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClassName 根据Class、Name从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClassName 根据Class、Name从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClassName 根据Class、Name从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClassName 根据Class、Name从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClassName 根据Class、Name从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClassName 根据Class、Name从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClassName 根据Class、Name从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClassName 根据Class、Name从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClassName 根据Class、Name从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassNameSeq 根据Class、Name、Seq从Books查找release_date为近几日的详细数据列表和总数量
// class string class
// name string 书名
// seq string seq
// releaseDateNDay int release_date为近几日
func DayBooksByReleaseDateGteWithClassNameSeq(es *elasticsearch.Client, class string, name string, seq string, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGtReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLtReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteLteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteReleaseDateGteWithClass 根据Class从Books查找page_count大于、价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGtReleaseDateGteWithClass 根据Class从Books查找page_count大于、价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLtReleaseDateGteWithClass 根据Class从Books查找page_count大于、价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLteReleaseDateGteWithClass 根据Class从Books查找page_count大于、价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteLteReleaseDateGteWithClass 根据Class从Books查找page_count大于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteReleaseDateGteWithClass 根据Class从Books查找page_count小于、价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGtReleaseDateGteWithClass 根据Class从Books查找page_count小于、价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLtReleaseDateGteWithClass 根据Class从Books查找page_count小于、价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLteReleaseDateGteWithClass 根据Class从Books查找page_count小于、价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteLteReleaseDateGteWithClass 根据Class从Books查找page_count小于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGtReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLtReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLteReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteLteReleaseDateGteWithClass 根据Class从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGtReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLtReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithClass 根据Class从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClassSeq 根据Class、Seq从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClassSeq 根据Class、Seq从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClassSeq 根据Class、Seq从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClassSeq 根据Class、Seq从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClassSeq 根据Class、Seq从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// class string class
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteReleaseDateGteWithName 根据Name从Books查找page_count大于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGtReleaseDateGteWithName 根据Name从Books查找page_count大于等于、价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLtReleaseDateGteWithName 根据Name从Books查找page_count大于等于、价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLteReleaseDateGteWithName 根据Name从Books查找page_count大于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteLteReleaseDateGteWithName 根据Name从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteReleaseDateGteWithName 根据Name从Books查找page_count大于、价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGtReleaseDateGteWithName 根据Name从Books查找page_count大于、价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLtReleaseDateGteWithName 根据Name从Books查找page_count大于、价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLteReleaseDateGteWithName 根据Name从Books查找page_count大于、价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteLteReleaseDateGteWithName 根据Name从Books查找page_count大于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteReleaseDateGteWithName 根据Name从Books查找page_count小于、价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGtReleaseDateGteWithName 根据Name从Books查找page_count小于、价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLtReleaseDateGteWithName 根据Name从Books查找page_count小于、价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLteReleaseDateGteWithName 根据Name从Books查找page_count小于、价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteLteReleaseDateGteWithName 根据Name从Books查找page_count小于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteReleaseDateGteWithName 根据Name从Books查找page_count小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGtReleaseDateGteWithName 根据Name从Books查找page_count小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLtReleaseDateGteWithName 根据Name从Books查找page_count小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLteReleaseDateGteWithName 根据Name从Books查找page_count小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteLteReleaseDateGteWithName 根据Name从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGtReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLtReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLteReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithName 根据Name从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找page_count大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithNameSeq 根据Name、Seq从Books查找page_count大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithNameSeq 根据Name、Seq从Books查找page_count小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountLt int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找page_count小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找page_count大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGte, pageCountLte int64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找价格大于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithNameSeq 根据Name、Seq从Books查找价格大于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithNameSeq 根据Name、Seq从Books查找价格小于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找价格小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithNameSeq 根据Name、Seq从Books查找价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPriceGteLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtePriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtPriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGtPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGtReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLtReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceLteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtPriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGtReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLtReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceLteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtePriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountLtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、价格大于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLtReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、价格小于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithSeq 根据Seq从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几日的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int release_date为近几日
func DayBooksByPageCountGteLtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNDay int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

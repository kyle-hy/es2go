// Code generated by es2go. DO NOT EDIT.
// gen_agg_match_hist_stats.go

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// SumPageCountInHistPageCountOfBooksByAllText 根据全文本检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllText 根据全文本检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllText 根据全文本检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllText 根据全文本检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthor 根据作者检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthor 根据作者检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthor 根据作者检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthor 根据作者检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass 根据类别检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass 根据类别检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass 根据类别检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass 根据类别检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2 根据子类别检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2 根据子类别检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2 根据子类别检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2 根据子类别检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByName 根据书名检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByName 根据书名检索books表，并按页数区间分桶统计价格的总和
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByName 根据书名检索books表，并按价格区间分桶统计页数的总和
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByName 根据书名检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByPageCount 根据页数检索books表，并按价格区间分桶统计价格的总和
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByPageCount(es *elasticsearch.Client, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByPrice 根据价格检索books表，并按页数区间分桶统计页数的总和
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByPrice(es *elasticsearch.Client, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByReleaseDate 根据发布日期检索books表，并按页数区间分桶统计页数的总和
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByReleaseDate 根据发布日期检索books表，并按页数区间分桶统计价格的总和
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByReleaseDate 根据发布日期检索books表，并按价格区间分桶统计页数的总和
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByReleaseDate 根据发布日期检索books表，并按价格区间分桶统计价格的总和
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksBySeq 根据编号检索books表，并按页数区间分桶统计页数的总和
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksBySeq 根据编号检索books表，并按页数区间分桶统计价格的总和
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksBySeq 根据编号检索books表，并按价格区间分桶统计页数的总和
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksBySeq 根据编号检索books表，并按价格区间分桶统计价格的总和
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass 根据全文本、类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass 根据全文本、类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass 根据全文本、类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass 根据全文本、类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextName 根据全文本、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextName 根据全文本、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextName 根据全文本、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextName 根据全文本、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextPageCount 根据全文本、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextPrice 根据全文本、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextSeq 根据全文本、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextSeq 根据全文本、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextSeq 根据全文本、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextSeq 根据全文本、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass 根据作者、类别检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass 根据作者、类别检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass 根据作者、类别检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass 根据作者、类别检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2 根据作者、子类别检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2 根据作者、子类别检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2 根据作者、子类别检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2 根据作者、子类别检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorName 根据作者、书名检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorName 根据作者、书名检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorName 根据作者、书名检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorName 根据作者、书名检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorPageCount 根据作者、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorPrice 根据作者、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorSeq 根据作者、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorSeq 根据作者、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorSeq 根据作者、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorSeq 根据作者、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2 根据类别、子类别检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2 根据类别、子类别检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2 根据类别、子类别检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2 根据类别、子类别检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassName 根据类别、书名检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassName 根据类别、书名检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassName 根据类别、书名检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassName 根据类别、书名检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassPageCount 根据类别、页数检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassPrice 根据类别、价格检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassReleaseDate 根据类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassReleaseDate 根据类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassReleaseDate 根据类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassReleaseDate 根据类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassSeq 根据类别、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassSeq 根据类别、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassSeq 根据类别、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassSeq 根据类别、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2Name 根据子类别、书名检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2Name 根据子类别、书名检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2Name 根据子类别、书名检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2Name 根据子类别、书名检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2PageCount 根据子类别、页数检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2Price 根据子类别、价格检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2Seq 根据子类别、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2Seq 根据子类别、编号检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2Seq 根据子类别、编号检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2Seq 根据子类别、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNamePageCount 根据书名、页数检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNamePrice 根据书名、价格检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNameReleaseDate 根据书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByNameReleaseDate 根据书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByNameReleaseDate 根据书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNameReleaseDate 根据书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNameSeq 根据书名、编号检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByNameSeq 根据书名、编号检索books表，并按页数区间分桶统计价格的总和
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByNameSeq 根据书名、编号检索books表，并按价格区间分桶统计页数的总和
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNameSeq 根据书名、编号检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByPageCountReleaseDate 根据页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByPageCountSeq 根据页数、编号检索books表，并按价格区间分桶统计价格的总和
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByPriceReleaseDate 根据价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByPriceSeq 根据价格、编号检索books表，并按页数区间分桶统计页数的总和
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByReleaseDateSeq 根据发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByReleaseDateSeq 根据发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByReleaseDateSeq 根据发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByReleaseDateSeq 根据发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextPageCountReleaseDate 根据全文本、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextPriceReleaseDate 根据全文本、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorPageCountReleaseDate 根据作者、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorPriceReleaseDate 根据作者、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2Price 根据类别、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNamePageCount 根据类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNamePrice 根据类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassPageCountReleaseDate 根据类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassPriceReleaseDate 根据类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassPriceSeq 根据类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2PageCountReleaseDate 根据子类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2PriceReleaseDate 根据子类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNamePageCountReleaseDate 根据书名、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNamePriceReleaseDate 根据书名、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNamePriceSeq 根据书名、价格、编号检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByPageCountReleaseDateSeq 根据页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByPriceReleaseDateSeq 根据价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorPageCountReleaseDate 根据全文本、作者、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorPageCountReleaseDate(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorPriceReleaseDate 根据全文本、作者、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorPriceReleaseDate(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassPageCountReleaseDate 根据全文本、类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassPageCountReleaseDate(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassPriceReleaseDate 根据全文本、类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassPriceReleaseDate(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2PageCountReleaseDate 根据全文本、子类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2PageCountReleaseDate(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2PriceReleaseDate 根据全文本、子类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2PriceReleaseDate(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNamePageCountReleaseDate 根据全文本、书名、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNamePageCountReleaseDate(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNamePriceReleaseDate 根据全文本、书名、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNamePriceReleaseDate(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAllTextPageCountReleaseDateSeq 根据全文本、页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAllTextPageCountReleaseDateSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAllTextPriceReleaseDateSeq 根据全文本、价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAllTextPriceReleaseDateSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassPageCountReleaseDate 根据作者、类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassPriceReleaseDate 根据作者、类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2PageCountReleaseDate 根据作者、子类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2PageCountReleaseDate(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2PriceReleaseDate 根据作者、子类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2PriceReleaseDate(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNamePageCountReleaseDate 根据作者、书名、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNamePriceReleaseDate 根据作者、书名、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByAuthorPageCountReleaseDateSeq 根据作者、页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByAuthorPriceReleaseDateSeq 根据作者、价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2PageCountReleaseDate 根据类别、子类别、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2PageCountReleaseDate(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2PriceReleaseDate 根据类别、子类别、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2PriceReleaseDate(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNamePageCountReleaseDate 根据类别、书名、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNamePriceReleaseDate 根据类别、书名、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClassPageCountReleaseDateSeq 根据类别、页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClassPriceReleaseDateSeq 根据类别、价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NamePageCountReleaseDate 根据子类别、书名、页数、发布日期检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NamePageCountReleaseDate(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NamePriceReleaseDate 根据子类别、书名、价格、发布日期检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NamePriceReleaseDate(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPageCountOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表，并按页数区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPriceInHistPageCountOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPriceOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表，并按价格区间分桶统计页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPageCountInHistPriceOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByClass2PageCountReleaseDateSeq 根据子类别、页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByClass2PageCountReleaseDateSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByClass2PriceReleaseDateSeq 根据子类别、价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByClass2PriceReleaseDateSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceInHistPriceOfBooksByNamePageCountReleaseDateSeq 根据书名、页数、发布日期、编号检索books表，并按价格区间分桶统计价格的总和
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的价格区间间隔
func SumPriceInHistPriceOfBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountInHistPageCountOfBooksByNamePriceReleaseDateSeq 根据书名、价格、发布日期、编号检索books表，并按页数区间分桶统计页数的总和
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 分桶聚合的页数区间间隔
func SumPageCountInHistPageCountOfBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.SumAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

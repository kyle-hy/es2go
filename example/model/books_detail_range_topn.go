// Code generated by es2go. DO NOT EDIT.
// gen_detail_range_topn.go

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// RangeBooksByPageCountGteMaxNPrice 根据页数大于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteMinNPrice 根据页数大于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtMaxNPrice 根据页数大于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtMaxNPrice(es *elasticsearch.Client, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtMinNPrice 根据页数大于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtMinNPrice(es *elasticsearch.Client, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtMaxNPrice 根据页数小于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtMaxNPrice(es *elasticsearch.Client, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtMinNPrice 根据页数小于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtMinNPrice(es *elasticsearch.Client, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteMaxNPrice 根据页数小于等于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteMinNPrice 根据页数小于等于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteMinNPrice(es *elasticsearch.Client, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteMaxNPrice 根据页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteMinNPrice 根据页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteMaxNPageCount 根据价格大于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteMinNPageCount 根据价格大于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteMinNPageCount(es *elasticsearch.Client, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtMaxNPageCount 根据价格大于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtMaxNPageCount(es *elasticsearch.Client, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtMinNPageCount 根据价格大于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtMinNPageCount(es *elasticsearch.Client, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtMaxNPageCount 根据价格小于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtMaxNPageCount(es *elasticsearch.Client, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtMinNPageCount 根据价格小于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtMinNPageCount(es *elasticsearch.Client, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteMaxNPageCount 根据价格小于等于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteMaxNPageCount(es *elasticsearch.Client, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteMinNPageCount 根据价格小于等于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteMinNPageCount(es *elasticsearch.Client, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteMaxNPageCount 根据价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteMinNPageCount 根据价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteMaxNPageCount 根据发布日期大于等于检索books表中页数最大的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteMaxNPageCount(es *elasticsearch.Client, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteMinNPageCount 根据发布日期大于等于检索books表中页数最小的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteMinNPageCount(es *elasticsearch.Client, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtMaxNPageCount 根据发布日期大于检索books表中页数最大的前N条详细数据列表
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtMaxNPageCount(es *elasticsearch.Client, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtMinNPageCount 根据发布日期大于检索books表中页数最小的前N条详细数据列表
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtMinNPageCount(es *elasticsearch.Client, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtMaxNPageCount 根据发布日期小于检索books表中页数最大的前N条详细数据列表
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtMaxNPageCount(es *elasticsearch.Client, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtMinNPageCount 根据发布日期小于检索books表中页数最小的前N条详细数据列表
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtMinNPageCount(es *elasticsearch.Client, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteMaxNPageCount 根据发布日期小于等于检索books表中页数最大的前N条详细数据列表
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteMaxNPageCount(es *elasticsearch.Client, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteMinNPageCount 根据发布日期小于等于检索books表中页数最小的前N条详细数据列表
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteMinNPageCount(es *elasticsearch.Client, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteMaxNPageCount 根据发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteMinNPageCount 根据发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteMaxNPrice 根据发布日期大于等于检索books表中价格最大的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteMaxNPrice(es *elasticsearch.Client, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteMinNPrice 根据发布日期大于等于检索books表中价格最小的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteMinNPrice(es *elasticsearch.Client, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtMaxNPrice 根据发布日期大于检索books表中价格最大的前N条详细数据列表
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtMaxNPrice(es *elasticsearch.Client, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtMinNPrice 根据发布日期大于检索books表中价格最小的前N条详细数据列表
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtMinNPrice(es *elasticsearch.Client, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtMaxNPrice 根据发布日期小于检索books表中价格最大的前N条详细数据列表
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtMaxNPrice(es *elasticsearch.Client, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtMinNPrice 根据发布日期小于检索books表中价格最小的前N条详细数据列表
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtMinNPrice(es *elasticsearch.Client, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteMaxNPrice 根据发布日期小于等于检索books表中价格最大的前N条详细数据列表
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteMaxNPrice(es *elasticsearch.Client, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteMinNPrice 根据发布日期小于等于检索books表中价格最小的前N条详细数据列表
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteMinNPrice(es *elasticsearch.Client, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteMaxNPrice 根据发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteMinNPrice 根据发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteMinNPrice(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextMaxNPrice 根据全文本、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextMinNPrice 根据全文本、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextMaxNPrice 根据全文本、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextMinNPrice 根据全文本、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextMaxNPrice 根据全文本、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextMinNPrice 根据全文本、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextMaxNPrice 根据全文本、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextMinNPrice 根据全文本、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextMaxNPageCount 根据全文本、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextMinNPageCount 根据全文本、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextMaxNPageCount 根据全文本、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextMinNPageCount 根据全文本、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextMaxNPageCount 根据全文本、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextMinNPageCount 根据全文本、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextMaxNPageCount 根据全文本、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextMinNPageCount 根据全文本、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextMaxNPageCount 根据全文本、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextMinNPageCount 根据全文本、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextMaxNPageCount 根据全文本、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextMinNPageCount 根据全文本、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextMaxNPageCount 根据全文本、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextMinNPageCount 根据全文本、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextMaxNPageCount 根据全文本、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextMinNPageCount 根据全文本、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextMaxNPrice 根据全文本、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextMinNPrice 根据全文本、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextMaxNPrice 根据全文本、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextMinNPrice 根据全文本、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextMaxNPrice 根据全文本、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextMinNPrice 根据全文本、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextMaxNPrice 根据全文本、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextMinNPrice 根据全文本、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextMinNPrice 根据全文本、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorMaxNPrice 根据作者、页数大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorMinNPrice 根据作者、页数大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorMaxNPrice 根据作者、页数大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorMinNPrice 根据作者、页数大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorMaxNPrice 根据作者、页数小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorMinNPrice 根据作者、页数小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorMaxNPrice 根据作者、页数小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorMinNPrice 根据作者、页数小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorMaxNPageCount 根据作者、价格大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorMinNPageCount 根据作者、价格大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorMaxNPageCount 根据作者、价格大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorMinNPageCount 根据作者、价格大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorMaxNPageCount 根据作者、价格小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorMinNPageCount 根据作者、价格小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorMaxNPageCount 根据作者、价格小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorMinNPageCount 根据作者、价格小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorMaxNPageCount 根据作者、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorMinNPageCount 根据作者、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorMaxNPageCount 根据作者、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorMinNPageCount 根据作者、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorMaxNPageCount 根据作者、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorMinNPageCount 根据作者、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorMaxNPageCount 根据作者、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorMinNPageCount 根据作者、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorMinNPageCount 根据作者、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorMaxNPrice 根据作者、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorMinNPrice 根据作者、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorMaxNPrice 根据作者、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorMinNPrice 根据作者、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorMaxNPrice 根据作者、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorMinNPrice 根据作者、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorMaxNPrice 根据作者、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorMinNPrice 根据作者、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorMaxNPrice 根据作者、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorMinNPrice 根据作者、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassMaxNPrice 根据类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassMinNPrice 根据类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassMaxNPrice 根据类别、页数大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassMinNPrice 根据类别、页数大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassMaxNPrice 根据类别、页数小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassMinNPrice 根据类别、页数小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassMaxNPrice 根据类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassMinNPrice 根据类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassMaxNPrice 根据类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassMinNPrice 根据类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassMaxNPageCount 根据类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassMinNPageCount 根据类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassMaxNPageCount 根据类别、价格大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassMinNPageCount 根据类别、价格大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassMaxNPageCount 根据类别、价格小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassMinNPageCount 根据类别、价格小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassMaxNPageCount 根据类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassMinNPageCount 根据类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassMinNPageCount 根据类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassMaxNPageCount 根据类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassMinNPageCount 根据类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassMaxNPageCount 根据类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassMinNPageCount 根据类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassMaxNPageCount 根据类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassMinNPageCount 根据类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassMaxNPageCount 根据类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassMinNPageCount 根据类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassMaxNPageCount 根据类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassMinNPageCount 根据类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassMaxNPrice 根据类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassMinNPrice 根据类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassMaxNPrice 根据类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassMinNPrice 根据类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassMaxNPrice 根据类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassMinNPrice 根据类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassMaxNPrice 根据类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassMinNPrice 根据类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassMaxNPrice 根据类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassMinNPrice 根据类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2MaxNPrice 根据子类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2MinNPrice 根据子类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2MaxNPrice 根据子类别、页数大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2MinNPrice 根据子类别、页数大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2MaxNPrice 根据子类别、页数小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2MinNPrice 根据子类别、页数小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2MaxNPrice 根据子类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2MinNPrice 根据子类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2MaxNPageCount 根据子类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2MinNPageCount 根据子类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2MaxNPageCount 根据子类别、价格大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2MinNPageCount 根据子类别、价格大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2MaxNPageCount 根据子类别、价格小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2MinNPageCount 根据子类别、价格小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2MaxNPageCount 根据子类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2MinNPageCount 根据子类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2MaxNPageCount 根据子类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2MinNPageCount 根据子类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2MaxNPageCount 根据子类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2MinNPageCount 根据子类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2MaxNPageCount 根据子类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2MinNPageCount 根据子类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2MaxNPageCount 根据子类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2MinNPageCount 根据子类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2MinNPageCount 根据子类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2MaxNPrice 根据子类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2MinNPrice 根据子类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2MaxNPrice 根据子类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2MinNPrice 根据子类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2MaxNPrice 根据子类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2MinNPrice 根据子类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2MaxNPrice 根据子类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2MinNPrice 根据子类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2MaxNPrice 根据子类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2MinNPrice 根据子类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithNameMaxNPrice 根据书名、页数大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithNameMinNPrice 根据书名、页数大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithNameMaxNPrice 根据书名、页数大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithNameMinNPrice 根据书名、页数大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithNameMaxNPrice 根据书名、页数小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithNameMinNPrice 根据书名、页数小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithNameMaxNPrice 根据书名、页数小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithNameMinNPrice 根据书名、页数小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithNameMaxNPrice 根据书名、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithNameMinNPrice 根据书名、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithNameMaxNPageCount 根据书名、价格大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithNameMinNPageCount 根据书名、价格大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithNameMaxNPageCount 根据书名、价格大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithNameMinNPageCount 根据书名、价格大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithNameMaxNPageCount 根据书名、价格小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithNameMinNPageCount 根据书名、价格小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithNameMaxNPageCount 根据书名、价格小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithNameMinNPageCount 根据书名、价格小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithNameMinNPageCount 根据书名、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameMaxNPageCount 根据书名、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameMinNPageCount 根据书名、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameMaxNPageCount 根据书名、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameMinNPageCount 根据书名、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameMaxNPageCount 根据书名、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameMinNPageCount 根据书名、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameMaxNPageCount 根据书名、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameMinNPageCount 根据书名、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameMaxNPageCount 根据书名、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameMinNPageCount 根据书名、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameMaxNPrice 根据书名、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameMinNPrice 根据书名、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameMaxNPrice 根据书名、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameMinNPrice 根据书名、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameMaxNPrice 根据书名、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameMinNPrice 根据书名、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameMaxNPrice 根据书名、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameMinNPrice 根据书名、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameMaxNPrice 根据书名、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameMinNPrice 根据书名、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteMaxNPrice 根据页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteMinNPrice 根据页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtMaxNPrice 根据页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtMinNPrice 根据页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtMaxNPrice 根据页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtMinNPrice 根据页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteMaxNPrice 根据页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteMinNPrice 根据页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteMaxNPrice 根据页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteMinNPrice 根据页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteMaxNPrice 根据页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteMinNPrice 根据页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtMaxNPrice 根据页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtMinNPrice 根据页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtMaxNPrice 根据页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtMinNPrice 根据页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteMaxNPrice 根据页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteMinNPrice 根据页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteMaxNPrice 根据页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteMinNPrice 根据页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteMaxNPrice 根据页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteMinNPrice 根据页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtMaxNPrice 根据页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtMinNPrice 根据页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtMaxNPrice 根据页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtMinNPrice 根据页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteMaxNPrice 根据页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteMinNPrice 根据页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteMaxNPrice 根据页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteMinNPrice 根据页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteMaxNPrice 根据页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteMinNPrice 根据页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtMaxNPrice 根据页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtMinNPrice 根据页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtMaxNPrice 根据页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtMinNPrice 根据页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteMaxNPrice 根据页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteMinNPrice 根据页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteMaxNPrice 根据页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteMinNPrice 根据页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteMaxNPrice 根据页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteMinNPrice 根据页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtMaxNPrice 根据页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtMinNPrice 根据页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtMaxNPrice 根据页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtMinNPrice 根据页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteMaxNPrice 根据页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteMinNPrice 根据页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteMaxNPrice 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteMinNPrice 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithSeqMaxNPrice 根据编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithSeqMinNPrice 根据编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithSeqMaxNPrice 根据编号、页数大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithSeqMinNPrice 根据编号、页数大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithSeqMaxNPrice 根据编号、页数小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithSeqMinNPrice 根据编号、页数小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithSeqMaxNPrice 根据编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithSeqMinNPrice 根据编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithSeqMinNPrice 根据编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteMaxNPageCount 根据价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteMinNPageCount 根据价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtMaxNPageCount 根据价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtMinNPageCount 根据价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtMaxNPageCount 根据价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtMinNPageCount 根据价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteMaxNPageCount 根据价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteMinNPageCount 根据价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteMaxNPageCount 根据价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteMinNPageCount 根据价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteMaxNPageCount 根据价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteMinNPageCount 根据价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtMaxNPageCount 根据价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtMinNPageCount 根据价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtMaxNPageCount 根据价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtMinNPageCount 根据价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteMaxNPageCount 根据价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteMinNPageCount 根据价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteMaxNPageCount 根据价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteMinNPageCount 根据价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteMaxNPageCount 根据价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteMinNPageCount 根据价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtMaxNPageCount 根据价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtMinNPageCount 根据价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtMaxNPageCount 根据价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtMinNPageCount 根据价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteMaxNPageCount 根据价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteMinNPageCount 根据价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteMaxNPageCount 根据价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteMinNPageCount 根据价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteMaxNPageCount 根据价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteMinNPageCount 根据价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtMaxNPageCount 根据价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtMinNPageCount 根据价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtMaxNPageCount 根据价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtMinNPageCount 根据价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteMaxNPageCount 根据价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteMinNPageCount 根据价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteMaxNPageCount 根据价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteMinNPageCount 根据价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteMaxNPageCount 根据价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteMinNPageCount 根据价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtMaxNPageCount 根据价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtMinNPageCount 根据价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtMaxNPageCount 根据价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtMinNPageCount 根据价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteMaxNPageCount 根据价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteMinNPageCount 根据价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteMaxNPageCount 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteMinNPageCount 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithSeqMaxNPageCount 根据编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithSeqMinNPageCount 根据编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithSeqMaxNPageCount 根据编号、价格大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithSeqMinNPageCount 根据编号、价格大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithSeqMaxNPageCount 根据编号、价格小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithSeqMinNPageCount 根据编号、价格小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithSeqMaxNPageCount 根据编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithSeqMinNPageCount 根据编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithSeqMaxNPageCount 根据编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithSeqMinNPageCount 根据编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithSeqMaxNPageCount 根据编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithSeqMinNPageCount 根据编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithSeqMaxNPageCount 根据编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithSeqMinNPageCount 根据编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithSeqMaxNPageCount 根据编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithSeqMinNPageCount 根据编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithSeqMaxNPageCount 根据编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithSeqMinNPageCount 根据编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithSeqMaxNPrice 根据编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithSeqMinNPrice 根据编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithSeqMaxNPrice 根据编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithSeqMinNPrice 根据编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithSeqMaxNPrice 根据编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithSeqMinNPrice 根据编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithSeqMaxNPrice 根据编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithSeqMinNPrice 根据编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithSeqMaxNPrice 根据编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithSeqMinNPrice 根据编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextAuthorMaxNPrice 根据全文本、作者、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextAuthorMinNPrice 根据全文本、作者、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextAuthorMaxNPrice 根据全文本、作者、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextAuthorMinNPrice 根据全文本、作者、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextAuthorMaxNPrice 根据全文本、作者、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextAuthorMinNPrice 根据全文本、作者、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextAuthorMaxNPrice 根据全文本、作者、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextAuthorMinNPrice 根据全文本、作者、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextAuthorMaxNPrice 根据全文本、作者、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextAuthorMinNPrice 根据全文本、作者、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextAuthorMinNPageCount 根据全文本、作者、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextAuthorMaxNPageCount 根据全文本、作者、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextAuthorMinNPageCount 根据全文本、作者、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextAuthorMaxNPageCount 根据全文本、作者、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextAuthorMinNPageCount 根据全文本、作者、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextAuthorMaxNPageCount 根据全文本、作者、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextAuthorMinNPageCount 根据全文本、作者、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextAuthorMaxNPageCount 根据全文本、作者、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextAuthorMinNPageCount 根据全文本、作者、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextClassMaxNPrice 根据全文本、类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextClassMinNPrice 根据全文本、类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextClassMaxNPrice 根据全文本、类别、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextClassMinNPrice 根据全文本、类别、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextClassMaxNPrice 根据全文本、类别、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextClassMinNPrice 根据全文本、类别、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextClassMaxNPrice 根据全文本、类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextClassMinNPrice 根据全文本、类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextClassMaxNPrice 根据全文本、类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextClassMinNPrice 根据全文本、类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextClassMaxNPageCount 根据全文本、类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextClassMinNPageCount 根据全文本、类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextClassMaxNPageCount 根据全文本、类别、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextClassMinNPageCount 根据全文本、类别、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextClassMaxNPageCount 根据全文本、类别、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextClassMinNPageCount 根据全文本、类别、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextClassMaxNPageCount 根据全文本、类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextClassMinNPageCount 根据全文本、类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextClassMaxNPageCount 根据全文本、类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextClassMinNPageCount 根据全文本、类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClassMinNPageCount 根据全文本、类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClassMinNPageCount 根据全文本、类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClassMinNPrice 根据全文本、类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClassMaxNPrice 根据全文本、类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClassMinNPrice 根据全文本、类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClassMaxNPrice 根据全文本、类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClassMinNPrice 根据全文本、类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClassMinNPrice 根据全文本、类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClassMinNPrice 根据全文本、类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextClass2MaxNPrice 根据全文本、子类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextClass2MinNPrice 根据全文本、子类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextClass2MaxNPrice 根据全文本、子类别、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextClass2MinNPrice 根据全文本、子类别、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextClass2MaxNPrice 根据全文本、子类别、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextClass2MinNPrice 根据全文本、子类别、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextClass2MaxNPrice 根据全文本、子类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextClass2MinNPrice 根据全文本、子类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextClass2MaxNPrice 根据全文本、子类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextClass2MinNPrice 根据全文本、子类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextClass2MinNPageCount 根据全文本、子类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextClass2MaxNPageCount 根据全文本、子类别、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextClass2MinNPageCount 根据全文本、子类别、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextClass2MaxNPageCount 根据全文本、子类别、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextClass2MinNPageCount 根据全文本、子类别、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextClass2MaxNPageCount 根据全文本、子类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextClass2MinNPageCount 根据全文本、子类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextClass2MaxNPageCount 根据全文本、子类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextClass2MinNPageCount 根据全文本、子类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextNameMaxNPrice 根据全文本、书名、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextNameMinNPrice 根据全文本、书名、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextNameMaxNPrice 根据全文本、书名、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextNameMinNPrice 根据全文本、书名、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextNameMaxNPrice 根据全文本、书名、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextNameMinNPrice 根据全文本、书名、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextNameMaxNPrice 根据全文本、书名、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextNameMinNPrice 根据全文本、书名、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextNameMaxNPrice 根据全文本、书名、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextNameMinNPrice 根据全文本、书名、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextNameMaxNPageCount 根据全文本、书名、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextNameMinNPageCount 根据全文本、书名、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextNameMaxNPageCount 根据全文本、书名、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextNameMinNPageCount 根据全文本、书名、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextNameMaxNPageCount 根据全文本、书名、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextNameMinNPageCount 根据全文本、书名、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextNameMaxNPageCount 根据全文本、书名、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextNameMinNPageCount 根据全文本、书名、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextNameMaxNPageCount 根据全文本、书名、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextNameMinNPageCount 根据全文本、书名、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextNameMinNPageCount 根据全文本、书名、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextNameMinNPageCount 根据全文本、书名、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextNameMinNPrice 根据全文本、书名、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextNameMaxNPrice 根据全文本、书名、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextNameMinNPrice 根据全文本、书名、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextNameMaxNPrice 根据全文本、书名、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextNameMinNPrice 根据全文本、书名、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextNameMinNPrice 根据全文本、书名、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextNameMinNPrice 根据全文本、书名、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithAllTextMaxNPrice 根据全文本、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithAllTextMinNPrice 根据全文本、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithAllTextMaxNPrice 根据全文本、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithAllTextMinNPrice 根据全文本、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithAllTextMinNPrice 根据全文本、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithAllTextMinNPrice 根据全文本、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithAllTextMaxNPrice 根据全文本、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithAllTextMinNPrice 根据全文本、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithAllTextMaxNPrice 根据全文本、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithAllTextMinNPrice 根据全文本、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithAllTextMinNPrice 根据全文本、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithAllTextMinNPrice 根据全文本、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextSeqMaxNPrice 根据全文本、编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAllTextSeqMinNPrice 根据全文本、编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextSeqMaxNPrice 根据全文本、编号、页数大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAllTextSeqMinNPrice 根据全文本、编号、页数大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextSeqMaxNPrice 根据全文本、编号、页数小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAllTextSeqMinNPrice 根据全文本、编号、页数小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextSeqMaxNPrice 根据全文本、编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAllTextSeqMinNPrice 根据全文本、编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextSeqMaxNPrice 根据全文本、编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAllTextSeqMinNPrice 根据全文本、编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithAllTextMinNPageCount 根据全文本、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithAllTextMinNPageCount 根据全文本、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithAllTextMinNPageCount 根据全文本、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithAllTextMinNPageCount 根据全文本、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextSeqMaxNPageCount 根据全文本、编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAllTextSeqMinNPageCount 根据全文本、编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextSeqMaxNPageCount 根据全文本、编号、价格大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAllTextSeqMinNPageCount 根据全文本、编号、价格大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextSeqMaxNPageCount 根据全文本、编号、价格小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAllTextSeqMinNPageCount 根据全文本、编号、价格小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextSeqMaxNPageCount 根据全文本、编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAllTextSeqMinNPageCount 根据全文本、编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextSeqMaxNPageCount 根据全文本、编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAllTextSeqMinNPageCount 根据全文本、编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAllTextSeqMinNPrice 根据全文本、编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAllTextSeqMinNPrice 根据全文本、编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorClassMaxNPrice 根据作者、类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorClassMinNPrice 根据作者、类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorClassMaxNPrice 根据作者、类别、页数大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorClassMinNPrice 根据作者、类别、页数大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorClassMaxNPrice 根据作者、类别、页数小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorClassMinNPrice 根据作者、类别、页数小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorClassMaxNPrice 根据作者、类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorClassMinNPrice 根据作者、类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorClassMaxNPrice 根据作者、类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorClassMinNPrice 根据作者、类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorClassMaxNPageCount 根据作者、类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorClassMinNPageCount 根据作者、类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorClassMaxNPageCount 根据作者、类别、价格大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorClassMinNPageCount 根据作者、类别、价格大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorClassMaxNPageCount 根据作者、类别、价格小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorClassMinNPageCount 根据作者、类别、价格小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorClassMaxNPageCount 根据作者、类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorClassMinNPageCount 根据作者、类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorClassMaxNPageCount 根据作者、类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorClassMinNPageCount 根据作者、类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClassMinNPageCount 根据作者、类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClassMaxNPageCount 根据作者、类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClassMinNPageCount 根据作者、类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClassMaxNPageCount 根据作者、类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClassMinNPageCount 根据作者、类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClassMinNPageCount 根据作者、类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClassMinNPageCount 根据作者、类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClassMaxNPrice 根据作者、类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClassMinNPrice 根据作者、类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClassMaxNPrice 根据作者、类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClassMinNPrice 根据作者、类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClassMaxNPrice 根据作者、类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClassMinNPrice 根据作者、类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClassMaxNPrice 根据作者、类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClassMinNPrice 根据作者、类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClassMaxNPrice 根据作者、类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClassMinNPrice 根据作者、类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorClass2MaxNPrice 根据作者、子类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorClass2MinNPrice 根据作者、子类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorClass2MaxNPrice 根据作者、子类别、页数大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorClass2MinNPrice 根据作者、子类别、页数大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorClass2MaxNPrice 根据作者、子类别、页数小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorClass2MinNPrice 根据作者、子类别、页数小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorClass2MaxNPrice 根据作者、子类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorClass2MinNPrice 根据作者、子类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorClass2MaxNPrice 根据作者、子类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorClass2MinNPrice 根据作者、子类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorClass2MaxNPageCount 根据作者、子类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorClass2MinNPageCount 根据作者、子类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorClass2MaxNPageCount 根据作者、子类别、价格大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorClass2MinNPageCount 根据作者、子类别、价格大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorClass2MaxNPageCount 根据作者、子类别、价格小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorClass2MinNPageCount 根据作者、子类别、价格小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorClass2MaxNPageCount 根据作者、子类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorClass2MinNPageCount 根据作者、子类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorClass2MaxNPageCount 根据作者、子类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorClass2MinNPageCount 根据作者、子类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorClass2MinNPrice 根据作者、子类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorClass2MinNPrice 根据作者、子类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorNameMaxNPrice 根据作者、书名、页数大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorNameMinNPrice 根据作者、书名、页数大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorNameMaxNPrice 根据作者、书名、页数大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorNameMinNPrice 根据作者、书名、页数大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorNameMaxNPrice 根据作者、书名、页数小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorNameMinNPrice 根据作者、书名、页数小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorNameMaxNPrice 根据作者、书名、页数小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorNameMinNPrice 根据作者、书名、页数小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorNameMaxNPrice 根据作者、书名、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorNameMinNPrice 根据作者、书名、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorNameMaxNPageCount 根据作者、书名、价格大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorNameMinNPageCount 根据作者、书名、价格大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorNameMaxNPageCount 根据作者、书名、价格大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorNameMinNPageCount 根据作者、书名、价格大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorNameMaxNPageCount 根据作者、书名、价格小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorNameMinNPageCount 根据作者、书名、价格小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorNameMaxNPageCount 根据作者、书名、价格小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorNameMinNPageCount 根据作者、书名、价格小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorNameMaxNPageCount 根据作者、书名、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorNameMinNPageCount 根据作者、书名、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorNameMinNPageCount 根据作者、书名、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorNameMaxNPageCount 根据作者、书名、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorNameMinNPageCount 根据作者、书名、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorNameMaxNPageCount 根据作者、书名、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorNameMinNPageCount 根据作者、书名、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorNameMinNPageCount 根据作者、书名、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorNameMinNPageCount 根据作者、书名、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorNameMaxNPrice 根据作者、书名、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorNameMinNPrice 根据作者、书名、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorNameMaxNPrice 根据作者、书名、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorNameMinNPrice 根据作者、书名、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorNameMaxNPrice 根据作者、书名、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorNameMinNPrice 根据作者、书名、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorNameMaxNPrice 根据作者、书名、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorNameMinNPrice 根据作者、书名、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorNameMaxNPrice 根据作者、书名、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorNameMinNPrice 根据作者、书名、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithAuthorMinNPrice 根据作者、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithAuthorMinNPrice 根据作者、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithAuthorMaxNPrice 根据作者、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithAuthorMinNPrice 根据作者、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithAuthorMaxNPrice 根据作者、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithAuthorMinNPrice 根据作者、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithAuthorMaxNPrice 根据作者、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithAuthorMinNPrice 根据作者、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithAuthorMaxNPrice 根据作者、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithAuthorMinNPrice 根据作者、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithAuthorMaxNPrice 根据作者、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithAuthorMinNPrice 根据作者、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithAuthorMaxNPrice 根据作者、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithAuthorMinNPrice 根据作者、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithAuthorMaxNPrice 根据作者、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithAuthorMinNPrice 根据作者、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithAuthorMaxNPrice 根据作者、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithAuthorMinNPrice 根据作者、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithAuthorMinNPrice 根据作者、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithAuthorMinNPrice 根据作者、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorSeqMaxNPrice 根据作者、编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithAuthorSeqMinNPrice 根据作者、编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorSeqMaxNPrice 根据作者、编号、页数大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithAuthorSeqMinNPrice 根据作者、编号、页数大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorSeqMaxNPrice 根据作者、编号、页数小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithAuthorSeqMinNPrice 根据作者、编号、页数小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorSeqMaxNPrice 根据作者、编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithAuthorSeqMinNPrice 根据作者、编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorSeqMaxNPrice 根据作者、编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithAuthorSeqMinNPrice 根据作者、编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithAuthorMaxNPageCount 根据作者、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithAuthorMinNPageCount 根据作者、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithAuthorMaxNPageCount 根据作者、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithAuthorMinNPageCount 根据作者、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithAuthorMinNPageCount 根据作者、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithAuthorMinNPageCount 根据作者、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithAuthorMaxNPageCount 根据作者、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithAuthorMinNPageCount 根据作者、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithAuthorMaxNPageCount 根据作者、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithAuthorMinNPageCount 根据作者、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithAuthorMinNPageCount 根据作者、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithAuthorMinNPageCount 根据作者、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorSeqMaxNPageCount 根据作者、编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithAuthorSeqMinNPageCount 根据作者、编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorSeqMaxNPageCount 根据作者、编号、价格大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithAuthorSeqMinNPageCount 根据作者、编号、价格大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorSeqMaxNPageCount 根据作者、编号、价格小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithAuthorSeqMinNPageCount 根据作者、编号、价格小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorSeqMaxNPageCount 根据作者、编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithAuthorSeqMinNPageCount 根据作者、编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorSeqMaxNPageCount 根据作者、编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithAuthorSeqMinNPageCount 根据作者、编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorSeqMinNPageCount 根据作者、编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorSeqMinNPageCount 根据作者、编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithAuthorSeqMinNPrice 根据作者、编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorSeqMaxNPrice 根据作者、编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithAuthorSeqMinNPrice 根据作者、编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorSeqMaxNPrice 根据作者、编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithAuthorSeqMinNPrice 根据作者、编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithAuthorSeqMinNPrice 根据作者、编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithAuthorSeqMinNPrice 根据作者、编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassClass2MaxNPrice 根据类别、子类别、页数大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassClass2MinNPrice 根据类别、子类别、页数大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassClass2MaxNPrice 根据类别、子类别、页数大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassClass2MinNPrice 根据类别、子类别、页数大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassClass2MaxNPrice 根据类别、子类别、页数小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassClass2MinNPrice 根据类别、子类别、页数小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassClass2MaxNPrice 根据类别、子类别、页数小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassClass2MinNPrice 根据类别、子类别、页数小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassClass2MaxNPrice 根据类别、子类别、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassClass2MinNPrice 根据类别、子类别、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassClass2MaxNPageCount 根据类别、子类别、价格大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassClass2MinNPageCount 根据类别、子类别、价格大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassClass2MaxNPageCount 根据类别、子类别、价格大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassClass2MinNPageCount 根据类别、子类别、价格大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassClass2MaxNPageCount 根据类别、子类别、价格小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassClass2MinNPageCount 根据类别、子类别、价格小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassClass2MaxNPageCount 根据类别、子类别、价格小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassClass2MinNPageCount 根据类别、子类别、价格小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassClass2MaxNPageCount 根据类别、子类别、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassClass2MinNPageCount 根据类别、子类别、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassClass2MinNPageCount 根据类别、子类别、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassClass2MaxNPageCount 根据类别、子类别、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassClass2MinNPageCount 根据类别、子类别、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassClass2MaxNPageCount 根据类别、子类别、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassClass2MinNPageCount 根据类别、子类别、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassClass2MinNPageCount 根据类别、子类别、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassClass2MinNPageCount 根据类别、子类别、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassClass2MaxNPrice 根据类别、子类别、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassClass2MinNPrice 根据类别、子类别、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassClass2MaxNPrice 根据类别、子类别、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassClass2MinNPrice 根据类别、子类别、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassClass2MaxNPrice 根据类别、子类别、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassClass2MinNPrice 根据类别、子类别、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassClass2MaxNPrice 根据类别、子类别、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassClass2MinNPrice 根据类别、子类别、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassClass2MaxNPrice 根据类别、子类别、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassClass2MinNPrice 根据类别、子类别、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassNameMaxNPrice 根据类别、书名、页数大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassNameMinNPrice 根据类别、书名、页数大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassNameMaxNPrice 根据类别、书名、页数大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassNameMinNPrice 根据类别、书名、页数大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassNameMaxNPrice 根据类别、书名、页数小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassNameMinNPrice 根据类别、书名、页数小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassNameMaxNPrice 根据类别、书名、页数小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassNameMinNPrice 根据类别、书名、页数小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassNameMaxNPrice 根据类别、书名、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassNameMinNPrice 根据类别、书名、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassNameMaxNPageCount 根据类别、书名、价格大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassNameMinNPageCount 根据类别、书名、价格大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassNameMaxNPageCount 根据类别、书名、价格大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassNameMinNPageCount 根据类别、书名、价格大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassNameMaxNPageCount 根据类别、书名、价格小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassNameMinNPageCount 根据类别、书名、价格小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassNameMaxNPageCount 根据类别、书名、价格小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassNameMinNPageCount 根据类别、书名、价格小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassNameMaxNPageCount 根据类别、书名、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassNameMinNPageCount 根据类别、书名、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassNameMaxNPageCount 根据类别、书名、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassNameMinNPageCount 根据类别、书名、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassNameMaxNPageCount 根据类别、书名、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassNameMinNPageCount 根据类别、书名、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassNameMaxNPageCount 根据类别、书名、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassNameMinNPageCount 根据类别、书名、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassNameMaxNPageCount 根据类别、书名、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassNameMinNPageCount 根据类别、书名、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassNameMaxNPageCount 根据类别、书名、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassNameMinNPageCount 根据类别、书名、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassNameMaxNPrice 根据类别、书名、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassNameMinNPrice 根据类别、书名、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassNameMaxNPrice 根据类别、书名、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassNameMinNPrice 根据类别、书名、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassNameMaxNPrice 根据类别、书名、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassNameMinNPrice 根据类别、书名、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassNameMaxNPrice 根据类别、书名、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassNameMinNPrice 根据类别、书名、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassNameMaxNPrice 根据类别、书名、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassNameMinNPrice 根据类别、书名、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithClassMaxNPrice 根据类别、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithClassMinNPrice 根据类别、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithClassMaxNPrice 根据类别、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithClassMinNPrice 根据类别、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithClassMaxNPrice 根据类别、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithClassMinNPrice 根据类别、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithClassMaxNPrice 根据类别、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithClassMinNPrice 根据类别、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithClassMaxNPrice 根据类别、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithClassMinNPrice 根据类别、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithClassMaxNPrice 根据类别、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithClassMinNPrice 根据类别、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithClassMaxNPrice 根据类别、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithClassMinNPrice 根据类别、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithClassMaxNPrice 根据类别、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithClassMinNPrice 根据类别、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithClassMaxNPrice 根据类别、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithClassMinNPrice 根据类别、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithClassMaxNPrice 根据类别、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithClassMinNPrice 根据类别、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithClassMaxNPrice 根据类别、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithClassMinNPrice 根据类别、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithClassMaxNPrice 根据类别、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithClassMinNPrice 根据类别、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithClassMaxNPrice 根据类别、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithClassMinNPrice 根据类别、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithClassMaxNPrice 根据类别、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithClassMinNPrice 根据类别、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithClassMaxNPrice 根据类别、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithClassMinNPrice 根据类别、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithClassMaxNPrice 根据类别、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithClassMinNPrice 根据类别、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithClassMaxNPrice 根据类别、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithClassMinNPrice 根据类别、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithClassMaxNPrice 根据类别、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithClassMinNPrice 根据类别、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithClassMaxNPrice 根据类别、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithClassMinNPrice 根据类别、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassSeqMaxNPrice 根据类别、编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClassSeqMinNPrice 根据类别、编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassSeqMaxNPrice 根据类别、编号、页数大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClassSeqMinNPrice 根据类别、编号、页数大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassSeqMaxNPrice 根据类别、编号、页数小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClassSeqMinNPrice 根据类别、编号、页数小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassSeqMaxNPrice 根据类别、编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClassSeqMinNPrice 根据类别、编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassSeqMaxNPrice 根据类别、编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClassSeqMinNPrice 根据类别、编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithClassMaxNPageCount 根据类别、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithClassMinNPageCount 根据类别、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithClassMaxNPageCount 根据类别、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithClassMinNPageCount 根据类别、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithClassMinNPageCount 根据类别、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithClassMinNPageCount 根据类别、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithClassMinNPageCount 根据类别、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithClassMaxNPageCount 根据类别、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithClassMinNPageCount 根据类别、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithClassMaxNPageCount 根据类别、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithClassMinNPageCount 根据类别、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithClassMaxNPageCount 根据类别、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithClassMinNPageCount 根据类别、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithClassMaxNPageCount 根据类别、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithClassMinNPageCount 根据类别、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithClassMinNPageCount 根据类别、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithClassMaxNPageCount 根据类别、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithClassMinNPageCount 根据类别、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithClassMaxNPageCount 根据类别、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithClassMinNPageCount 根据类别、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithClassMaxNPageCount 根据类别、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithClassMinNPageCount 根据类别、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithClassMaxNPageCount 根据类别、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithClassMinNPageCount 根据类别、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithClassMinNPageCount 根据类别、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithClassMaxNPageCount 根据类别、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithClassMinNPageCount 根据类别、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithClassMaxNPageCount 根据类别、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithClassMinNPageCount 根据类别、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithClassMinNPageCount 根据类别、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithClassMinNPageCount 根据类别、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassSeqMaxNPageCount 根据类别、编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClassSeqMinNPageCount 根据类别、编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassSeqMaxNPageCount 根据类别、编号、价格大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClassSeqMinNPageCount 根据类别、编号、价格大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassSeqMaxNPageCount 根据类别、编号、价格小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClassSeqMinNPageCount 根据类别、编号、价格小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassSeqMaxNPageCount 根据类别、编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClassSeqMinNPageCount 根据类别、编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassSeqMaxNPageCount 根据类别、编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClassSeqMinNPageCount 根据类别、编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassSeqMaxNPageCount 根据类别、编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassSeqMinNPageCount 根据类别、编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassSeqMaxNPageCount 根据类别、编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassSeqMinNPageCount 根据类别、编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassSeqMaxNPageCount 根据类别、编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassSeqMinNPageCount 根据类别、编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassSeqMaxNPageCount 根据类别、编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassSeqMinNPageCount 根据类别、编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassSeqMaxNPageCount 根据类别、编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassSeqMinNPageCount 根据类别、编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassSeqMaxNPrice 根据类别、编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClassSeqMinNPrice 根据类别、编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassSeqMaxNPrice 根据类别、编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClassSeqMinNPrice 根据类别、编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassSeqMaxNPrice 根据类别、编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClassSeqMinNPrice 根据类别、编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassSeqMaxNPrice 根据类别、编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClassSeqMinNPrice 根据类别、编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassSeqMaxNPrice 根据类别、编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClassSeqMinNPrice 根据类别、编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2NameMaxNPrice 根据子类别、书名、页数大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2NameMinNPrice 根据子类别、书名、页数大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2NameMaxNPrice 根据子类别、书名、页数大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2NameMinNPrice 根据子类别、书名、页数大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2NameMaxNPrice 根据子类别、书名、页数小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2NameMinNPrice 根据子类别、书名、页数小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2NameMaxNPrice 根据子类别、书名、页数小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2NameMinNPrice 根据子类别、书名、页数小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2NameMaxNPrice 根据子类别、书名、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2NameMinNPrice 根据子类别、书名、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2NameMaxNPageCount 根据子类别、书名、价格大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2NameMinNPageCount 根据子类别、书名、价格大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2NameMaxNPageCount 根据子类别、书名、价格大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2NameMinNPageCount 根据子类别、书名、价格大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2NameMaxNPageCount 根据子类别、书名、价格小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2NameMinNPageCount 根据子类别、书名、价格小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2NameMaxNPageCount 根据子类别、书名、价格小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2NameMinNPageCount 根据子类别、书名、价格小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2NameMaxNPageCount 根据子类别、书名、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2NameMinNPageCount 根据子类别、书名、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2NameMinNPageCount 根据子类别、书名、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2NameMaxNPageCount 根据子类别、书名、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2NameMinNPageCount 根据子类别、书名、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2NameMaxNPageCount 根据子类别、书名、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2NameMinNPageCount 根据子类别、书名、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2NameMinNPageCount 根据子类别、书名、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2NameMinNPageCount 根据子类别、书名、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2NameMaxNPrice 根据子类别、书名、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2NameMinNPrice 根据子类别、书名、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2NameMaxNPrice 根据子类别、书名、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2NameMinNPrice 根据子类别、书名、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2NameMaxNPrice 根据子类别、书名、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2NameMinNPrice 根据子类别、书名、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2NameMaxNPrice 根据子类别、书名、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2NameMinNPrice 根据子类别、书名、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2NameMaxNPrice 根据子类别、书名、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2NameMinNPrice 根据子类别、书名、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithClass2MinNPrice 根据子类别、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithClass2MinNPrice 根据子类别、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithClass2MaxNPrice 根据子类别、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithClass2MinNPrice 根据子类别、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithClass2MaxNPrice 根据子类别、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithClass2MinNPrice 根据子类别、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithClass2MaxNPrice 根据子类别、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithClass2MinNPrice 根据子类别、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithClass2MaxNPrice 根据子类别、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithClass2MinNPrice 根据子类别、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithClass2MaxNPrice 根据子类别、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithClass2MinNPrice 根据子类别、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithClass2MaxNPrice 根据子类别、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithClass2MinNPrice 根据子类别、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithClass2MaxNPrice 根据子类别、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithClass2MinNPrice 根据子类别、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithClass2MaxNPrice 根据子类别、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithClass2MinNPrice 根据子类别、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithClass2MinNPrice 根据子类别、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithClass2MinNPrice 根据子类别、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2SeqMaxNPrice 根据子类别、编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithClass2SeqMinNPrice 根据子类别、编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2SeqMaxNPrice 根据子类别、编号、页数大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithClass2SeqMinNPrice 根据子类别、编号、页数大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2SeqMaxNPrice 根据子类别、编号、页数小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithClass2SeqMinNPrice 根据子类别、编号、页数小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2SeqMaxNPrice 根据子类别、编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithClass2SeqMinNPrice 根据子类别、编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2SeqMaxNPrice 根据子类别、编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithClass2SeqMinNPrice 根据子类别、编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithClass2MaxNPageCount 根据子类别、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithClass2MinNPageCount 根据子类别、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithClass2MaxNPageCount 根据子类别、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithClass2MinNPageCount 根据子类别、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithClass2MinNPageCount 根据子类别、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithClass2MinNPageCount 根据子类别、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithClass2MaxNPageCount 根据子类别、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithClass2MinNPageCount 根据子类别、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithClass2MaxNPageCount 根据子类别、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithClass2MinNPageCount 根据子类别、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithClass2MinNPageCount 根据子类别、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithClass2MinNPageCount 根据子类别、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2SeqMaxNPageCount 根据子类别、编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithClass2SeqMinNPageCount 根据子类别、编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2SeqMaxNPageCount 根据子类别、编号、价格大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithClass2SeqMinNPageCount 根据子类别、编号、价格大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2SeqMaxNPageCount 根据子类别、编号、价格小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithClass2SeqMinNPageCount 根据子类别、编号、价格小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2SeqMaxNPageCount 根据子类别、编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithClass2SeqMinNPageCount 根据子类别、编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2SeqMaxNPageCount 根据子类别、编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithClass2SeqMinNPageCount 根据子类别、编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2SeqMinNPageCount 根据子类别、编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2SeqMinNPageCount 根据子类别、编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithClass2SeqMinNPrice 根据子类别、编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2SeqMaxNPrice 根据子类别、编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithClass2SeqMinNPrice 根据子类别、编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2SeqMaxNPrice 根据子类别、编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithClass2SeqMinNPrice 根据子类别、编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithClass2SeqMinNPrice 根据子类别、编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithClass2SeqMinNPrice 根据子类别、编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithNameMaxNPrice 根据书名、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithNameMinNPrice 根据书名、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithNameMaxNPrice 根据书名、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithNameMinNPrice 根据书名、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithNameMaxNPrice 根据书名、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithNameMinNPrice 根据书名、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithNameMaxNPrice 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithNameMinNPrice 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithNameMaxNPrice 根据书名、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithNameMinNPrice 根据书名、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithNameMaxNPrice 根据书名、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithNameMinNPrice 根据书名、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithNameMaxNPrice 根据书名、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithNameMinNPrice 根据书名、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithNameMaxNPrice 根据书名、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithNameMinNPrice 根据书名、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithNameMaxNPrice 根据书名、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithNameMinNPrice 根据书名、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithNameMaxNPrice 根据书名、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithNameMinNPrice 根据书名、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithNameMaxNPrice 根据书名、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithNameMinNPrice 根据书名、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithNameMaxNPrice 根据书名、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithNameMinNPrice 根据书名、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithNameMaxNPrice 根据书名、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithNameMinNPrice 根据书名、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithNameMaxNPrice 根据书名、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithNameMinNPrice 根据书名、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithNameMaxNPrice 根据书名、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithNameMinNPrice 根据书名、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithNameMaxNPrice 根据书名、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithNameMinNPrice 根据书名、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithNameMaxNPrice 根据书名、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithNameMinNPrice 根据书名、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithNameMaxNPrice 根据书名、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithNameMinNPrice 根据书名、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithNameMaxNPrice 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithNameMinNPrice 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithNameSeqMaxNPrice 根据书名、编号、页数大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteWithNameSeqMinNPrice 根据书名、编号、页数大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// size int 前N条记录
func RangeBooksByPageCountGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, pageCountGte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithNameSeqMaxNPrice 根据书名、编号、页数大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtWithNameSeqMinNPrice 根据书名、编号、页数大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
// size int 前N条记录
func RangeBooksByPageCountGtWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, pageCountGt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithNameSeqMaxNPrice 根据书名、编号、页数小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtWithNameSeqMinNPrice 根据书名、编号、页数小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
// size int 前N条记录
func RangeBooksByPageCountLtWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, pageCountLt int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithNameSeqMaxNPrice 根据书名、编号、页数小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteWithNameSeqMinNPrice 根据书名、编号、页数小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountLteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithNameSeqMaxNPrice 根据书名、编号、页数大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteWithNameSeqMinNPrice 根据书名、编号、页数大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithNameMaxNPageCount 根据书名、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithNameMinNPageCount 根据书名、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithNameMaxNPageCount 根据书名、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithNameMinNPageCount 根据书名、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithNameMinNPageCount 根据书名、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithNameMinNPageCount 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithNameMinNPageCount 根据书名、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithNameMaxNPageCount 根据书名、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithNameMinNPageCount 根据书名、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithNameMaxNPageCount 根据书名、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithNameMinNPageCount 根据书名、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithNameMaxNPageCount 根据书名、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithNameMinNPageCount 根据书名、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithNameMaxNPageCount 根据书名、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithNameMinNPageCount 根据书名、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithNameMinNPageCount 根据书名、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithNameMaxNPageCount 根据书名、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithNameMinNPageCount 根据书名、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithNameMaxNPageCount 根据书名、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithNameMinNPageCount 根据书名、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithNameMaxNPageCount 根据书名、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithNameMinNPageCount 根据书名、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithNameMaxNPageCount 根据书名、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithNameMinNPageCount 根据书名、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithNameMinNPageCount 根据书名、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithNameMaxNPageCount 根据书名、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithNameMinNPageCount 根据书名、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithNameMaxNPageCount 根据书名、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithNameMinNPageCount 根据书名、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithNameMinNPageCount 根据书名、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithNameMinNPageCount 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithNameSeqMaxNPageCount 根据书名、编号、价格大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteWithNameSeqMinNPageCount 根据书名、编号、价格大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// size int 前N条记录
func RangeBooksByPriceGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, priceGte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithNameSeqMaxNPageCount 根据书名、编号、价格大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtWithNameSeqMinNPageCount 根据书名、编号、价格大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGt float64 价格大于
// size int 前N条记录
func RangeBooksByPriceGtWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, priceGt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithNameSeqMaxNPageCount 根据书名、编号、价格小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtWithNameSeqMinNPageCount 根据书名、编号、价格小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// priceLt float64 价格小于
// size int 前N条记录
func RangeBooksByPriceLtWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, priceLt float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithNameSeqMaxNPageCount 根据书名、编号、价格小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteWithNameSeqMinNPageCount 根据书名、编号、价格小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceLteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithNameSeqMaxNPageCount 根据书名、编号、价格大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteWithNameSeqMinNPageCount 根据书名、编号、价格大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, priceGte, priceLte float64, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameSeqMaxNPageCount 根据书名、编号、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameSeqMinNPageCount 根据书名、编号、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameSeqMaxNPageCount 根据书名、编号、发布日期大于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameSeqMinNPageCount 根据书名、编号、发布日期大于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameSeqMaxNPageCount 根据书名、编号、发布日期小于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameSeqMinNPageCount 根据书名、编号、发布日期小于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameSeqMaxNPageCount 根据书名、编号、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameSeqMinNPageCount 根据书名、编号、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameSeqMaxNPageCount 根据书名、编号、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameSeqMinNPageCount 根据书名、编号、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameSeqMaxNPrice 根据书名、编号、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteWithNameSeqMinNPrice 根据书名、编号、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameSeqMaxNPrice 根据书名、编号、发布日期大于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGtWithNameSeqMinNPrice 根据书名、编号、发布日期大于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByReleaseDateGtWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameSeqMaxNPrice 根据书名、编号、发布日期小于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLtWithNameSeqMinNPrice 根据书名、编号、发布日期小于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByReleaseDateLtWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameSeqMaxNPrice 根据书名、编号、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateLteWithNameSeqMinNPrice 根据书名、编号、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateLteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameSeqMaxNPrice 根据书名、编号、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByReleaseDateGteLteWithNameSeqMinNPrice 根据书名、编号、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByReleaseDateGteLteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithSeqMaxNPrice 根据编号、页数大于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGtWithSeqMinNPrice 根据编号、页数大于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithSeqMaxNPrice 根据编号、页数大于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLtWithSeqMinNPrice 根据编号、页数大于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateLteWithSeqMinNPrice 根据编号、页数大于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteReleaseDateGteLteWithSeqMinNPrice 根据编号、页数大于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteWithSeqMinNPrice 根据编号、页数大于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithSeqMaxNPrice 根据编号、页数大于、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGtWithSeqMinNPrice 根据编号、页数大于、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithSeqMaxNPrice 根据编号、页数大于、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLtWithSeqMinNPrice 根据编号、页数大于、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithSeqMaxNPrice 根据编号、页数大于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateLteWithSeqMinNPrice 根据编号、页数大于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithSeqMaxNPrice 根据编号、页数大于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtReleaseDateGteLteWithSeqMinNPrice 根据编号、页数大于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGtReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteWithSeqMinNPrice 根据编号、页数小于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithSeqMaxNPrice 根据编号、页数小于、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGtWithSeqMinNPrice 根据编号、页数小于、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithSeqMaxNPrice 根据编号、页数小于、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLtWithSeqMinNPrice 根据编号、页数小于、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithSeqMaxNPrice 根据编号、页数小于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateLteWithSeqMinNPrice 根据编号、页数小于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithSeqMaxNPrice 根据编号、页数小于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtReleaseDateGteLteWithSeqMinNPrice 根据编号、页数小于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLtReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteWithSeqMinNPrice 根据编号、页数小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithSeqMaxNPrice 根据编号、页数小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGtWithSeqMinNPrice 根据编号、页数小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithSeqMaxNPrice 根据编号、页数小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLtWithSeqMinNPrice 根据编号、页数小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateLteWithSeqMinNPrice 根据编号、页数小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLteReleaseDateGteLteWithSeqMinNPrice 根据编号、页数小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountLteReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期大于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期大于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期大于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGtWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期大于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期小于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLtWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期小于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLtWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateLteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGteLteReleaseDateGteLteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPageCountGteLteReleaseDateGteLteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGtWithSeqMinNPageCount 根据编号、价格大于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLtWithSeqMinNPageCount 根据编号、价格大于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateLteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteReleaseDateGteLteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithSeqMaxNPageCount 根据编号、价格大于、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGtWithSeqMinNPageCount 根据编号、价格大于、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithSeqMaxNPageCount 根据编号、价格大于、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLtWithSeqMinNPageCount 根据编号、价格大于、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithSeqMaxNPageCount 根据编号、价格大于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateLteWithSeqMinNPageCount 根据编号、价格大于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithSeqMaxNPageCount 根据编号、价格大于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGtReleaseDateGteLteWithSeqMinNPageCount 根据编号、价格大于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGtReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithSeqMaxNPageCount 根据编号、价格小于、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGtWithSeqMinNPageCount 根据编号、价格小于、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithSeqMaxNPageCount 根据编号、价格小于、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLtWithSeqMinNPageCount 根据编号、价格小于、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithSeqMaxNPageCount 根据编号、价格小于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateLteWithSeqMinNPageCount 根据编号、价格小于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithSeqMaxNPageCount 根据编号、价格小于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLtReleaseDateGteLteWithSeqMinNPageCount 根据编号、价格小于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLtReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGtWithSeqMinNPageCount 根据编号、价格小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLtWithSeqMinNPageCount 根据编号、价格小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateLteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLteReleaseDateGteLteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceLteReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期大于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期大于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期大于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGtWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期大于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期小于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLtWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期小于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLtWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLt time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateLteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGteLteReleaseDateGteLteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// size int 前N条记录
func RangeBooksByPriceGteLteReleaseDateGteLteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

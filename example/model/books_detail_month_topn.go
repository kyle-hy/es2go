// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MonthBooksByReleaseDateGteMaxNPageCount 根据发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteMaxNPageCount(es *elasticsearch.Client, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteMinNPageCount 根据发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteMinNPageCount(es *elasticsearch.Client, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteMaxNPrice 根据发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteMaxNPrice(es *elasticsearch.Client, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteMinNPrice 根据发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteMinNPrice(es *elasticsearch.Client, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextMaxNPageCount 根据全文本、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextMinNPageCount 根据全文本、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextMaxNPrice 根据全文本、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextMinNPrice 根据全文本、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorMaxNPageCount 根据作者、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorMinNPageCount 根据作者、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorMaxNPrice 根据作者、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorMinNPrice 根据作者、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassMaxNPageCount 根据类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassMinNPageCount 根据类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassMaxNPrice 根据类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassMinNPrice 根据类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2MaxNPageCount 根据子类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2MinNPageCount 根据子类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2MaxNPrice 根据子类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2MinNPrice 根据子类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameMaxNPageCount 根据书名、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameMinNPageCount 根据书名、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameMaxNPrice 根据书名、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameMinNPrice 根据书名、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteMaxNPrice 根据页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteMinNPrice 根据页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteMaxNPrice 根据页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteMinNPrice 根据页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteMaxNPrice 根据页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteMinNPrice 根据页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteMaxNPrice 根据页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteMinNPrice 根据页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteMaxNPrice 根据页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteMinNPrice 根据页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteMaxNPageCount 根据价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteMinNPageCount 根据价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteMaxNPageCount 根据价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteMinNPageCount 根据价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteMaxNPageCount 根据价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteMinNPageCount 根据价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteMaxNPageCount 根据价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteMinNPageCount 根据价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteMaxNPageCount 根据价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteMinNPageCount 根据价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithSeqMaxNPageCount 根据编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithSeqMinNPageCount 根据编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithSeqMaxNPrice 根据编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithSeqMinNPrice 根据编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClassMinNPrice 根据全文本、类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextNameMinNPrice 根据全文本、书名、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClassMinNPageCount 根据作者、类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClassMaxNPrice 根据作者、类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClassMinNPrice 根据作者、类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorNameMinNPageCount 根据作者、书名、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorNameMaxNPrice 根据作者、书名、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorNameMinNPrice 根据作者、书名、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithAuthorSeqMinNPrice 根据作者、编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassClass2MinNPageCount 根据类别、子类别、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassClass2MaxNPrice 根据类别、子类别、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassClass2MinNPrice 根据类别、子类别、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassNameMaxNPageCount 根据类别、书名、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassNameMinNPageCount 根据类别、书名、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassNameMaxNPrice 根据类别、书名、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassNameMinNPrice 根据类别、书名、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithClassMaxNPrice 根据类别、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithClassMinNPrice 根据类别、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithClassMaxNPrice 根据类别、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithClassMinNPrice 根据类别、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithClassMaxNPrice 根据类别、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithClassMinNPrice 根据类别、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithClassMinNPageCount 根据类别、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithClassMinNPageCount 根据类别、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithClassMinNPageCount 根据类别、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassSeqMaxNPageCount 根据类别、编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassSeqMinNPageCount 根据类别、编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassSeqMaxNPrice 根据类别、编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClassSeqMinNPrice 根据类别、编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2NameMinNPageCount 根据子类别、书名、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2NameMaxNPrice 根据子类别、书名、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2NameMinNPrice 根据子类别、书名、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithClass2SeqMinNPrice 根据子类别、编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithNameMaxNPrice 根据书名、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithNameMinNPrice 根据书名、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithNameMaxNPrice 根据书名、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithNameMinNPrice 根据书名、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithNameMaxNPrice 根据书名、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithNameMinNPrice 根据书名、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithNameMinNPageCount 根据书名、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithNameMinNPageCount 根据书名、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithNameMinNPageCount 根据书名、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameSeqMaxNPageCount 根据书名、编号、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameSeqMinNPageCount 根据书名、编号、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameSeqMaxNPrice 根据书名、编号、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByReleaseDateGteWithNameSeqMinNPrice 根据书名、编号、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByReleaseDateGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGtReleaseDateGteWithSeqMinNPrice 根据编号、页数大于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLtReleaseDateGteWithSeqMinNPrice 根据编号、页数小于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountLteReleaseDateGteWithSeqMinNPrice 根据编号、页数小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期为近几个月检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGtReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLtReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// MonthBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几个月检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNMonth int 发布日期为近几个月
// size int 前N条记录
func MonthBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNMonth, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dM/M", releaseDateNMonth), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// YearHistReleaseDateOfBooksByAllText 根据全文本检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
func YearHistReleaseDateOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthor 根据作者检索books表并按发布日期统计每年的直方图分布
// author string 作者
func YearHistReleaseDateOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass 根据类别检索books表并按发布日期统计每年的直方图分布
// class string 类别
func YearHistReleaseDateOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2 根据子类别检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
func YearHistReleaseDateOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByName 根据书名检索books表并按发布日期统计每年的直方图分布
// name string 书名
func YearHistReleaseDateOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPageCount 根据页数检索books表并按发布日期统计每年的直方图分布
// pageCount int64 页数
func YearHistReleaseDateOfBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPrice 根据价格检索books表并按发布日期统计每年的直方图分布
// price float64 价格
func YearHistReleaseDateOfBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksBySeq 根据编号检索books表并按发布日期统计每年的直方图分布
// seq string 编号
func YearHistReleaseDateOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthor 根据全文本、作者检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
func YearHistReleaseDateOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass 根据全文本、类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
func YearHistReleaseDateOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2 根据全文本、子类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
func YearHistReleaseDateOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextName 根据全文本、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
func YearHistReleaseDateOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPageCount 根据全文本、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPrice 根据全文本、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextSeq 根据全文本、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass 根据作者、类别检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
func YearHistReleaseDateOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2 根据作者、子类别检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
func YearHistReleaseDateOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorName 根据作者、书名检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
func YearHistReleaseDateOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPageCount 根据作者、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPrice 根据作者、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorSeq 根据作者、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2 根据类别、子类别检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
func YearHistReleaseDateOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassName 根据类别、书名检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
func YearHistReleaseDateOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPageCount 根据类别、页数检索books表并按发布日期统计每年的直方图分布
// class string 类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPrice 根据类别、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// price float64 价格
func YearHistReleaseDateOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassSeq 根据类别、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// seq string 编号
func YearHistReleaseDateOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2Name 根据子类别、书名检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2PageCount 根据子类别、页数检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2Price 根据子类别、价格检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2Seq 根据子类别、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePageCount 根据书名、页数检索books表并按发布日期统计每年的直方图分布
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePrice 根据书名、价格检索books表并按发布日期统计每年的直方图分布
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNameSeq 根据书名、编号检索books表并按发布日期统计每年的直方图分布
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPageCountPrice 根据页数、价格检索books表并按发布日期统计每年的直方图分布
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPageCountSeq 根据页数、编号检索books表并按发布日期统计每年的直方图分布
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPriceSeq 根据价格、编号检索books表并按发布日期统计每年的直方图分布
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
func YearHistReleaseDateOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
func YearHistReleaseDateOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// name string 书名
func YearHistReleaseDateOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
func YearHistReleaseDateOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// name string 书名
func YearHistReleaseDateOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPageCountPrice 根据全文本、页数、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextPageCountPrice(es *elasticsearch.Client, allText string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
func YearHistReleaseDateOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassName 根据作者、类别、书名检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// name string 书名
func YearHistReleaseDateOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPageCountPrice 根据作者、页数、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorPageCountPrice(es *elasticsearch.Client, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2Price 根据类别、子类别、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNamePageCount 根据类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNamePrice 根据类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNameSeq 根据类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPageCountPrice 根据类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPriceSeq 根据类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2PageCountPrice 根据子类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByClass2PageCountPrice(es *elasticsearch.Client, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePageCountPrice 根据书名、页数、价格检索books表并按发布日期统计每年的直方图分布
// name string 书名
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByNamePageCountPrice(es *elasticsearch.Client, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表并按发布日期统计每年的直方图分布
// name string 书名
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePriceSeq 根据书名、价格、编号检索books表并按发布日期统计每年的直方图分布
// name string 书名
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByPageCountPriceSeq 根据页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByPageCountPriceSeq(es *elasticsearch.Client, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func YearHistReleaseDateOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func YearHistReleaseDateOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorPageCountPrice 根据全文本、作者、页数、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextAuthorPageCountPrice(es *elasticsearch.Client, allText, author string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassPageCountPrice 根据全文本、类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClassPageCountPrice(es *elasticsearch.Client, allText, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2PageCountPrice 根据全文本、子类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextClass2PageCountPrice(es *elasticsearch.Client, allText, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNamePageCountPrice 根据全文本、书名、页数、价格检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAllTextNamePageCountPrice(es *elasticsearch.Client, allText, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAllTextPageCountPriceSeq 根据全文本、页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// allText string 全文本
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAllTextPageCountPriceSeq(es *elasticsearch.Client, allText string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func YearHistReleaseDateOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassPageCountPrice 根据作者、类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClassPageCountPrice(es *elasticsearch.Client, author, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2PageCountPrice 根据作者、子类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorClass2PageCountPrice(es *elasticsearch.Client, author, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNamePageCountPrice 根据作者、书名、页数、价格检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByAuthorNamePageCountPrice(es *elasticsearch.Client, author, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByAuthorPageCountPriceSeq 根据作者、页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// author string 作者
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByAuthorPageCountPriceSeq(es *elasticsearch.Client, author string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func YearHistReleaseDateOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func YearHistReleaseDateOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func YearHistReleaseDateOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2PageCountPrice 根据类别、子类别、页数、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByClassClass2PageCountPrice(es *elasticsearch.Client, class, class2 string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNamePageCountPrice 根据类别、书名、页数、价格检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByClassNamePageCountPrice(es *elasticsearch.Client, class, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClassPageCountPriceSeq 根据类别、页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// class string 类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClassPageCountPriceSeq(es *elasticsearch.Client, class string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NamePageCountPrice 根据子类别、书名、页数、价格检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// price float64 价格
func YearHistReleaseDateOfBooksByClass2NamePageCountPrice(es *elasticsearch.Client, class2, name string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func YearHistReleaseDateOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByClass2PageCountPriceSeq 根据子类别、页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// class2 string 子类别
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByClass2PageCountPriceSeq(es *elasticsearch.Client, class2 string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// YearHistReleaseDateOfBooksByNamePageCountPriceSeq 根据书名、页数、价格、编号检索books表并按发布日期统计每年的直方图分布
// name string 书名
// pageCount int64 页数
// price float64 价格
// seq string 编号
func YearHistReleaseDateOfBooksByNamePageCountPriceSeq(es *elasticsearch.Client, name string, pageCount int64, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("releaseDate", eq.WithCalendarInterval("year"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// MatchBooksByAuthorFilterClass 以class为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// author string author
func MatchBooksByAuthorFilterClass(es *elasticsearch.Client, class string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClass 以class为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// name string 书名
func MatchBooksByNameFilterClass(es *elasticsearch.Client, class string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterSeq 以seq为过滤条件对author进行检索查询books的详细数据列表和总数量
// seq string seq
// author string author
func MatchBooksByAuthorFilterSeq(es *elasticsearch.Client, seq string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterSeq 以seq为过滤条件对书名进行检索查询books的详细数据列表和总数量
// seq string seq
// name string 书名
func MatchBooksByNameFilterSeq(es *elasticsearch.Client, seq string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterPageCount 以page_count为过滤条件对author进行检索查询books的详细数据列表和总数量
// pageCount int64 page_count
// author string author
func MatchBooksByAuthorFilterPageCount(es *elasticsearch.Client, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterPageCount 以page_count为过滤条件对书名进行检索查询books的详细数据列表和总数量
// pageCount int64 page_count
// name string 书名
func MatchBooksByNameFilterPageCount(es *elasticsearch.Client, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterPrice 以价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// price float64 价格
// author string author
func MatchBooksByAuthorFilterPrice(es *elasticsearch.Client, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterPrice 以价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// price float64 价格
// name string 书名
func MatchBooksByNameFilterPrice(es *elasticsearch.Client, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassSeq 以class、seq为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// author string author
func MatchBooksByAuthorFilterClassSeq(es *elasticsearch.Client, class string, seq string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassSeq 以class、seq为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// name string 书名
func MatchBooksByNameFilterClassSeq(es *elasticsearch.Client, class string, seq string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassPageCount 以class、page_count为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// author string author
func MatchBooksByAuthorFilterClassPageCount(es *elasticsearch.Client, class string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassPageCount 以class、page_count为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// name string 书名
func MatchBooksByNameFilterClassPageCount(es *elasticsearch.Client, class string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassPrice 以class、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// price float64 价格
// author string author
func MatchBooksByAuthorFilterClassPrice(es *elasticsearch.Client, class string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassPrice 以class、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// price float64 价格
// name string 书名
func MatchBooksByNameFilterClassPrice(es *elasticsearch.Client, class string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterSeqPageCount 以seq、page_count为过滤条件对author进行检索查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
// author string author
func MatchBooksByAuthorFilterSeqPageCount(es *elasticsearch.Client, seq string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterSeqPageCount 以seq、page_count为过滤条件对书名进行检索查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
// name string 书名
func MatchBooksByNameFilterSeqPageCount(es *elasticsearch.Client, seq string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterSeqPrice 以seq、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// seq string seq
// price float64 价格
// author string author
func MatchBooksByAuthorFilterSeqPrice(es *elasticsearch.Client, seq string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterSeqPrice 以seq、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// seq string seq
// price float64 价格
// name string 书名
func MatchBooksByNameFilterSeqPrice(es *elasticsearch.Client, seq string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterPageCountPrice 以page_count、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// author string author
func MatchBooksByAuthorFilterPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterPageCountPrice 以page_count、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
// name string 书名
func MatchBooksByNameFilterPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassSeqPageCount 以class、seq、page_count为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
// author string author
func MatchBooksByAuthorFilterClassSeqPageCount(es *elasticsearch.Client, class string, seq string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassSeqPageCount 以class、seq、page_count为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
// name string 书名
func MatchBooksByNameFilterClassSeqPageCount(es *elasticsearch.Client, class string, seq string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassSeqPrice 以class、seq、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// price float64 价格
// author string author
func MatchBooksByAuthorFilterClassSeqPrice(es *elasticsearch.Client, class string, seq string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassSeqPrice 以class、seq、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// price float64 价格
// name string 书名
func MatchBooksByNameFilterClassSeqPrice(es *elasticsearch.Client, class string, seq string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassPageCountPrice 以class、page_count、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
// author string author
func MatchBooksByAuthorFilterClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassPageCountPrice 以class、page_count、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
// name string 书名
func MatchBooksByNameFilterClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterSeqPageCountPrice 以seq、page_count、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
// price float64 价格
// author string author
func MatchBooksByAuthorFilterSeqPageCountPrice(es *elasticsearch.Client, seq string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterSeqPageCountPrice 以seq、page_count、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
// price float64 价格
// name string 书名
func MatchBooksByNameFilterSeqPageCountPrice(es *elasticsearch.Client, seq string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByAuthorFilterClassSeqPageCountPrice 以class、seq、page_count、价格为过滤条件对author进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
// price float64 价格
// author string author
func MatchBooksByAuthorFilterClassSeqPageCountPrice(es *elasticsearch.Client, class string, seq string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// MatchBooksByNameFilterClassSeqPageCountPrice 以class、seq、page_count、价格为过滤条件对书名进行检索查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
// price float64 价格
// name string 书名
func MatchBooksByNameFilterClassSeqPageCountPrice(es *elasticsearch.Client, class string, seq string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

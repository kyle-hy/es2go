// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// QueryBooksByAuthorFilterClass 以class为过滤条件对author进行检索查询books的详细数据
// class string class
// author string author
func QueryBooksByAuthorFilterClass(es *elasticsearch.Client, class string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClass 以class为过滤条件对书名进行检索查询books的详细数据
// class string class
// name string 书名
func QueryBooksByNameFilterClass(es *elasticsearch.Client, class string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterSeq 以seq为过滤条件对author进行检索查询books的详细数据
// seq string seq
// author string author
func QueryBooksByAuthorFilterSeq(es *elasticsearch.Client, seq string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterSeq 以seq为过滤条件对书名进行检索查询books的详细数据
// seq string seq
// name string 书名
func QueryBooksByNameFilterSeq(es *elasticsearch.Client, seq string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterPageCount 以page_count为过滤条件对author进行检索查询books的详细数据
// pageCount int64 page_count
// author string author
func QueryBooksByAuthorFilterPageCount(es *elasticsearch.Client, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterPageCount 以page_count为过滤条件对书名进行检索查询books的详细数据
// pageCount int64 page_count
// name string 书名
func QueryBooksByNameFilterPageCount(es *elasticsearch.Client, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterPrice 以价格为过滤条件对author进行检索查询books的详细数据
// price float64 价格
// author string author
func QueryBooksByAuthorFilterPrice(es *elasticsearch.Client, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterPrice 以价格为过滤条件对书名进行检索查询books的详细数据
// price float64 价格
// name string 书名
func QueryBooksByNameFilterPrice(es *elasticsearch.Client, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassSeq 以class、seq为过滤条件对author进行检索查询books的详细数据
// class string class
// seq string seq
// author string author
func QueryBooksByAuthorFilterClassSeq(es *elasticsearch.Client, class string, seq string, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassSeq 以class、seq为过滤条件对书名进行检索查询books的详细数据
// class string class
// seq string seq
// name string 书名
func QueryBooksByNameFilterClassSeq(es *elasticsearch.Client, class string, seq string, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassPageCount 以class、page_count为过滤条件对author进行检索查询books的详细数据
// class string class
// pageCount int64 page_count
// author string author
func QueryBooksByAuthorFilterClassPageCount(es *elasticsearch.Client, class string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassPageCount 以class、page_count为过滤条件对书名进行检索查询books的详细数据
// class string class
// pageCount int64 page_count
// name string 书名
func QueryBooksByNameFilterClassPageCount(es *elasticsearch.Client, class string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassPrice 以class、价格为过滤条件对author进行检索查询books的详细数据
// class string class
// price float64 价格
// author string author
func QueryBooksByAuthorFilterClassPrice(es *elasticsearch.Client, class string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassPrice 以class、价格为过滤条件对书名进行检索查询books的详细数据
// class string class
// price float64 价格
// name string 书名
func QueryBooksByNameFilterClassPrice(es *elasticsearch.Client, class string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterSeqPageCount 以seq、page_count为过滤条件对author进行检索查询books的详细数据
// seq string seq
// pageCount int64 page_count
// author string author
func QueryBooksByAuthorFilterSeqPageCount(es *elasticsearch.Client, seq string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterSeqPageCount 以seq、page_count为过滤条件对书名进行检索查询books的详细数据
// seq string seq
// pageCount int64 page_count
// name string 书名
func QueryBooksByNameFilterSeqPageCount(es *elasticsearch.Client, seq string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterSeqPrice 以seq、价格为过滤条件对author进行检索查询books的详细数据
// seq string seq
// price float64 价格
// author string author
func QueryBooksByAuthorFilterSeqPrice(es *elasticsearch.Client, seq string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterSeqPrice 以seq、价格为过滤条件对书名进行检索查询books的详细数据
// seq string seq
// price float64 价格
// name string 书名
func QueryBooksByNameFilterSeqPrice(es *elasticsearch.Client, seq string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterPageCountPrice 以page_count、价格为过滤条件对author进行检索查询books的详细数据
// pageCount int64 page_count
// price float64 价格
// author string author
func QueryBooksByAuthorFilterPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterPageCountPrice 以page_count、价格为过滤条件对书名进行检索查询books的详细数据
// pageCount int64 page_count
// price float64 价格
// name string 书名
func QueryBooksByNameFilterPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassSeqPageCount 以class、seq、page_count为过滤条件对author进行检索查询books的详细数据
// class string class
// seq string seq
// pageCount int64 page_count
// author string author
func QueryBooksByAuthorFilterClassSeqPageCount(es *elasticsearch.Client, class string, seq string, pageCount int64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassSeqPageCount 以class、seq、page_count为过滤条件对书名进行检索查询books的详细数据
// class string class
// seq string seq
// pageCount int64 page_count
// name string 书名
func QueryBooksByNameFilterClassSeqPageCount(es *elasticsearch.Client, class string, seq string, pageCount int64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassSeqPrice 以class、seq、价格为过滤条件对author进行检索查询books的详细数据
// class string class
// seq string seq
// price float64 价格
// author string author
func QueryBooksByAuthorFilterClassSeqPrice(es *elasticsearch.Client, class string, seq string, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassSeqPrice 以class、seq、价格为过滤条件对书名进行检索查询books的详细数据
// class string class
// seq string seq
// price float64 价格
// name string 书名
func QueryBooksByNameFilterClassSeqPrice(es *elasticsearch.Client, class string, seq string, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassPageCountPrice 以class、page_count、价格为过滤条件对author进行检索查询books的详细数据
// class string class
// pageCount int64 page_count
// price float64 价格
// author string author
func QueryBooksByAuthorFilterClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassPageCountPrice 以class、page_count、价格为过滤条件对书名进行检索查询books的详细数据
// class string class
// pageCount int64 page_count
// price float64 价格
// name string 书名
func QueryBooksByNameFilterClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterSeqPageCountPrice 以seq、page_count、价格为过滤条件对author进行检索查询books的详细数据
// seq string seq
// pageCount int64 page_count
// price float64 价格
// author string author
func QueryBooksByAuthorFilterSeqPageCountPrice(es *elasticsearch.Client, seq string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterSeqPageCountPrice 以seq、page_count、价格为过滤条件对书名进行检索查询books的详细数据
// seq string seq
// pageCount int64 page_count
// price float64 价格
// name string 书名
func QueryBooksByNameFilterSeqPageCountPrice(es *elasticsearch.Client, seq string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByAuthorFilterClassSeqPageCountPrice 以class、seq、page_count、价格为过滤条件对author进行检索查询books的详细数据
// class string class
// seq string seq
// pageCount int64 page_count
// price float64 价格
// author string author
func QueryBooksByAuthorFilterClassSeqPageCountPrice(es *elasticsearch.Client, class string, seq string, pageCount int64, price float64, author string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("author", author),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByNameFilterClassSeqPageCountPrice 以class、seq、page_count、价格为过滤条件对书名进行检索查询books的详细数据
// class string class
// seq string seq
// pageCount int64 page_count
// price float64 价格
// name string 书名
func QueryBooksByNameFilterClassSeqPageCountPrice(es *elasticsearch.Client, class string, seq string, pageCount int64, price float64, name string) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	matches := []eq.Map{
		eq.Match("name", name),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters), eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

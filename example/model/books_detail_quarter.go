// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// QuarterBooksByReleaseDateGte 从Books查找release_date为近几个季度的详细数据列表和总数量
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthor 根据author从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClass 根据class从Books查找release_date为近几个季度的详细数据列表和总数量
// class string class
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithClass(es *elasticsearch.Client, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithName 根据书名从Books查找release_date为近几个季度的详细数据列表和总数量
// name string 书名
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithName(es *elasticsearch.Client, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGte 从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGte 从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGte 从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGte 从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGte 从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGte 从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGte 从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGte 从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGte 从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGte 从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithSeq 根据seq从Books查找release_date为近几个季度的详细数据列表和总数量
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClass 根据author、class从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorName 根据author、书名从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthor 根据author从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthor 根据author从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthor 根据author从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthor 根据author从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthor 根据author从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthor 根据author从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthor 根据author从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorSeq 根据author、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassName 根据class、书名从Books查找release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClass 根据class从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClass 根据class从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClass 根据class从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClass 根据class从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClass 根据class从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClass 根据class从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClass 根据class从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClass 根据class从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClass 根据class从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassSeq 根据class、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithName 根据书名从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithName 根据书名从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithName 根据书名从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithName 根据书名从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithName 根据书名从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithName 根据书名从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithName 根据书名从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithName 根据书名从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithName 根据书名从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithNameSeq 根据书名、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteReleaseDateGte 从Books查找page_count大于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGtReleaseDateGte 从Books查找page_count大于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLtReleaseDateGte 从Books查找page_count大于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLteReleaseDateGte 从Books查找page_count大于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteLteReleaseDateGte 从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteReleaseDateGte 从Books查找page_count大于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGtReleaseDateGte 从Books查找page_count大于、价格大于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLtReleaseDateGte 从Books查找page_count大于、价格小于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLteReleaseDateGte 从Books查找page_count大于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteLteReleaseDateGte 从Books查找page_count大于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteReleaseDateGte 从Books查找page_count小于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGtReleaseDateGte 从Books查找page_count小于、价格大于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLtReleaseDateGte 从Books查找page_count小于、价格小于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLteReleaseDateGte 从Books查找page_count小于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteLteReleaseDateGte 从Books查找page_count小于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteReleaseDateGte 从Books查找page_count小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGtReleaseDateGte 从Books查找page_count小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLtReleaseDateGte 从Books查找page_count小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLteReleaseDateGte 从Books查找page_count小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteLteReleaseDateGte 从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGtReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLtReleaseDateGte 从Books查找page_count大于等于和小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLtReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte 从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithSeq 根据seq从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithSeq 根据seq从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithSeq 根据seq从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithSeq 根据seq从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithSeq 根据seq从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithSeq 根据seq从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithSeq 根据seq从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassName 根据author、class、书名从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// name string 书名
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorClassName(es *elasticsearch.Client, author string, class string, name string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthorClass 根据author、class从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthorClass 根据author、class从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthorClass 根据author、class从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthorClass 根据author、class从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorClass 根据author、class从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthorClass 根据author、class从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthorClass 根据author、class从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthorClass 根据author、class从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthorClass 根据author、class从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthorClass 根据author、class从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthorClass(es *elasticsearch.Client, author string, class string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorClassSeq 根据author、class、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// class string class
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorClassSeq(es *elasticsearch.Client, author string, class string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthorName 根据author、书名从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthorName 根据author、书名从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthorName 根据author、书名从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthorName 根据author、书名从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorName 根据author、书名从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthorName 根据author、书名从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthorName 根据author、书名从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthorName 根据author、书名从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthorName 根据author、书名从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthorName 根据author、书名从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthorName(es *elasticsearch.Client, author string, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithAuthorNameSeq 根据author、书名、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// author string author
// name string 书名
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithAuthorNameSeq(es *elasticsearch.Client, author string, name string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGtReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLtReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteReleaseDateGteWithAuthor 根据author从Books查找page_count大于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGtReleaseDateGteWithAuthor 根据author从Books查找page_count大于、价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLtReleaseDateGteWithAuthor 根据author从Books查找page_count大于、价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteReleaseDateGteWithAuthor 根据author从Books查找page_count小于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGtReleaseDateGteWithAuthor 根据author从Books查找page_count小于、价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLtReleaseDateGteWithAuthor 根据author从Books查找page_count小于、价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLteReleaseDateGteWithAuthor 根据author从Books查找page_count小于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count小于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGtReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLtReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLteReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithAuthor 根据author从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithAuthorSeq 根据author、seq从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithAuthorSeq 根据author、seq从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithAuthorSeq 根据author、seq从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithAuthorSeq 根据author、seq从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithAuthorSeq 根据author、seq从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// author string author
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithAuthorSeq(es *elasticsearch.Client, author string, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClassName 根据class、书名从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClassName 根据class、书名从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClassName 根据class、书名从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClassName 根据class、书名从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClassName 根据class、书名从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClassName 根据class、书名从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClassName 根据class、书名从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClassName 根据class、书名从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClassName 根据class、书名从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClassName 根据class、书名从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithClassName(es *elasticsearch.Client, class string, name string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByReleaseDateGteWithClassNameSeq 根据class、书名、seq从Books查找release_date为近几个季度的详细数据列表和总数量
// class string class
// name string 书名
// seq string seq
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByReleaseDateGteWithClassNameSeq(es *elasticsearch.Client, class string, name string, seq string, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteReleaseDateGteWithClass 根据class从Books查找page_count大于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGtReleaseDateGteWithClass 根据class从Books查找page_count大于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLtReleaseDateGteWithClass 根据class从Books查找page_count大于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLteReleaseDateGteWithClass 根据class从Books查找page_count大于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithClass 根据class从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteReleaseDateGteWithClass 根据class从Books查找page_count大于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGtReleaseDateGteWithClass 根据class从Books查找page_count大于、价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLtReleaseDateGteWithClass 根据class从Books查找page_count大于、价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLteReleaseDateGteWithClass 根据class从Books查找page_count大于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithClass 根据class从Books查找page_count大于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteReleaseDateGteWithClass 根据class从Books查找page_count小于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGtReleaseDateGteWithClass 根据class从Books查找page_count小于、价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLtReleaseDateGteWithClass 根据class从Books查找page_count小于、价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLteReleaseDateGteWithClass 根据class从Books查找page_count小于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithClass 根据class从Books查找page_count小于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteReleaseDateGteWithClass 根据class从Books查找page_count小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGtReleaseDateGteWithClass 根据class从Books查找page_count小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLtReleaseDateGteWithClass 根据class从Books查找page_count小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLteReleaseDateGteWithClass 根据class从Books查找page_count小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithClass 根据class从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithClass 根据class从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithClassSeq 根据class、seq从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithClassSeq 根据class、seq从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithClassSeq 根据class、seq从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithClassSeq 根据class、seq从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithClassSeq 根据class、seq从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithClassSeq 根据class、seq从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithClassSeq 根据class、seq从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithClassSeq 根据class、seq从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithClassSeq 根据class、seq从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithClassSeq 根据class、seq从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// class string class
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithClassSeq(es *elasticsearch.Client, class string, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteReleaseDateGteWithName 根据书名从Books查找page_count大于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGtReleaseDateGteWithName 根据书名从Books查找page_count大于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLtReleaseDateGteWithName 根据书名从Books查找page_count大于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLteReleaseDateGteWithName 根据书名从Books查找page_count大于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithName 根据书名从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteReleaseDateGteWithName 根据书名从Books查找page_count大于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGtReleaseDateGteWithName 根据书名从Books查找page_count大于、价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLtReleaseDateGteWithName 根据书名从Books查找page_count大于、价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLteReleaseDateGteWithName 根据书名从Books查找page_count大于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithName 根据书名从Books查找page_count大于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteReleaseDateGteWithName 根据书名从Books查找page_count小于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGtReleaseDateGteWithName 根据书名从Books查找page_count小于、价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLtReleaseDateGteWithName 根据书名从Books查找page_count小于、价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLteReleaseDateGteWithName 根据书名从Books查找page_count小于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithName 根据书名从Books查找page_count小于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteReleaseDateGteWithName 根据书名从Books查找page_count小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGtReleaseDateGteWithName 根据书名从Books查找page_count小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLtReleaseDateGteWithName 根据书名从Books查找page_count小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLteReleaseDateGteWithName 根据书名从Books查找page_count小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithName 根据书名从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithName 根据书名从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteReleaseDateGteWithNameSeq 根据书名、seq从Books查找page_count大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGte int64 page_count大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtReleaseDateGteWithNameSeq 根据书名、seq从Books查找page_count大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGt int64 page_count大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtReleaseDateGteWithNameSeq 根据书名、seq从Books查找page_count小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountLt int64 page_count小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountLt int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLteReleaseDateGteWithNameSeq 根据书名、seq从Books查找page_count小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLteReleaseDateGteWithNameSeq 根据书名、seq从Books查找page_count大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, pageCountGte, pageCountLte int64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteReleaseDateGteWithNameSeq 根据书名、seq从Books查找价格大于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGtReleaseDateGteWithNameSeq 根据书名、seq从Books查找价格大于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLtReleaseDateGteWithNameSeq 根据书名、seq从Books查找价格小于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLtReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceLteReleaseDateGteWithNameSeq 根据书名、seq从Books查找价格小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPriceGteLteReleaseDateGteWithNameSeq 根据书名、seq从Books查找价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// name string 书名
// seq string seq
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPriceGteLteReleaseDateGteWithNameSeq(es *elasticsearch.Client, name string, seq string, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGtReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLtReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteReleaseDateGteWithSeq 根据seq从Books查找page_count大于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGtReleaseDateGteWithSeq 根据seq从Books查找page_count大于、价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLtReleaseDateGteWithSeq 根据seq从Books查找page_count大于、价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGt int64 page_count大于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGtPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteReleaseDateGteWithSeq 根据seq从Books查找page_count小于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGtReleaseDateGteWithSeq 根据seq从Books查找page_count小于、价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLtReleaseDateGteWithSeq 根据seq从Books查找page_count小于、价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceLteReleaseDateGteWithSeq 根据seq从Books查找page_count小于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count小于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLt int64 page_count小于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtPriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLt int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGtReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLtReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceLteReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountLtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、价格大于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、价格大于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGt float64 价格大于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、价格小于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLt float64 价格小于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLtReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceLt float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、价格小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

// QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithSeq 根据seq从Books查找page_count大于等于和小于等于、价格大于等于和小于等于、release_date为近几个季度的详细数据列表和总数量
// seq string seq
// pageCountGte int64 page_count大于等于
// pageCountLte int64 page_count小于等于
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNQuarter int release_date为近几个季度
func QuarterBooksByPageCountGteLtePriceGteLteReleaseDateGteWithSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, priceGte, priceLte float64, releaseDateNQuarter int) (*eq.Data, *eq.Query, error) {
	filters := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dQ/Q", releaseDateNQuarter), nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(filters))}
	return queryBooksList(es, esQuery)
}

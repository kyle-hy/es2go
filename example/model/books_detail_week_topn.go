// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// WeekBooksByReleaseDateGteMaxNPageCount 根据发布日期为近几周检索books表中页数最大的前N条详细数据列表
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteMaxNPageCount(es *elasticsearch.Client, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteMinNPageCount 根据发布日期为近几周检索books表中页数最小的前N条详细数据列表
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteMinNPageCount(es *elasticsearch.Client, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteMaxNPrice 根据发布日期为近几周检索books表中价格最大的前N条详细数据列表
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteMaxNPrice(es *elasticsearch.Client, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteMinNPrice 根据发布日期为近几周检索books表中价格最小的前N条详细数据列表
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteMinNPrice(es *elasticsearch.Client, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextMaxNPageCount 根据全文本、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextMinNPageCount 根据全文本、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextMaxNPrice 根据全文本、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextMinNPrice 根据全文本、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorMaxNPageCount 根据作者、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorMinNPageCount 根据作者、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorMaxNPrice 根据作者、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorMinNPrice 根据作者、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassMaxNPageCount 根据类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassMinNPageCount 根据类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassMaxNPrice 根据类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassMinNPrice 根据类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2MaxNPageCount 根据子类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2MinNPageCount 根据子类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2MaxNPrice 根据子类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2MinNPrice 根据子类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameMaxNPageCount 根据书名、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameMinNPageCount 根据书名、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameMaxNPrice 根据书名、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameMinNPrice 根据书名、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteMaxNPrice 根据页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteMinNPrice 根据页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteMaxNPrice 根据页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteMinNPrice 根据页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteMaxNPrice 根据页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteMinNPrice 根据页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteMaxNPrice 根据页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteMinNPrice 根据页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteMaxNPrice 根据页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteMinNPrice 根据页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteMaxNPageCount 根据价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteMinNPageCount 根据价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteMaxNPageCount 根据价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteMinNPageCount 根据价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteMaxNPageCount 根据价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteMinNPageCount 根据价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteMaxNPageCount 根据价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteMinNPageCount 根据价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteMaxNPageCount 根据价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteMinNPageCount 根据价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithSeqMaxNPageCount 根据编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithSeqMinNPageCount 根据编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithSeqMaxNPrice 根据编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithSeqMinNPrice 根据编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClassMinNPrice 根据全文本、类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextNameMinNPrice 根据全文本、书名、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClassMinNPageCount 根据作者、类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClassMaxNPrice 根据作者、类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClassMinNPrice 根据作者、类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorNameMinNPageCount 根据作者、书名、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorNameMaxNPrice 根据作者、书名、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorNameMinNPrice 根据作者、书名、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithAuthorSeqMinNPrice 根据作者、编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassClass2MinNPageCount 根据类别、子类别、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassClass2MaxNPrice 根据类别、子类别、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassClass2MinNPrice 根据类别、子类别、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassNameMaxNPageCount 根据类别、书名、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassNameMinNPageCount 根据类别、书名、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassNameMaxNPrice 根据类别、书名、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassNameMinNPrice 根据类别、书名、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithClassMaxNPrice 根据类别、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithClassMinNPrice 根据类别、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithClassMaxNPrice 根据类别、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithClassMinNPrice 根据类别、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithClassMaxNPrice 根据类别、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithClassMinNPrice 根据类别、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithClassMinNPageCount 根据类别、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithClassMinNPageCount 根据类别、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithClassMinNPageCount 根据类别、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassSeqMaxNPageCount 根据类别、编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassSeqMinNPageCount 根据类别、编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassSeqMaxNPrice 根据类别、编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClassSeqMinNPrice 根据类别、编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2NameMinNPageCount 根据子类别、书名、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2NameMaxNPrice 根据子类别、书名、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2NameMinNPrice 根据子类别、书名、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithClass2SeqMinNPrice 根据子类别、编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithNameMaxNPrice 根据书名、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithNameMinNPrice 根据书名、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithNameMaxNPrice 根据书名、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithNameMinNPrice 根据书名、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithNameMaxNPrice 根据书名、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithNameMinNPrice 根据书名、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithNameMinNPageCount 根据书名、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithNameMinNPageCount 根据书名、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithNameMinNPageCount 根据书名、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameSeqMaxNPageCount 根据书名、编号、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameSeqMinNPageCount 根据书名、编号、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameSeqMaxNPrice 根据书名、编号、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByReleaseDateGteWithNameSeqMinNPrice 根据书名、编号、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByReleaseDateGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGtReleaseDateGteWithSeqMinNPrice 根据编号、页数大于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLtReleaseDateGteWithSeqMinNPrice 根据编号、页数小于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountLteReleaseDateGteWithSeqMinNPrice 根据编号、页数小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期为近几周检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期为近几周检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGtReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLtReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几周检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// WeekBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几周检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNWeek int 发布日期为近几周
// size int 前N条记录
func WeekBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNWeek, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dw/w", releaseDateNWeek), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

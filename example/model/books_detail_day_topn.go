// Code generated by es2go. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// DayBooksByReleaseDateGteMaxNPageCount 根据发布日期为近几天检索books表中页数最大的前N条详细数据列表
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteMaxNPageCount(es *elasticsearch.Client, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteMinNPageCount 根据发布日期为近几天检索books表中页数最小的前N条详细数据列表
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteMinNPageCount(es *elasticsearch.Client, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteMaxNPrice 根据发布日期为近几天检索books表中价格最大的前N条详细数据列表
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteMaxNPrice(es *elasticsearch.Client, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteMinNPrice 根据发布日期为近几天检索books表中价格最小的前N条详细数据列表
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteMinNPrice(es *elasticsearch.Client, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextMaxNPageCount 根据全文本、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextMinNPageCount 根据全文本、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextMaxNPrice 根据全文本、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextMinNPrice 根据全文本、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorMaxNPageCount 根据作者、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorMinNPageCount 根据作者、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorMaxNPrice 根据作者、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorMinNPrice 根据作者、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassMaxNPageCount 根据类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassMinNPageCount 根据类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassMaxNPrice 根据类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassMinNPrice 根据类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2MaxNPageCount 根据子类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2MinNPageCount 根据子类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2MaxNPrice 根据子类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2MinNPrice 根据子类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameMaxNPageCount 根据书名、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameMinNPageCount 根据书名、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameMaxNPrice 根据书名、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameMinNPrice 根据书名、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteMaxNPrice 根据页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteMinNPrice 根据页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteMaxNPrice 根据页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteMinNPrice 根据页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteMaxNPrice 根据页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteMinNPrice 根据页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteMaxNPrice 根据页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteMinNPrice 根据页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteMaxNPrice 根据页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteMaxNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteMinNPrice 根据页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteMinNPrice(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteMaxNPageCount 根据价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteMinNPageCount 根据价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteMaxNPageCount 根据价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteMinNPageCount 根据价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteMaxNPageCount 根据价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteMinNPageCount 根据价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteMaxNPageCount 根据价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteMinNPageCount 根据价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteMaxNPageCount 根据价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteMaxNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteMinNPageCount 根据价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteMinNPageCount(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithSeqMaxNPageCount 根据编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithSeqMinNPageCount 根据编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithSeqMaxNPrice 根据编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithSeqMinNPrice 根据编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount 根据全文本、作者、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextAuthorMaxNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextAuthorMinNPageCount 根据全文本、作者、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextAuthorMinNPageCount(es *elasticsearch.Client, allText, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextAuthorMaxNPrice 根据全文本、作者、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextAuthorMaxNPrice(es *elasticsearch.Client, allText, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextAuthorMinNPrice 根据全文本、作者、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// author string 作者
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextAuthorMinNPrice(es *elasticsearch.Client, allText, author string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClassMaxNPageCount 根据全文本、类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClassMaxNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClassMinNPageCount 根据全文本、类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClassMinNPageCount(es *elasticsearch.Client, allText, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClassMaxNPrice 根据全文本、类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClassMaxNPrice(es *elasticsearch.Client, allText, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClassMinNPrice 根据全文本、类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClassMinNPrice(es *elasticsearch.Client, allText, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClass2MaxNPageCount 根据全文本、子类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClass2MaxNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClass2MinNPageCount 根据全文本、子类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClass2MinNPageCount(es *elasticsearch.Client, allText, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClass2MaxNPrice 根据全文本、子类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClass2MaxNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextClass2MinNPrice 根据全文本、子类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextClass2MinNPrice(es *elasticsearch.Client, allText, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextNameMaxNPageCount 根据全文本、书名、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextNameMaxNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextNameMinNPageCount 根据全文本、书名、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextNameMinNPageCount(es *elasticsearch.Client, allText, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextNameMaxNPrice 根据全文本、书名、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextNameMaxNPrice(es *elasticsearch.Client, allText, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextNameMinNPrice 根据全文本、书名、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextNameMinNPrice(es *elasticsearch.Client, allText, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithAllTextMaxNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice 根据全文本、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithAllTextMinNPrice(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithAllTextMaxNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount 根据全文本、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithAllTextMinNPageCount(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextSeqMaxNPageCount 根据全文本、编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextSeqMaxNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextSeqMinNPageCount 根据全文本、编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextSeqMinNPageCount(es *elasticsearch.Client, allText, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextSeqMaxNPrice 根据全文本、编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextSeqMaxNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAllTextSeqMinNPrice 根据全文本、编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// allText string 全文本
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAllTextSeqMinNPrice(es *elasticsearch.Client, allText, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassMaxNPageCount 根据作者、类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClassMaxNPageCount(es *elasticsearch.Client, author, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassMinNPageCount 根据作者、类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClassMinNPageCount(es *elasticsearch.Client, author, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassMaxNPrice 根据作者、类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClassMaxNPrice(es *elasticsearch.Client, author, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClassMinNPrice 根据作者、类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// class string 类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClassMinNPrice(es *elasticsearch.Client, author, class string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClass2MaxNPageCount 根据作者、子类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClass2MaxNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClass2MinNPageCount 根据作者、子类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClass2MinNPageCount(es *elasticsearch.Client, author, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClass2MaxNPrice 根据作者、子类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClass2MaxNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorClass2MinNPrice 根据作者、子类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorClass2MinNPrice(es *elasticsearch.Client, author, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorNameMaxNPageCount 根据作者、书名、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorNameMaxNPageCount(es *elasticsearch.Client, author, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorNameMinNPageCount 根据作者、书名、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorNameMinNPageCount(es *elasticsearch.Client, author, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorNameMaxNPrice 根据作者、书名、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorNameMaxNPrice(es *elasticsearch.Client, author, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorNameMinNPrice 根据作者、书名、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorNameMinNPrice(es *elasticsearch.Client, author, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice 根据作者、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithAuthorMaxNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice 根据作者、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithAuthorMinNPrice(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithAuthorMaxNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount 根据作者、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithAuthorMinNPageCount(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorSeqMaxNPageCount 根据作者、编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorSeqMaxNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorSeqMinNPageCount 根据作者、编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorSeqMinNPageCount(es *elasticsearch.Client, author, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorSeqMaxNPrice 根据作者、编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorSeqMaxNPrice(es *elasticsearch.Client, author, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithAuthorSeqMinNPrice 根据作者、编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// author string 作者
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithAuthorSeqMinNPrice(es *elasticsearch.Client, author, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassClass2MaxNPageCount 根据类别、子类别、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassClass2MaxNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassClass2MinNPageCount 根据类别、子类别、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassClass2MinNPageCount(es *elasticsearch.Client, class, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassClass2MaxNPrice 根据类别、子类别、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassClass2MaxNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassClass2MinNPrice 根据类别、子类别、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// class2 string 子类别
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassClass2MinNPrice(es *elasticsearch.Client, class, class2 string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassNameMaxNPageCount 根据类别、书名、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassNameMaxNPageCount(es *elasticsearch.Client, class, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassNameMinNPageCount 根据类别、书名、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassNameMinNPageCount(es *elasticsearch.Client, class, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassNameMaxNPrice 根据类别、书名、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassNameMaxNPrice(es *elasticsearch.Client, class, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassNameMinNPrice 根据类别、书名、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassNameMinNPrice(es *elasticsearch.Client, class, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClassMaxNPrice 根据类别、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClassMinNPrice 根据类别、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClassMaxNPrice 根据类别、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClassMinNPrice 根据类别、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClassMaxNPrice 根据类别、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClassMinNPrice 根据类别、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice 根据类别、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithClassMaxNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice 根据类别、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithClassMinNPrice(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClassMinNPageCount 根据类别、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClassMinNPageCount 根据类别、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClassMinNPageCount 根据类别、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithClassMaxNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount 根据类别、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithClassMinNPageCount(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassSeqMaxNPageCount 根据类别、编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassSeqMaxNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassSeqMinNPageCount 根据类别、编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassSeqMinNPageCount(es *elasticsearch.Client, class, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassSeqMaxNPrice 根据类别、编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassSeqMaxNPrice(es *elasticsearch.Client, class, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClassSeqMinNPrice 根据类别、编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class string 类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClassSeqMinNPrice(es *elasticsearch.Client, class, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2NameMaxNPageCount 根据子类别、书名、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2NameMaxNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2NameMinNPageCount 根据子类别、书名、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2NameMinNPageCount(es *elasticsearch.Client, class2, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2NameMaxNPrice 根据子类别、书名、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2NameMaxNPrice(es *elasticsearch.Client, class2, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2NameMinNPrice 根据子类别、书名、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// name string 书名
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2NameMinNPrice(es *elasticsearch.Client, class2, name string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithClass2MaxNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice 根据子类别、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithClass2MinNPrice(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithClass2MaxNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount 根据子类别、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithClass2MinNPageCount(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2SeqMaxNPageCount 根据子类别、编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2SeqMaxNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2SeqMinNPageCount 根据子类别、编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2SeqMinNPageCount(es *elasticsearch.Client, class2, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2SeqMaxNPrice 根据子类别、编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2SeqMaxNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithClass2SeqMinNPrice 根据子类别、编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// class2 string 子类别
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithClass2SeqMinNPrice(es *elasticsearch.Client, class2, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithNameMaxNPrice 根据书名、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithNameMinNPrice 根据书名、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithNameMaxNPrice 根据书名、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithNameMinNPrice 根据书名、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithNameMaxNPrice 根据书名、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithNameMinNPrice 根据书名、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice 根据书名、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithNameMaxNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice 根据书名、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithNameMinNPrice(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithNameMinNPageCount 根据书名、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithNameMinNPageCount 根据书名、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithNameMinNPageCount 根据书名、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithNameMaxNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount 根据书名、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithNameMinNPageCount(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameSeqMaxNPageCount 根据书名、编号、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameSeqMaxNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameSeqMinNPageCount 根据书名、编号、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameSeqMinNPageCount(es *elasticsearch.Client, name, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameSeqMaxNPrice 根据书名、编号、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameSeqMaxNPrice(es *elasticsearch.Client, name, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByReleaseDateGteWithNameSeqMinNPrice 根据书名、编号、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// name string 书名
// seq string 编号
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByReleaseDateGteWithNameSeqMinNPrice(es *elasticsearch.Client, name, seq string, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGtReleaseDateGteWithSeqMinNPrice 根据编号、页数大于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLtReleaseDateGteWithSeqMinNPrice 根据编号、页数小于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLtReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountLteReleaseDateGteWithSeqMinNPrice 根据编号、页数小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice 根据编号、页数大于等于和小于等于、发布日期为近几天检索books表中价格最大的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithSeqMaxNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice 根据编号、页数大于等于和小于等于、发布日期为近几天检索books表中价格最小的前N条详细数据列表
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPageCountGteLteReleaseDateGteWithSeqMinNPrice(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("price", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGtReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGt float64 价格大于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLtReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLt float64 价格小于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLtReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLt float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几天检索books表中页数最大的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithSeqMaxNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "desc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

// DayBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount 根据编号、价格大于等于和小于等于、发布日期为近几天检索books表中页数最小的前N条详细数据列表
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateNDay int 发布日期为近几天
// size int 前N条记录
func DayBooksByPriceGteLteReleaseDateGteWithSeqMinNPageCount(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateNDay, size int) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", fmt.Sprintf("now-%dd/d", releaseDateNDay), nil, nil, nil),
	}
	sorts := eq.Sort("page_count", "asc")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Sort: sorts, Size: size}
	return queryBooksList(es, esQuery)
}

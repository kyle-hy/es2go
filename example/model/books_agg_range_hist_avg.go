// Code generated by es2go. DO NOT EDIT.
// gen_agg_range_hist_stats.go

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// AvgPriceInHistPriceOfBooksByPageCountGte 根据页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGte(es *elasticsearch.Client, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGt 根据页数大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGt(es *elasticsearch.Client, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLt 根据页数小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLt(es *elasticsearch.Client, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLte 根据页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLte(es *elasticsearch.Client, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLte 根据页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGte 根据价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGte(es *elasticsearch.Client, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGt 根据价格大于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGt(es *elasticsearch.Client, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLt 根据价格小于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLt(es *elasticsearch.Client, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLte 根据价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLte(es *elasticsearch.Client, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLte 根据价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLte(es *elasticsearch.Client, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGte 根据发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGt 根据发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLt 根据发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLte 根据发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGte 根据发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGt 根据发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLt 根据发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLte 根据发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGte 根据发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGt 根据发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLt 根据发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLte 根据发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGte 根据发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGt 根据发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLt 根据发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLte 根据发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllText 根据全文本、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllText 根据全文本、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllText 根据全文本、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllText 根据全文本、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllText 根据全文本、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllText 根据全文本、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllText(es *elasticsearch.Client, allText string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllText 根据全文本、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllText(es *elasticsearch.Client, allText string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllText 根据全文本、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllText(es *elasticsearch.Client, allText string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllText 根据全文本、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllText(es *elasticsearch.Client, allText string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllText 根据全文本、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAuthor 根据作者、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAuthor 根据作者、页数大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAuthor 根据作者、页数小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAuthor 根据作者、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAuthor 根据作者、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAuthor 根据作者、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAuthor(es *elasticsearch.Client, author string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAuthor 根据作者、价格大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAuthor(es *elasticsearch.Client, author string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAuthor 根据作者、价格小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAuthor(es *elasticsearch.Client, author string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAuthor 根据作者、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAuthor(es *elasticsearch.Client, author string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthor 根据作者、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClass 根据类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClass(es *elasticsearch.Client, class string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClass 根据类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClass(es *elasticsearch.Client, class string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClass 根据类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClass(es *elasticsearch.Client, class string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClass 根据类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClass(es *elasticsearch.Client, class string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClass 根据类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClass 根据类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClass(es *elasticsearch.Client, class string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClass 根据类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClass(es *elasticsearch.Client, class string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClass 根据类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClass(es *elasticsearch.Client, class string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClass 根据类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClass(es *elasticsearch.Client, class string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClass 根据类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClass2 根据子类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClass2 根据子类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClass2 根据子类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClass2 根据子类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClass2 根据子类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClass2 根据子类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClass2(es *elasticsearch.Client, class2 string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClass2 根据子类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClass2(es *elasticsearch.Client, class2 string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClass2 根据子类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClass2(es *elasticsearch.Client, class2 string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClass2 根据子类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClass2(es *elasticsearch.Client, class2 string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2 根据子类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteName 根据书名、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteName(es *elasticsearch.Client, name string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtName 根据书名、页数大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtName(es *elasticsearch.Client, name string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtName 根据书名、页数小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtName(es *elasticsearch.Client, name string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteName 根据书名、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteName(es *elasticsearch.Client, name string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteName 根据书名、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteName 根据书名、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteName(es *elasticsearch.Client, name string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtName 根据书名、价格大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtName(es *elasticsearch.Client, name string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtName 根据书名、价格小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtName(es *elasticsearch.Client, name string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteName 根据书名、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteName(es *elasticsearch.Client, name string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteName 根据书名、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGt 根据页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGt(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLt 根据页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLt(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLte 根据页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLte(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLte 根据页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGt 根据页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGt(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLt 根据页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLt(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLte 根据页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLte(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLte 根据页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGt 根据页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGt(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLt 根据页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLt(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLte 根据页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLte(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLte 根据页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGt 根据页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGt(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLt 根据页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLt(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLte 根据页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLte(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLte 根据页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGt 根据页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLt 根据页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLte 根据页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLte 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteSeq 根据编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtSeq 根据编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtSeq 根据编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteSeq 根据编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteSeq 根据编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGt 根据价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGt(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLt 根据价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLt(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLte 根据价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLte(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLte 根据价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLte(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGte 根据价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGt 根据价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGt(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLt 根据价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLt(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLte 根据价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLte(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLte 根据价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLte(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGte 根据价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGt 根据价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGt(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLt 根据价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLt(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLte 根据价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLte(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLte 根据价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLte(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGt 根据价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGt(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLt 根据价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLt(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLte 根据价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLte(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLte 根据价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLte(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGt 根据价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLt 根据价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLte 根据价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLte 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteSeq 根据编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteSeq(es *elasticsearch.Client, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtSeq 根据编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtSeq(es *elasticsearch.Client, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtSeq 根据编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtSeq(es *elasticsearch.Client, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteSeq 根据编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteSeq(es *elasticsearch.Client, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteSeq 根据编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllTextAuthor 根据全文本、作者、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllTextAuthor 根据全文本、作者、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllTextAuthor 根据全文本、作者、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllTextAuthor 根据全文本、作者、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextAuthor 根据全文本、作者、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllTextAuthor 根据全文本、作者、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllTextAuthor 根据全文本、作者、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllTextAuthor 根据全文本、作者、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllTextAuthor 根据全文本、作者、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextAuthor 根据全文本、作者、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllTextClass 根据全文本、类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllTextClass 根据全文本、类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllTextClass 根据全文本、类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllTextClass 根据全文本、类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextClass 根据全文本、类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllTextClass 根据全文本、类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllTextClass 根据全文本、类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllTextClass(es *elasticsearch.Client, allText, class string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllTextClass 根据全文本、类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllTextClass(es *elasticsearch.Client, allText, class string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllTextClass 根据全文本、类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllTextClass(es *elasticsearch.Client, allText, class string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextClass 根据全文本、类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllTextClass2 根据全文本、子类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllTextClass2 根据全文本、子类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllTextClass2 根据全文本、子类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllTextClass2 根据全文本、子类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextClass2 根据全文本、子类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllTextClass2 根据全文本、子类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllTextClass2 根据全文本、子类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllTextClass2 根据全文本、子类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllTextClass2 根据全文本、子类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextClass2 根据全文本、子类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllTextName 根据全文本、书名、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllTextName 根据全文本、书名、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllTextName(es *elasticsearch.Client, allText, name string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllTextName 根据全文本、书名、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllTextName(es *elasticsearch.Client, allText, name string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllTextName 根据全文本、书名、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextName 根据全文本、书名、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllTextName 根据全文本、书名、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllTextName 根据全文本、书名、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllTextName(es *elasticsearch.Client, allText, name string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllTextName 根据全文本、书名、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllTextName(es *elasticsearch.Client, allText, name string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllTextName 根据全文本、书名、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllTextName(es *elasticsearch.Client, allText, name string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextName 根据全文本、书名、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteAllText 根据全文本、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtAllText 根据全文本、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtAllText 根据全文本、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteAllText 根据全文本、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteAllText 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteAllText 根据全文本、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtAllText 根据全文本、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtAllText 根据全文本、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteAllText 根据全文本、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteAllText 根据全文本、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteAllText 根据全文本、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtAllText 根据全文本、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtAllText 根据全文本、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteAllText 根据全文本、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteAllText 根据全文本、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteAllText 根据全文本、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtAllText 根据全文本、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtAllText 根据全文本、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteAllText 根据全文本、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteAllText 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtAllText 根据全文本、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtAllText 根据全文本、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteAllText 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAllTextSeq 根据全文本、编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAllTextSeq 根据全文本、编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAllTextSeq 根据全文本、编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAllTextSeq 根据全文本、编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextSeq 根据全文本、编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteAllText 根据全文本、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtAllText 根据全文本、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtAllText 根据全文本、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteAllText 根据全文本、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteAllText 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteAllText 根据全文本、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtAllText 根据全文本、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtAllText 根据全文本、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteAllText 根据全文本、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteAllText 根据全文本、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteAllText 根据全文本、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtAllText 根据全文本、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtAllText 根据全文本、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteAllText 根据全文本、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteAllText 根据全文本、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteAllText 根据全文本、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtAllText 根据全文本、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtAllText 根据全文本、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteAllText 根据全文本、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteAllText 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtAllText 根据全文本、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtAllText 根据全文本、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteAllText 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAllTextSeq 根据全文本、编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAllTextSeq 根据全文本、编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAllTextSeq 根据全文本、编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAllTextSeq 根据全文本、编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextSeq 根据全文本、编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAuthorClass 根据作者、类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAuthorClass 根据作者、类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAuthorClass(es *elasticsearch.Client, author, class string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAuthorClass 根据作者、类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAuthorClass(es *elasticsearch.Client, author, class string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAuthorClass 根据作者、类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorClass 根据作者、类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAuthorClass 根据作者、类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAuthorClass(es *elasticsearch.Client, author, class string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAuthorClass 根据作者、类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAuthorClass(es *elasticsearch.Client, author, class string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAuthorClass 根据作者、类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAuthorClass(es *elasticsearch.Client, author, class string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAuthorClass 根据作者、类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAuthorClass(es *elasticsearch.Client, author, class string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorClass 根据作者、类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorClass(es *elasticsearch.Client, author, class string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAuthorClass2 根据作者、子类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAuthorClass2 根据作者、子类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAuthorClass2 根据作者、子类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAuthorClass2 根据作者、子类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorClass2 根据作者、子类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAuthorClass2 根据作者、子类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAuthorClass2 根据作者、子类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAuthorClass2 根据作者、子类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAuthorClass2 根据作者、子类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorClass2 根据作者、子类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAuthorName 根据作者、书名、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAuthorName 根据作者、书名、页数大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAuthorName(es *elasticsearch.Client, author, name string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAuthorName 根据作者、书名、页数小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAuthorName(es *elasticsearch.Client, author, name string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAuthorName 根据作者、书名、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAuthorName(es *elasticsearch.Client, author, name string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorName 根据作者、书名、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAuthorName 根据作者、书名、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAuthorName(es *elasticsearch.Client, author, name string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAuthorName 根据作者、书名、价格大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAuthorName(es *elasticsearch.Client, author, name string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAuthorName 根据作者、书名、价格小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAuthorName(es *elasticsearch.Client, author, name string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAuthorName 根据作者、书名、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAuthorName(es *elasticsearch.Client, author, name string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorName 根据作者、书名、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorName(es *elasticsearch.Client, author, name string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteAuthor 根据作者、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtAuthor 根据作者、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtAuthor 根据作者、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteAuthor 根据作者、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteAuthor 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteAuthor 根据作者、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtAuthor 根据作者、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtAuthor 根据作者、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteAuthor 根据作者、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteAuthor 根据作者、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteAuthor 根据作者、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtAuthor 根据作者、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtAuthor 根据作者、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteAuthor 根据作者、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteAuthor 根据作者、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteAuthor 根据作者、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtAuthor 根据作者、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtAuthor 根据作者、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteAuthor 根据作者、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteAuthor 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtAuthor 根据作者、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtAuthor 根据作者、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteAuthor 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteAuthorSeq 根据作者、编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtAuthorSeq 根据作者、编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtAuthorSeq 根据作者、编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteAuthorSeq 根据作者、编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorSeq 根据作者、编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteAuthor 根据作者、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtAuthor 根据作者、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtAuthor 根据作者、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteAuthor 根据作者、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteAuthor 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteAuthor 根据作者、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtAuthor 根据作者、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtAuthor 根据作者、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteAuthor 根据作者、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteAuthor 根据作者、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteAuthor 根据作者、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtAuthor 根据作者、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtAuthor 根据作者、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteAuthor 根据作者、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteAuthor 根据作者、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteAuthor 根据作者、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtAuthor 根据作者、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtAuthor 根据作者、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteAuthor 根据作者、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteAuthor 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtAuthor 根据作者、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtAuthor 根据作者、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteAuthor 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteAuthorSeq 根据作者、编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtAuthorSeq 根据作者、编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtAuthorSeq(es *elasticsearch.Client, author, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtAuthorSeq 根据作者、编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtAuthorSeq(es *elasticsearch.Client, author, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteAuthorSeq 根据作者、编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorSeq 根据作者、编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClassClass2 根据类别、子类别、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClassClass2 根据类别、子类别、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClassClass2 根据类别、子类别、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClassClass2 根据类别、子类别、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClassClass2 根据类别、子类别、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClassClass2 根据类别、子类别、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClassClass2 根据类别、子类别、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClassClass2(es *elasticsearch.Client, class, class2 string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClassClass2 根据类别、子类别、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClassClass2(es *elasticsearch.Client, class, class2 string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClassClass2 根据类别、子类别、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClassClass2(es *elasticsearch.Client, class, class2 string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClassClass2 根据类别、子类别、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassClass2 根据类别、子类别、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassClass2 根据类别、子类别、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassClass2 根据类别、子类别、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassClass2 根据类别、子类别、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassClass2 根据类别、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClassClass2 根据类别、子类别、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClassClass2 根据类别、子类别、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClassClass2 根据类别、子类别、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClassClass2 根据类别、子类别、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassClass2 根据类别、子类别、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClassClass2 根据类别、子类别、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClassClass2 根据类别、子类别、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClassClass2 根据类别、子类别、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClassClass2 根据类别、子类别、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassClass2 根据类别、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClassClass2 根据类别、子类别、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClassClass2 根据类别、子类别、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClassClass2 根据类别、子类别、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClassClass2 根据类别、子类别、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassClass2 根据类别、子类别、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClassName 根据类别、书名、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClassName(es *elasticsearch.Client, class, name string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClassName 根据类别、书名、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClassName(es *elasticsearch.Client, class, name string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClassName 根据类别、书名、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClassName(es *elasticsearch.Client, class, name string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClassName 根据类别、书名、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClassName(es *elasticsearch.Client, class, name string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClassName 根据类别、书名、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClassName(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClassName 根据类别、书名、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClassName(es *elasticsearch.Client, class, name string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClassName 根据类别、书名、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClassName(es *elasticsearch.Client, class, name string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClassName 根据类别、书名、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClassName(es *elasticsearch.Client, class, name string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClassName 根据类别、书名、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClassName(es *elasticsearch.Client, class, name string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClassName 根据类别、书名、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClassName(es *elasticsearch.Client, class, name string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteClass 根据类别、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtClass 根据类别、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtClass 根据类别、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteClass 根据类别、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteClass 根据类别、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteClass 根据类别、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtClass 根据类别、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtClass 根据类别、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteClass 根据类别、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteClass 根据类别、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteClass 根据类别、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtClass 根据类别、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtClass 根据类别、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteClass 根据类别、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteClass 根据类别、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteClass 根据类别、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtClass 根据类别、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtClass 根据类别、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteClass 根据类别、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteClass 根据类别、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteClass 根据类别、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtClass 根据类别、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtClass 根据类别、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteClass 根据类别、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteClass 根据类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClassSeq 根据类别、编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClassSeq 根据类别、编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClassSeq(es *elasticsearch.Client, class, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClassSeq 根据类别、编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClassSeq(es *elasticsearch.Client, class, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClassSeq 根据类别、编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClassSeq 根据类别、编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteClass 根据类别、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtClass 根据类别、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtClass 根据类别、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteClass 根据类别、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteClass 根据类别、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteClass 根据类别、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtClass 根据类别、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtClass 根据类别、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteClass 根据类别、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteClass 根据类别、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteClass 根据类别、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtClass 根据类别、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtClass 根据类别、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteClass 根据类别、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteClass 根据类别、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteClass 根据类别、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtClass 根据类别、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtClass 根据类别、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteClass 根据类别、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteClass 根据类别、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteClass 根据类别、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtClass 根据类别、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtClass 根据类别、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteClass 根据类别、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteClass 根据类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClassSeq 根据类别、编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClassSeq(es *elasticsearch.Client, class, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClassSeq 根据类别、编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClassSeq(es *elasticsearch.Client, class, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClassSeq 根据类别、编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClassSeq(es *elasticsearch.Client, class, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClassSeq 根据类别、编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClassSeq(es *elasticsearch.Client, class, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClassSeq 根据类别、编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClassSeq(es *elasticsearch.Client, class, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassSeq 根据类别、编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassSeq 根据类别、编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassSeq 根据类别、编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassSeq 根据类别、编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassSeq 根据类别、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClassSeq 根据类别、编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClassSeq 根据类别、编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClassSeq 根据类别、编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClassSeq 根据类别、编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassSeq 根据类别、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClassSeq 根据类别、编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClassSeq 根据类别、编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClassSeq 根据类别、编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClassSeq 根据类别、编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassSeq 根据类别、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClassSeq 根据类别、编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClassSeq 根据类别、编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClassSeq 根据类别、编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClassSeq 根据类别、编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassSeq 根据类别、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClass2Name 根据子类别、书名、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClass2Name 根据子类别、书名、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClass2Name(es *elasticsearch.Client, class2, name string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClass2Name 根据子类别、书名、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClass2Name(es *elasticsearch.Client, class2, name string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClass2Name 根据子类别、书名、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClass2Name 根据子类别、书名、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClass2Name 根据子类别、书名、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClass2Name(es *elasticsearch.Client, class2, name string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClass2Name 根据子类别、书名、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClass2Name(es *elasticsearch.Client, class2, name string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClass2Name 根据子类别、书名、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClass2Name(es *elasticsearch.Client, class2, name string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClass2Name 根据子类别、书名、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClass2Name(es *elasticsearch.Client, class2, name string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2Name 根据子类别、书名、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2Name(es *elasticsearch.Client, class2, name string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteClass2 根据子类别、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtClass2 根据子类别、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtClass2 根据子类别、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteClass2 根据子类别、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteClass2 根据子类别、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteClass2 根据子类别、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtClass2 根据子类别、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtClass2 根据子类别、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteClass2 根据子类别、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteClass2 根据子类别、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteClass2 根据子类别、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtClass2 根据子类别、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtClass2 根据子类别、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteClass2 根据子类别、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteClass2 根据子类别、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteClass2 根据子类别、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtClass2 根据子类别、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtClass2 根据子类别、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteClass2 根据子类别、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteClass2 根据子类别、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtClass2 根据子类别、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtClass2 根据子类别、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteClass2 根据子类别、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteClass2Seq 根据子类别、编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtClass2Seq 根据子类别、编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtClass2Seq 根据子类别、编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteClass2Seq 根据子类别、编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteClass2Seq 根据子类别、编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteClass2 根据子类别、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtClass2 根据子类别、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtClass2 根据子类别、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteClass2 根据子类别、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteClass2 根据子类别、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteClass2 根据子类别、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtClass2 根据子类别、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtClass2 根据子类别、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteClass2 根据子类别、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteClass2 根据子类别、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteClass2 根据子类别、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtClass2 根据子类别、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtClass2 根据子类别、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteClass2 根据子类别、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteClass2 根据子类别、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteClass2 根据子类别、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtClass2 根据子类别、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtClass2 根据子类别、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteClass2 根据子类别、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteClass2 根据子类别、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtClass2 根据子类别、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtClass2 根据子类别、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteClass2 根据子类别、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteClass2Seq 根据子类别、编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtClass2Seq 根据子类别、编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtClass2Seq(es *elasticsearch.Client, class2, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtClass2Seq 根据子类别、编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtClass2Seq(es *elasticsearch.Client, class2, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteClass2Seq 根据子类别、编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2Seq 根据子类别、编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2Seq 根据子类别、编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2Seq 根据子类别、编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2Seq 根据子类别、编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2Seq 根据子类别、编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2Seq 根据子类别、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2Seq 根据子类别、编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2Seq 根据子类别、编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2Seq 根据子类别、编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2Seq 根据子类别、编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2Seq 根据子类别、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2Seq 根据子类别、编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2Seq 根据子类别、编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2Seq 根据子类别、编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2Seq 根据子类别、编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2Seq 根据子类别、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteClass2Seq 根据子类别、编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtClass2Seq 根据子类别、编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtClass2Seq 根据子类别、编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteClass2Seq 根据子类别、编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2Seq 根据子类别、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteName 根据书名、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtName 根据书名、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtName 根据书名、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteName 根据书名、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteName 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteName 根据书名、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtName 根据书名、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtName 根据书名、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteName 根据书名、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteName 根据书名、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteName 根据书名、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtName 根据书名、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtName 根据书名、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteName 根据书名、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteName 根据书名、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteName 根据书名、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtName 根据书名、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtName 根据书名、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteName 根据书名、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteName 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteName 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtName 根据书名、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtName 根据书名、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteName 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteName 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteNameSeq 根据书名、编号、页数大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtNameSeq 根据书名、编号、页数大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtNameSeq(es *elasticsearch.Client, name, seq string, pageCountGt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtNameSeq 根据书名、编号、页数小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtNameSeq(es *elasticsearch.Client, name, seq string, pageCountLt int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteNameSeq 根据书名、编号、页数小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteNameSeq 根据书名、编号、页数大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteName 根据书名、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtName 根据书名、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtName 根据书名、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteName 根据书名、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteName 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteName 根据书名、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtName 根据书名、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtName 根据书名、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteName 根据书名、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteName 根据书名、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteName 根据书名、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtName 根据书名、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtName 根据书名、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteName 根据书名、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteName 根据书名、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteName 根据书名、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtName 根据书名、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtName 根据书名、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteName 根据书名、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteName 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteName 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtName 根据书名、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtName 根据书名、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteName 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteName 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteNameSeq 根据书名、编号、价格大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteNameSeq(es *elasticsearch.Client, name, seq string, priceGte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtNameSeq 根据书名、编号、价格大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// priceGt float64 价格大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtNameSeq(es *elasticsearch.Client, name, seq string, priceGt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtNameSeq 根据书名、编号、价格小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// priceLt float64 价格小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtNameSeq(es *elasticsearch.Client, name, seq string, priceLt, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteNameSeq 根据书名、编号、价格小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteNameSeq(es *elasticsearch.Client, name, seq string, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteNameSeq 根据书名、编号、价格大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteNameSeq(es *elasticsearch.Client, name, seq string, priceGte, priceLte, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPageCountOfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPriceInHistPageCountOfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPriceOfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计页数的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPageCountInHistPriceOfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteSeq 根据编号、页数大于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtSeq 根据编号、页数大于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtSeq 根据编号、页数大于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteSeq 根据编号、页数大于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteSeq 根据编号、页数大于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteSeq 根据编号、页数大于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtSeq 根据编号、页数大于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtSeq 根据编号、页数大于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteSeq 根据编号、页数大于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteSeq 根据编号、页数大于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteSeq 根据编号、页数小于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtSeq 根据编号、页数小于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtSeq 根据编号、页数小于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteSeq 根据编号、页数小于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteSeq 根据编号、页数小于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteSeq 根据编号、页数小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtSeq 根据编号、页数小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtSeq 根据编号、页数小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteSeq 根据编号、页数小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteSeq 根据编号、页数小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtSeq 根据编号、页数大于等于和小于等于、发布日期大于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtSeq 根据编号、页数大于等于和小于等于、发布日期小于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteSeq 根据编号、页数大于等于和小于等于、发布日期小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按价格区间分桶统计价格的平均值
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的价格区间间隔
func AvgPriceInHistPriceOfBooksByPageCountGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteSeq 根据编号、价格大于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtSeq 根据编号、价格大于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtSeq 根据编号、价格大于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteSeq 根据编号、价格大于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteSeq 根据编号、价格大于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteSeq 根据编号、价格大于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtSeq 根据编号、价格大于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtSeq 根据编号、价格大于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteSeq 根据编号、价格大于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteSeq 根据编号、价格大于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteSeq 根据编号、价格小于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtSeq 根据编号、价格小于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtSeq 根据编号、价格小于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteSeq 根据编号、价格小于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteSeq 根据编号、价格小于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteSeq 根据编号、价格小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtSeq 根据编号、价格小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtSeq 根据编号、价格小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteSeq 根据编号、价格小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteSeq 根据编号、价格小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtSeq 根据编号、价格大于等于和小于等于、发布日期大于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtSeq 根据编号、价格大于等于和小于等于、发布日期小于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLt time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteSeq 根据编号、价格大于等于和小于等于、发布日期小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表，并按页数区间分桶统计页数的平均值
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
// histInterval float64 分桶聚合的页数区间间隔
func AvgPageCountInHistPageCountOfBooksByPriceGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	aggs = aggs.Nested(eq.AvgAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

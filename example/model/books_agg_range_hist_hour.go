// Code generated by es2go. DO NOT EDIT.
// gen_agg_range_date_hist.go

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// HourHistReleaseDateOfBooksByPageCountGte 根据页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGte(es *elasticsearch.Client, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGt 根据页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGt(es *elasticsearch.Client, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLt 根据页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLt(es *elasticsearch.Client, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLte 根据页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLte(es *elasticsearch.Client, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLte 根据页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGte 根据价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGte(es *elasticsearch.Client, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGt 根据价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGt(es *elasticsearch.Client, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLt 根据价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLt(es *elasticsearch.Client, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLte 根据价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLte(es *elasticsearch.Client, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLte 根据价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLte(es *elasticsearch.Client, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllText 根据全文本、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllText 根据全文本、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllText 根据全文本、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllText 根据全文本、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllText 根据全文本、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllText 根据全文本、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllText(es *elasticsearch.Client, allText string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllText 根据全文本、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllText(es *elasticsearch.Client, allText string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllText 根据全文本、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllText(es *elasticsearch.Client, allText string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllText 根据全文本、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllText(es *elasticsearch.Client, allText string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllText 根据全文本、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAuthor 根据作者、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAuthor 根据作者、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAuthor 根据作者、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAuthor 根据作者、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAuthor 根据作者、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAuthor 根据作者、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAuthor(es *elasticsearch.Client, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAuthor 根据作者、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAuthor(es *elasticsearch.Client, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAuthor 根据作者、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAuthor(es *elasticsearch.Client, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAuthor 根据作者、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAuthor(es *elasticsearch.Client, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAuthor 根据作者、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClass 根据类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClass(es *elasticsearch.Client, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClass 根据类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClass(es *elasticsearch.Client, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClass 根据类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClass(es *elasticsearch.Client, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClass 根据类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClass(es *elasticsearch.Client, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClass 根据类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClass 根据类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClass(es *elasticsearch.Client, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClass 根据类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClass(es *elasticsearch.Client, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClass 根据类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClass(es *elasticsearch.Client, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClass 根据类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClass(es *elasticsearch.Client, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClass 根据类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClass2 根据子类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClass2 根据子类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClass2 根据子类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClass2 根据子类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClass2 根据子类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClass2 根据子类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClass2(es *elasticsearch.Client, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClass2 根据子类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClass2(es *elasticsearch.Client, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClass2 根据子类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClass2(es *elasticsearch.Client, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClass2 根据子类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClass2(es *elasticsearch.Client, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClass2 根据子类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteName 根据书名、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteName(es *elasticsearch.Client, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtName 根据书名、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtName(es *elasticsearch.Client, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtName 根据书名、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtName(es *elasticsearch.Client, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteName 根据书名、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteName(es *elasticsearch.Client, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteName 根据书名、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteName 根据书名、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteName(es *elasticsearch.Client, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtName 根据书名、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtName(es *elasticsearch.Client, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtName 根据书名、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtName(es *elasticsearch.Client, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteName 根据书名、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteName(es *elasticsearch.Client, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteName 根据书名、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteSeq 根据编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtSeq 根据编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtSeq 根据编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteSeq 根据编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteSeq 根据编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteSeq 根据编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteSeq(es *elasticsearch.Client, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtSeq 根据编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtSeq(es *elasticsearch.Client, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtSeq 根据编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtSeq(es *elasticsearch.Client, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteSeq 根据编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteSeq(es *elasticsearch.Client, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteSeq 根据编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllTextAuthor 根据全文本、作者、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllTextAuthor 根据全文本、作者、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllTextAuthor 根据全文本、作者、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllTextAuthor 根据全文本、作者、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllTextAuthor 根据全文本、作者、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllTextAuthor 根据全文本、作者、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllTextAuthor 根据全文本、作者、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllTextAuthor 根据全文本、作者、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllTextAuthor 根据全文本、作者、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllTextAuthor 根据全文本、作者、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllTextClass 根据全文本、类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllTextClass 根据全文本、类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllTextClass 根据全文本、类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllTextClass 根据全文本、类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllTextClass 根据全文本、类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllTextClass 根据全文本、类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllTextClass 根据全文本、类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllTextClass(es *elasticsearch.Client, allText, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllTextClass 根据全文本、类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllTextClass(es *elasticsearch.Client, allText, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllTextClass 根据全文本、类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllTextClass(es *elasticsearch.Client, allText, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllTextClass 根据全文本、类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllTextClass2 根据全文本、子类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllTextClass2 根据全文本、子类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllTextClass2 根据全文本、子类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllTextClass2 根据全文本、子类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllTextClass2 根据全文本、子类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllTextClass2 根据全文本、子类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllTextClass2 根据全文本、子类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllTextClass2 根据全文本、子类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllTextClass2 根据全文本、子类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllTextClass2 根据全文本、子类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllTextName 根据全文本、书名、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllTextName 根据全文本、书名、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllTextName(es *elasticsearch.Client, allText, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllTextName 根据全文本、书名、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllTextName(es *elasticsearch.Client, allText, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllTextName 根据全文本、书名、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllTextName 根据全文本、书名、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllTextName 根据全文本、书名、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllTextName(es *elasticsearch.Client, allText, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllTextName 根据全文本、书名、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllTextName(es *elasticsearch.Client, allText, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllTextName 根据全文本、书名、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllTextName(es *elasticsearch.Client, allText, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllTextName 根据全文本、书名、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllTextName(es *elasticsearch.Client, allText, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllTextName 根据全文本、书名、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAllTextSeq 根据全文本、编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAllTextSeq 根据全文本、编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAllTextSeq 根据全文本、编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAllTextSeq 根据全文本、编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAllTextSeq 根据全文本、编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAllTextSeq 根据全文本、编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAllTextSeq 根据全文本、编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAllTextSeq 根据全文本、编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAllTextSeq 根据全文本、编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAllTextSeq 根据全文本、编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAuthorClass 根据作者、类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAuthorClass 根据作者、类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAuthorClass(es *elasticsearch.Client, author, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAuthorClass 根据作者、类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAuthorClass(es *elasticsearch.Client, author, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAuthorClass 根据作者、类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAuthorClass 根据作者、类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAuthorClass 根据作者、类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAuthorClass(es *elasticsearch.Client, author, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAuthorClass 根据作者、类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAuthorClass(es *elasticsearch.Client, author, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAuthorClass 根据作者、类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAuthorClass(es *elasticsearch.Client, author, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAuthorClass 根据作者、类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAuthorClass(es *elasticsearch.Client, author, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAuthorClass 根据作者、类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAuthorClass(es *elasticsearch.Client, author, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAuthorClass2 根据作者、子类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAuthorClass2 根据作者、子类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAuthorClass2 根据作者、子类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAuthorClass2 根据作者、子类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAuthorClass2 根据作者、子类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAuthorClass2 根据作者、子类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAuthorClass2 根据作者、子类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAuthorClass2 根据作者、子类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAuthorClass2 根据作者、子类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAuthorClass2 根据作者、子类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAuthorName 根据作者、书名、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAuthorName 根据作者、书名、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAuthorName(es *elasticsearch.Client, author, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAuthorName 根据作者、书名、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAuthorName(es *elasticsearch.Client, author, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAuthorName 根据作者、书名、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAuthorName(es *elasticsearch.Client, author, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAuthorName 根据作者、书名、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAuthorName 根据作者、书名、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAuthorName(es *elasticsearch.Client, author, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAuthorName 根据作者、书名、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAuthorName(es *elasticsearch.Client, author, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAuthorName 根据作者、书名、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAuthorName(es *elasticsearch.Client, author, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAuthorName 根据作者、书名、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAuthorName(es *elasticsearch.Client, author, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAuthorName 根据作者、书名、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAuthorName(es *elasticsearch.Client, author, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteAuthorSeq 根据作者、编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtAuthorSeq 根据作者、编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtAuthorSeq 根据作者、编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteAuthorSeq 根据作者、编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteAuthorSeq 根据作者、编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteAuthorSeq 根据作者、编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtAuthorSeq 根据作者、编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtAuthorSeq(es *elasticsearch.Client, author, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtAuthorSeq 根据作者、编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtAuthorSeq(es *elasticsearch.Client, author, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteAuthorSeq 根据作者、编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteAuthorSeq 根据作者、编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClassClass2 根据类别、子类别、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClassClass2 根据类别、子类别、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClassClass2 根据类别、子类别、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClassClass2 根据类别、子类别、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClassClass2 根据类别、子类别、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClassClass2 根据类别、子类别、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClassClass2 根据类别、子类别、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClassClass2(es *elasticsearch.Client, class, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClassClass2 根据类别、子类别、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClassClass2(es *elasticsearch.Client, class, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClassClass2 根据类别、子类别、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClassClass2(es *elasticsearch.Client, class, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClassClass2 根据类别、子类别、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClassName 根据类别、书名、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClassName(es *elasticsearch.Client, class, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClassName 根据类别、书名、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClassName(es *elasticsearch.Client, class, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClassName 根据类别、书名、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClassName(es *elasticsearch.Client, class, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClassName 根据类别、书名、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClassName(es *elasticsearch.Client, class, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClassName 根据类别、书名、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClassName(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClassName 根据类别、书名、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClassName(es *elasticsearch.Client, class, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClassName 根据类别、书名、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClassName(es *elasticsearch.Client, class, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClassName 根据类别、书名、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClassName(es *elasticsearch.Client, class, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClassName 根据类别、书名、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClassName(es *elasticsearch.Client, class, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClassName 根据类别、书名、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClassName(es *elasticsearch.Client, class, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClassSeq 根据类别、编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClassSeq 根据类别、编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClassSeq(es *elasticsearch.Client, class, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClassSeq 根据类别、编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClassSeq(es *elasticsearch.Client, class, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClassSeq 根据类别、编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClassSeq 根据类别、编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClassSeq 根据类别、编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClassSeq(es *elasticsearch.Client, class, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClassSeq 根据类别、编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClassSeq(es *elasticsearch.Client, class, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClassSeq 根据类别、编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClassSeq(es *elasticsearch.Client, class, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClassSeq 根据类别、编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClassSeq(es *elasticsearch.Client, class, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClassSeq 根据类别、编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClassSeq(es *elasticsearch.Client, class, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClass2Name 根据子类别、书名、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClass2Name 根据子类别、书名、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClass2Name(es *elasticsearch.Client, class2, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClass2Name 根据子类别、书名、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClass2Name(es *elasticsearch.Client, class2, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClass2Name 根据子类别、书名、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClass2Name 根据子类别、书名、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClass2Name 根据子类别、书名、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClass2Name(es *elasticsearch.Client, class2, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClass2Name 根据子类别、书名、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClass2Name(es *elasticsearch.Client, class2, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClass2Name 根据子类别、书名、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClass2Name(es *elasticsearch.Client, class2, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClass2Name 根据子类别、书名、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClass2Name(es *elasticsearch.Client, class2, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClass2Name 根据子类别、书名、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClass2Name(es *elasticsearch.Client, class2, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteClass2Seq 根据子类别、编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtClass2Seq 根据子类别、编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtClass2Seq 根据子类别、编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteClass2Seq 根据子类别、编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteClass2Seq 根据子类别、编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteClass2Seq 根据子类别、编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtClass2Seq 根据子类别、编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtClass2Seq(es *elasticsearch.Client, class2, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtClass2Seq 根据子类别、编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtClass2Seq(es *elasticsearch.Client, class2, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteClass2Seq 根据子类别、编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteClass2Seq 根据子类别、编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteNameSeq 根据书名、编号、页数大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
func HourHistReleaseDateOfBooksByPageCountGteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGtNameSeq 根据书名、编号、页数大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
func HourHistReleaseDateOfBooksByPageCountGtNameSeq(es *elasticsearch.Client, name, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLtNameSeq 根据书名、编号、页数小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
func HourHistReleaseDateOfBooksByPageCountLtNameSeq(es *elasticsearch.Client, name, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountLteNameSeq 根据书名、编号、页数小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPageCountGteLteNameSeq 根据书名、编号、页数大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func HourHistReleaseDateOfBooksByPageCountGteLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteNameSeq 根据书名、编号、价格大于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
func HourHistReleaseDateOfBooksByPriceGteNameSeq(es *elasticsearch.Client, name, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGtNameSeq 根据书名、编号、价格大于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// priceGt float64 价格大于
func HourHistReleaseDateOfBooksByPriceGtNameSeq(es *elasticsearch.Client, name, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLtNameSeq 根据书名、编号、价格小于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// priceLt float64 价格小于
func HourHistReleaseDateOfBooksByPriceLtNameSeq(es *elasticsearch.Client, name, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceLteNameSeq 根据书名、编号、价格小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceLteNameSeq(es *elasticsearch.Client, name, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HourHistReleaseDateOfBooksByPriceGteLteNameSeq 根据书名、编号、价格大于等于和小于等于检索books表并按发布日期分桶统计每小时的记录数量直方图分布
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func HourHistReleaseDateOfBooksByPriceGteLteNameSeq(es *elasticsearch.Client, name, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

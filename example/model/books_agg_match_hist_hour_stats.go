// Code generated by es2go. DO NOT EDIT.
// gen_agg_match_date_hist_stats.go

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// StatsPageCountInHourHistReleaseDateOfBooksByAllText 根据全文本检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
func StatsPageCountInHourHistReleaseDateOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllText 根据全文本检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
func StatsPriceInHourHistReleaseDateOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthor 根据作者检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
func StatsPageCountInHourHistReleaseDateOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthor 根据作者检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
func StatsPriceInHourHistReleaseDateOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass 根据类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
func StatsPageCountInHourHistReleaseDateOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass 根据类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
func StatsPriceInHourHistReleaseDateOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2 根据子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2 根据子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByName 根据书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByName 根据书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByPageCount 根据页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByPrice 根据价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksBySeq 根据编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksBySeq 根据编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthor 根据全文本、作者检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass 根据全文本、类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass 根据全文本、类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2 根据全文本、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextName 根据全文本、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextName 根据全文本、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextPageCount 根据全文本、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextPrice 根据全文本、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextSeq 根据全文本、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextSeq 根据全文本、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass 根据作者、类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass 根据作者、类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2 根据作者、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2 根据作者、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorName 根据作者、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorName 根据作者、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorPageCount 根据作者、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorPrice 根据作者、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorSeq 根据作者、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorSeq 根据作者、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2 根据类别、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2 根据类别、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassName 根据类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassName 根据类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassPageCount 根据类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassPrice 根据类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassSeq 根据类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassSeq 根据类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2Name 根据子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2Name 根据子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2PageCount 根据子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2Price 根据子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2Seq 根据子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2Seq 根据子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByNamePageCount 根据书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByNamePrice 根据书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByNameSeq 根据书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByNameSeq 根据书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByPageCountSeq 根据页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByPriceSeq 根据价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassName 根据全文本、类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassName 根据作者、类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2Name 根据类别、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Price 根据类别、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassNamePageCount 根据类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassNamePrice 根据类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassNameSeq 根据类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassPriceSeq 根据类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByNamePriceSeq 根据书名、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPriceInHourHistReleaseDateOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表，并按发布日期分桶统计每小时价格的统计信息
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func StatsPriceInHourHistReleaseDateOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("price"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// StatsPageCountInHourHistReleaseDateOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表，并按发布日期分桶统计每小时页数的统计信息
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func StatsPageCountInHourHistReleaseDateOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.DateHistogramAgg("release_date", eq.WithCalendarInterval("hour"))
	aggs = aggs.Nested(eq.StatsAgg("page_count"))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

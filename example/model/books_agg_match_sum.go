// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// SumPageCountOfBooksByAllText 根据全文本检索books表并计算页数的总和
// allText string 全文本
func SumPageCountOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllText 根据全文本检索books表并计算价格的总和
// allText string 全文本
func SumPriceOfBooksByAllText(es *elasticsearch.Client, allText string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthor 根据作者检索books表并计算页数的总和
// author string 作者
func SumPageCountOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthor 根据作者检索books表并计算价格的总和
// author string 作者
func SumPriceOfBooksByAuthor(es *elasticsearch.Client, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass 根据类别检索books表并计算页数的总和
// class string 类别
func SumPageCountOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass 根据类别检索books表并计算价格的总和
// class string 类别
func SumPriceOfBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2 根据子类别检索books表并计算页数的总和
// class2 string 子类别
func SumPageCountOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2 根据子类别检索books表并计算价格的总和
// class2 string 子类别
func SumPriceOfBooksByClass2(es *elasticsearch.Client, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByName 根据书名检索books表并计算页数的总和
// name string 书名
func SumPageCountOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByName 根据书名检索books表并计算价格的总和
// name string 书名
func SumPriceOfBooksByName(es *elasticsearch.Client, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByPageCount 根据页数检索books表并计算价格的总和
// pageCount int64 页数
func SumPriceOfBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByPrice 根据价格检索books表并计算页数的总和
// price float64 价格
func SumPageCountOfBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByReleaseDate 根据发布日期检索books表并计算页数的总和
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByReleaseDate 根据发布日期检索books表并计算价格的总和
// releaseDate time.Time 发布日期
func SumPriceOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksBySeq 根据编号检索books表并计算页数的总和
// seq string 编号
func SumPageCountOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksBySeq 根据编号检索books表并计算价格的总和
// seq string 编号
func SumPriceOfBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthor 根据全文本、作者检索books表并计算页数的总和
// allText string 全文本
// author string 作者
func SumPageCountOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthor 根据全文本、作者检索books表并计算价格的总和
// allText string 全文本
// author string 作者
func SumPriceOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass 根据全文本、类别检索books表并计算页数的总和
// allText string 全文本
// class string 类别
func SumPageCountOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass 根据全文本、类别检索books表并计算价格的总和
// allText string 全文本
// class string 类别
func SumPriceOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2 根据全文本、子类别检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
func SumPageCountOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2 根据全文本、子类别检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
func SumPriceOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextName 根据全文本、书名检索books表并计算页数的总和
// allText string 全文本
// name string 书名
func SumPageCountOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextName 根据全文本、书名检索books表并计算价格的总和
// allText string 全文本
// name string 书名
func SumPriceOfBooksByAllTextName(es *elasticsearch.Client, allText, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextPageCount 根据全文本、页数检索books表并计算价格的总和
// allText string 全文本
// pageCount int64 页数
func SumPriceOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextPrice 根据全文本、价格检索books表并计算页数的总和
// allText string 全文本
// price float64 价格
func SumPageCountOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并计算页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并计算价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextSeq 根据全文本、编号检索books表并计算页数的总和
// allText string 全文本
// seq string 编号
func SumPageCountOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextSeq 根据全文本、编号检索books表并计算价格的总和
// allText string 全文本
// seq string 编号
func SumPriceOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass 根据作者、类别检索books表并计算页数的总和
// author string 作者
// class string 类别
func SumPageCountOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass 根据作者、类别检索books表并计算价格的总和
// author string 作者
// class string 类别
func SumPriceOfBooksByAuthorClass(es *elasticsearch.Client, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2 根据作者、子类别检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
func SumPageCountOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2 根据作者、子类别检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
func SumPriceOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorName 根据作者、书名检索books表并计算页数的总和
// author string 作者
// name string 书名
func SumPageCountOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorName 根据作者、书名检索books表并计算价格的总和
// author string 作者
// name string 书名
func SumPriceOfBooksByAuthorName(es *elasticsearch.Client, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorPageCount 根据作者、页数检索books表并计算价格的总和
// author string 作者
// pageCount int64 页数
func SumPriceOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorPrice 根据作者、价格检索books表并计算页数的总和
// author string 作者
// price float64 价格
func SumPageCountOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并计算页数的总和
// author string 作者
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并计算价格的总和
// author string 作者
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorSeq 根据作者、编号检索books表并计算页数的总和
// author string 作者
// seq string 编号
func SumPageCountOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorSeq 根据作者、编号检索books表并计算价格的总和
// author string 作者
// seq string 编号
func SumPriceOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2 根据类别、子类别检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
func SumPageCountOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2 根据类别、子类别检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
func SumPriceOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassName 根据类别、书名检索books表并计算页数的总和
// class string 类别
// name string 书名
func SumPageCountOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassName 根据类别、书名检索books表并计算价格的总和
// class string 类别
// name string 书名
func SumPriceOfBooksByClassName(es *elasticsearch.Client, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassPageCount 根据类别、页数检索books表并计算价格的总和
// class string 类别
// pageCount int64 页数
func SumPriceOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassPrice 根据类别、价格检索books表并计算页数的总和
// class string 类别
// price float64 价格
func SumPageCountOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassReleaseDate 根据类别、发布日期检索books表并计算页数的总和
// class string 类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassReleaseDate 根据类别、发布日期检索books表并计算价格的总和
// class string 类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassSeq 根据类别、编号检索books表并计算页数的总和
// class string 类别
// seq string 编号
func SumPageCountOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassSeq 根据类别、编号检索books表并计算价格的总和
// class string 类别
// seq string 编号
func SumPriceOfBooksByClassSeq(es *elasticsearch.Client, class, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2Name 根据子类别、书名检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2Name 根据子类别、书名检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByClass2Name(es *elasticsearch.Client, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2PageCount 根据子类别、页数检索books表并计算价格的总和
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2Price 根据子类别、价格检索books表并计算页数的总和
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并计算页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并计算价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2Seq 根据子类别、编号检索books表并计算页数的总和
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2Seq 根据子类别、编号检索books表并计算价格的总和
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNamePageCount 根据书名、页数检索books表并计算价格的总和
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNamePrice 根据书名、价格检索books表并计算页数的总和
// name string 书名
// price float64 价格
func SumPageCountOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNameReleaseDate 根据书名、发布日期检索books表并计算页数的总和
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNameReleaseDate 根据书名、发布日期检索books表并计算价格的总和
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNameSeq 根据书名、编号检索books表并计算页数的总和
// name string 书名
// seq string 编号
func SumPageCountOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNameSeq 根据书名、编号检索books表并计算价格的总和
// name string 书名
// seq string 编号
func SumPriceOfBooksByNameSeq(es *elasticsearch.Client, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByPageCountReleaseDate 根据页数、发布日期检索books表并计算价格的总和
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByPageCountSeq 根据页数、编号检索books表并计算价格的总和
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByPriceReleaseDate 根据价格、发布日期检索books表并计算页数的总和
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByPriceSeq 根据价格、编号检索books表并计算页数的总和
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并计算页数的总和
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并计算价格的总和
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
func SumPageCountOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
func SumPriceOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
func SumPageCountOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
func SumPriceOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// name string 书名
func SumPageCountOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// name string 书名
func SumPriceOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
func SumPriceOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
func SumPageCountOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// seq string 编号
func SumPriceOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
func SumPageCountOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
func SumPriceOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// name string 书名
func SumPageCountOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// name string 书名
func SumPriceOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
func SumPriceOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
func SumPageCountOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// seq string 编号
func SumPageCountOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// seq string 编号
func SumPriceOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// seq string 编号
func SumPriceOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextPageCountReleaseDate 根据全文本、页数、发布日期检索books表并计算价格的总和
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表并计算价格的总和
// allText string 全文本
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextPriceReleaseDate 根据全文本、价格、发布日期检索books表并计算页数的总和
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表并计算页数的总和
// allText string 全文本
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并计算页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
func SumPageCountOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并计算价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
func SumPriceOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassName 根据作者、类别、书名检索books表并计算页数的总和
// author string 作者
// class string 类别
// name string 书名
func SumPageCountOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassName 根据作者、类别、书名检索books表并计算价格的总和
// author string 作者
// class string 类别
// name string 书名
func SumPriceOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表并计算价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
func SumPriceOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表并计算页数的总和
// author string 作者
// class string 类别
// price float64 价格
func SumPageCountOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并计算页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并计算价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并计算页数的总和
// author string 作者
// class string 类别
// seq string 编号
func SumPageCountOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并计算价格的总和
// author string 作者
// class string 类别
// seq string 编号
func SumPriceOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表并计算价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表并计算页数的总和
// author string 作者
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并计算页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并计算价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并计算页数的总和
// author string 作者
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并计算价格的总和
// author string 作者
// name string 书名
// seq string 编号
func SumPriceOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorPageCountReleaseDate 根据作者、页数、发布日期检索books表并计算价格的总和
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表并计算价格的总和
// author string 作者
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorPriceReleaseDate 根据作者、价格、发布日期检索books表并计算页数的总和
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表并计算页数的总和
// author string 作者
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并计算页数的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并计算价格的总和
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2Price 根据类别、子类别、价格检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNamePageCount 根据类别、书名、页数检索books表并计算价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNamePrice 根据类别、书名、价格检索books表并计算页数的总和
// class string 类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并计算页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并计算价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNameSeq 根据类别、书名、编号检索books表并计算页数的总和
// class string 类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNameSeq 根据类别、书名、编号检索books表并计算价格的总和
// class string 类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassPageCountReleaseDate 根据类别、页数、发布日期检索books表并计算价格的总和
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表并计算价格的总和
// class string 类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassPriceReleaseDate 根据类别、价格、发布日期检索books表并计算页数的总和
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassPriceSeq 根据类别、价格、编号检索books表并计算页数的总和
// class string 类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并计算页数的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并计算价格的总和
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2PageCountReleaseDate 根据子类别、页数、发布日期检索books表并计算价格的总和
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表并计算价格的总和
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2PriceReleaseDate 根据子类别、价格、发布日期检索books表并计算页数的总和
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表并计算页数的总和
// class2 string 子类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并计算页数的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并计算价格的总和
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNamePageCountReleaseDate 根据书名、页数、发布日期检索books表并计算价格的总和
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表并计算价格的总和
// name string 书名
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNamePriceReleaseDate 根据书名、价格、发布日期检索books表并计算页数的总和
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNamePriceSeq 根据书名、价格、编号检索books表并计算页数的总和
// name string 书名
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并计算页数的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并计算价格的总和
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByPageCountReleaseDateSeq 根据页数、发布日期、编号检索books表并计算价格的总和
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByPriceReleaseDateSeq 根据价格、发布日期、编号检索books表并计算页数的总和
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func SumPageCountOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
func SumPriceOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func SumPageCountOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
func SumPriceOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
func SumPriceOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
func SumPageCountOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
func SumPriceOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
func SumPriceOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorPageCountReleaseDate 根据全文本、作者、页数、发布日期检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextAuthorPageCountReleaseDate(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorPriceReleaseDate 根据全文本、作者、价格、发布日期检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextAuthorPriceReleaseDate(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassPageCountReleaseDate 根据全文本、类别、页数、发布日期检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClassPageCountReleaseDate(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassPriceReleaseDate 根据全文本、类别、价格、发布日期检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClassPriceReleaseDate(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2PageCountReleaseDate 根据全文本、子类别、页数、发布日期检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextClass2PageCountReleaseDate(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2PriceReleaseDate 根据全文本、子类别、价格、发布日期检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextClass2PriceReleaseDate(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNamePageCountReleaseDate 根据全文本、书名、页数、发布日期检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAllTextNamePageCountReleaseDate(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNamePriceReleaseDate 根据全文本、书名、价格、发布日期检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAllTextNamePriceReleaseDate(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAllTextPageCountReleaseDateSeq 根据全文本、页数、发布日期、编号检索books表并计算价格的总和
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAllTextPageCountReleaseDateSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAllTextPriceReleaseDateSeq 根据全文本、价格、发布日期、编号检索books表并计算页数的总和
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAllTextPriceReleaseDateSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并计算页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func SumPageCountOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并计算价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
func SumPriceOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表并计算价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
func SumPriceOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表并计算页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
func SumPageCountOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并计算页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并计算价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并计算页数的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPageCountOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并计算价格的总和
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
func SumPriceOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表并计算价格的总和
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表并计算页数的总和
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并计算页数的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并计算价格的总和
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并计算页数的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并计算价格的总和
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassPageCountReleaseDate 根据作者、类别、页数、发布日期检索books表并计算价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表并计算价格的总和
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassPriceReleaseDate 根据作者、类别、价格、发布日期检索books表并计算页数的总和
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表并计算页数的总和
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并计算页数的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并计算价格的总和
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2PageCountReleaseDate 根据作者、子类别、页数、发布日期检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorClass2PageCountReleaseDate(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2PriceReleaseDate 根据作者、子类别、价格、发布日期检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorClass2PriceReleaseDate(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并计算页数的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并计算价格的总和
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNamePageCountReleaseDate 根据作者、书名、页数、发布日期检索books表并计算价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表并计算价格的总和
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNamePriceReleaseDate 根据作者、书名、价格、发布日期检索books表并计算页数的总和
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表并计算页数的总和
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并计算页数的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并计算价格的总和
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByAuthorPageCountReleaseDateSeq 根据作者、页数、发布日期、编号检索books表并计算价格的总和
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByAuthorPriceReleaseDateSeq 根据作者、价格、发布日期、编号检索books表并计算页数的总和
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
func SumPriceOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
func SumPageCountOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPageCountOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
func SumPriceOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2PageCountReleaseDate 根据类别、子类别、页数、发布日期检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassClass2PageCountReleaseDate(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2PriceReleaseDate 根据类别、子类别、价格、发布日期检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassClass2PriceReleaseDate(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并计算页数的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并计算价格的总和
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNamePageCountReleaseDate 根据类别、书名、页数、发布日期检索books表并计算价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表并计算价格的总和
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNamePriceReleaseDate 根据类别、书名、价格、发布日期检索books表并计算页数的总和
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表并计算页数的总和
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并计算页数的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并计算价格的总和
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClassPageCountReleaseDateSeq 根据类别、页数、发布日期、编号检索books表并计算价格的总和
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClassPriceReleaseDateSeq 根据类别、价格、发布日期、编号检索books表并计算页数的总和
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NamePageCountReleaseDate 根据子类别、书名、页数、发布日期检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
func SumPriceOfBooksByClass2NamePageCountReleaseDate(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
func SumPriceOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NamePriceReleaseDate 根据子类别、书名、价格、发布日期检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
func SumPageCountOfBooksByClass2NamePriceReleaseDate(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
func SumPageCountOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并计算页数的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并计算价格的总和
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByClass2PageCountReleaseDateSeq 根据子类别、页数、发布日期、编号检索books表并计算价格的总和
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByClass2PageCountReleaseDateSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByClass2PriceReleaseDateSeq 根据子类别、价格、发布日期、编号检索books表并计算页数的总和
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByClass2PriceReleaseDateSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPriceOfBooksByNamePageCountReleaseDateSeq 根据书名、页数、发布日期、编号检索books表并计算价格的总和
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
func SumPriceOfBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("price")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// SumPageCountOfBooksByNamePriceReleaseDateSeq 根据书名、价格、发布日期、编号检索books表并计算页数的总和
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
func SumPageCountOfBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.SumAgg("page_count")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

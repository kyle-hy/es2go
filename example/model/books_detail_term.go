// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// TermBooksByClass 以class为条件精确查询books的详细数据列表和总数量
// class string class
func TermBooksByClass(es *elasticsearch.Client, class string) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Term("class", class),
	}

	return queryBooksList(es, esQuery)
}

// TermBooksBySeq 以seq为条件精确查询books的详细数据列表和总数量
// seq string seq
func TermBooksBySeq(es *elasticsearch.Client, seq string) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Term("seq", seq),
	}

	return queryBooksList(es, esQuery)
}

// TermBooksByPageCount 以page_count为条件精确查询books的详细数据列表和总数量
// pageCount int64 page_count
func TermBooksByPageCount(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Term("page_count", pageCount),
	}

	return queryBooksList(es, esQuery)
}

// TermBooksByPrice 以价格为条件精确查询books的详细数据列表和总数量
// price float64 价格
func TermBooksByPrice(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Term("price", price),
	}

	return queryBooksList(es, esQuery)
}

// TermBooksByClassSeq 以class、seq为条件精确查询books的详细数据列表和总数量
// class string class
// seq string seq
func TermBooksByClassSeq(es *elasticsearch.Client, class string, seq string) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassPageCount 以class、page_count为条件精确查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
func TermBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassPrice 以class、价格为条件精确查询books的详细数据列表和总数量
// class string class
// price float64 价格
func TermBooksByClassPrice(es *elasticsearch.Client, class string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksBySeqPageCount 以seq、page_count为条件精确查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
func TermBooksBySeqPageCount(es *elasticsearch.Client, seq string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksBySeqPrice 以seq、价格为条件精确查询books的详细数据列表和总数量
// seq string seq
// price float64 价格
func TermBooksBySeqPrice(es *elasticsearch.Client, seq string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByPageCountPrice 以page_count、价格为条件精确查询books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func TermBooksByPageCountPrice(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassSeqPageCount 以class、seq、page_count为条件精确查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
func TermBooksByClassSeqPageCount(es *elasticsearch.Client, class string, seq string, pageCount int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassSeqPrice 以class、seq、价格为条件精确查询books的详细数据列表和总数量
// class string class
// seq string seq
// price float64 价格
func TermBooksByClassSeqPrice(es *elasticsearch.Client, class string, seq string, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassPageCountPrice 以class、page_count、价格为条件精确查询books的详细数据列表和总数量
// class string class
// pageCount int64 page_count
// price float64 价格
func TermBooksByClassPageCountPrice(es *elasticsearch.Client, class string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksBySeqPageCountPrice 以seq、page_count、价格为条件精确查询books的详细数据列表和总数量
// seq string seq
// pageCount int64 page_count
// price float64 价格
func TermBooksBySeqPageCountPrice(es *elasticsearch.Client, seq string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

// TermBooksByClassSeqPageCountPrice 以class、seq、page_count、价格为条件精确查询books的详细数据列表和总数量
// class string class
// seq string seq
// pageCount int64 page_count
// price float64 价格
func TermBooksByClassSeqPageCountPrice(es *elasticsearch.Client, class string, seq string, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Term("page_count", pageCount),
		eq.Term("price", price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(terms))}
	return queryBooksList(es, esQuery)
}

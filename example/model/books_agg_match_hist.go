// Code generated by es2go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// HistPageCountOfBooksByAllText 根据全文本检索books表并统计页数的数量直方图分布
// allText string 全文本
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllText 根据全文本检索books表并统计价格的数量直方图分布
// allText string 全文本
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllText(es *elasticsearch.Client, allText string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthor 根据作者检索books表并统计页数的数量直方图分布
// author string 作者
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthor 根据作者检索books表并统计价格的数量直方图分布
// author string 作者
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthor(es *elasticsearch.Client, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass 根据类别检索books表并统计页数的数量直方图分布
// class string 类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass 根据类别检索books表并统计价格的数量直方图分布
// class string 类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass(es *elasticsearch.Client, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2 根据子类别检索books表并统计页数的数量直方图分布
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2 根据子类别检索books表并统计价格的数量直方图分布
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2(es *elasticsearch.Client, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByName 根据书名检索books表并统计页数的数量直方图分布
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByName 根据书名检索books表并统计价格的数量直方图分布
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByName(es *elasticsearch.Client, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByPageCount 根据页数检索books表并统计价格的数量直方图分布
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByPageCount(es *elasticsearch.Client, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByPrice 根据价格检索books表并统计页数的数量直方图分布
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByPrice(es *elasticsearch.Client, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByReleaseDate 根据发布日期检索books表并统计页数的数量直方图分布
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByReleaseDate 根据发布日期检索books表并统计价格的数量直方图分布
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByReleaseDate(es *elasticsearch.Client, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksBySeq 根据编号检索books表并统计页数的数量直方图分布
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksBySeq 根据编号检索books表并统计价格的数量直方图分布
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksBySeq(es *elasticsearch.Client, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthor 根据全文本、作者检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthor 根据全文本、作者检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthor(es *elasticsearch.Client, allText, author string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass 根据全文本、类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass 根据全文本、类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass(es *elasticsearch.Client, allText, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2 根据全文本、子类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2 根据全文本、子类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2(es *elasticsearch.Client, allText, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextName 根据全文本、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextName 根据全文本、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextName(es *elasticsearch.Client, allText, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextPageCount 根据全文本、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextPageCount(es *elasticsearch.Client, allText string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextPrice 根据全文本、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextPrice(es *elasticsearch.Client, allText string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextReleaseDate 根据全文本、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextReleaseDate(es *elasticsearch.Client, allText string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextSeq 根据全文本、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextSeq 根据全文本、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextSeq(es *elasticsearch.Client, allText, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass 根据作者、类别检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass 根据作者、类别检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass(es *elasticsearch.Client, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2 根据作者、子类别检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2 根据作者、子类别检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2(es *elasticsearch.Client, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorName 根据作者、书名检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorName 根据作者、书名检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorName(es *elasticsearch.Client, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorPageCount 根据作者、页数检索books表并统计价格的数量直方图分布
// author string 作者
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorPageCount(es *elasticsearch.Client, author string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorPrice 根据作者、价格检索books表并统计页数的数量直方图分布
// author string 作者
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorPrice(es *elasticsearch.Client, author string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorReleaseDate 根据作者、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorReleaseDate(es *elasticsearch.Client, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorSeq 根据作者、编号检索books表并统计页数的数量直方图分布
// author string 作者
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorSeq 根据作者、编号检索books表并统计价格的数量直方图分布
// author string 作者
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorSeq(es *elasticsearch.Client, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2 根据类别、子类别检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2 根据类别、子类别检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2(es *elasticsearch.Client, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassName 根据类别、书名检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassName 根据类别、书名检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassName(es *elasticsearch.Client, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassPageCount 根据类别、页数检索books表并统计价格的数量直方图分布
// class string 类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassPageCount(es *elasticsearch.Client, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassPrice 根据类别、价格检索books表并统计页数的数量直方图分布
// class string 类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassPrice(es *elasticsearch.Client, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassReleaseDate 根据类别、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassReleaseDate 根据类别、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassReleaseDate(es *elasticsearch.Client, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassSeq 根据类别、编号检索books表并统计页数的数量直方图分布
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassSeq 根据类别、编号检索books表并统计价格的数量直方图分布
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassSeq(es *elasticsearch.Client, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2Name 根据子类别、书名检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2Name 根据子类别、书名检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2Name(es *elasticsearch.Client, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2PageCount 根据子类别、页数检索books表并统计价格的数量直方图分布
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2PageCount(es *elasticsearch.Client, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2Price 根据子类别、价格检索books表并统计页数的数量直方图分布
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2Price(es *elasticsearch.Client, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并统计页数的数量直方图分布
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2ReleaseDate 根据子类别、发布日期检索books表并统计价格的数量直方图分布
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2ReleaseDate(es *elasticsearch.Client, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2Seq 根据子类别、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2Seq 根据子类别、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2Seq(es *elasticsearch.Client, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNamePageCount 根据书名、页数检索books表并统计价格的数量直方图分布
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNamePageCount(es *elasticsearch.Client, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNamePrice 根据书名、价格检索books表并统计页数的数量直方图分布
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNamePrice(es *elasticsearch.Client, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNameReleaseDate 根据书名、发布日期检索books表并统计页数的数量直方图分布
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNameReleaseDate 根据书名、发布日期检索books表并统计价格的数量直方图分布
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNameReleaseDate(es *elasticsearch.Client, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNameSeq 根据书名、编号检索books表并统计页数的数量直方图分布
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNameSeq 根据书名、编号检索books表并统计价格的数量直方图分布
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNameSeq(es *elasticsearch.Client, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByPageCountReleaseDate 根据页数、发布日期检索books表并统计价格的数量直方图分布
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByPageCountReleaseDate(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByPageCountSeq 根据页数、编号检索books表并统计价格的数量直方图分布
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByPageCountSeq(es *elasticsearch.Client, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByPriceReleaseDate 根据价格、发布日期检索books表并统计页数的数量直方图分布
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByPriceReleaseDate(es *elasticsearch.Client, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByPriceSeq 根据价格、编号检索books表并统计页数的数量直方图分布
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByPriceSeq(es *elasticsearch.Client, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并统计页数的数量直方图分布
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByReleaseDateSeq 根据发布日期、编号检索books表并统计价格的数量直方图分布
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByReleaseDateSeq(es *elasticsearch.Client, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass 根据全文本、作者、类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass(es *elasticsearch.Client, allText, author, class string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass2 根据全文本、作者、子类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass2(es *elasticsearch.Client, allText, author, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorName 根据全文本、作者、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorName(es *elasticsearch.Client, allText, author, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorPageCount 根据全文本、作者、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorPageCount(es *elasticsearch.Client, allText, author string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorPrice 根据全文本、作者、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorPrice(es *elasticsearch.Client, allText, author string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorReleaseDate 根据全文本、作者、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorReleaseDate(es *elasticsearch.Client, allText, author string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorSeq 根据全文本、作者、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorSeq(es *elasticsearch.Client, allText, author, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassClass2 根据全文本、类别、子类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassClass2(es *elasticsearch.Client, allText, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassName 根据全文本、类别、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassName(es *elasticsearch.Client, allText, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassPageCount 根据全文本、类别、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassPageCount(es *elasticsearch.Client, allText, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassPrice 根据全文本、类别、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassPrice(es *elasticsearch.Client, allText, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassReleaseDate 根据全文本、类别、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassReleaseDate(es *elasticsearch.Client, allText, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassSeq 根据全文本、类别、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassSeq(es *elasticsearch.Client, allText, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2Name 根据全文本、子类别、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2Name(es *elasticsearch.Client, allText, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2PageCount 根据全文本、子类别、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2PageCount(es *elasticsearch.Client, allText, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2Price 根据全文本、子类别、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2Price(es *elasticsearch.Client, allText, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2ReleaseDate 根据全文本、子类别、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2ReleaseDate(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2Seq 根据全文本、子类别、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2Seq(es *elasticsearch.Client, allText, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNamePageCount 根据全文本、书名、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNamePageCount(es *elasticsearch.Client, allText, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNamePrice 根据全文本、书名、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNamePrice(es *elasticsearch.Client, allText, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNameReleaseDate 根据全文本、书名、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNameReleaseDate(es *elasticsearch.Client, allText, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNameSeq 根据全文本、书名、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNameSeq(es *elasticsearch.Client, allText, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextPageCountReleaseDate 根据全文本、页数、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextPageCountReleaseDate(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextPageCountSeq 根据全文本、页数、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextPageCountSeq(es *elasticsearch.Client, allText string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextPriceReleaseDate 根据全文本、价格、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextPriceReleaseDate(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextPriceSeq 根据全文本、价格、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextPriceSeq(es *elasticsearch.Client, allText string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextReleaseDateSeq 根据全文本、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextReleaseDateSeq(es *elasticsearch.Client, allText string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassClass2 根据作者、类别、子类别检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassClass2(es *elasticsearch.Client, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassName 根据作者、类别、书名检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassName 根据作者、类别、书名检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassName(es *elasticsearch.Client, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassPageCount 根据作者、类别、页数检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassPageCount(es *elasticsearch.Client, author, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassPrice 根据作者、类别、价格检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassPrice(es *elasticsearch.Client, author, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassReleaseDate 根据作者、类别、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassReleaseDate(es *elasticsearch.Client, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassSeq 根据作者、类别、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassSeq(es *elasticsearch.Client, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2Name 根据作者、子类别、书名检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2Name(es *elasticsearch.Client, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2PageCount 根据作者、子类别、页数检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2PageCount(es *elasticsearch.Client, author, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2Price 根据作者、子类别、价格检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2Price(es *elasticsearch.Client, author, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2ReleaseDate 根据作者、子类别、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2ReleaseDate(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2Seq 根据作者、子类别、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2Seq(es *elasticsearch.Client, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNamePageCount 根据作者、书名、页数检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNamePageCount(es *elasticsearch.Client, author, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNamePrice 根据作者、书名、价格检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNamePrice(es *elasticsearch.Client, author, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNameReleaseDate 根据作者、书名、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNameReleaseDate(es *elasticsearch.Client, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNameSeq 根据作者、书名、编号检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNameSeq(es *elasticsearch.Client, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorPageCountReleaseDate 根据作者、页数、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorPageCountReleaseDate(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorPageCountSeq 根据作者、页数、编号检索books表并统计价格的数量直方图分布
// author string 作者
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorPageCountSeq(es *elasticsearch.Client, author string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorPriceReleaseDate 根据作者、价格、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorPriceReleaseDate(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorPriceSeq 根据作者、价格、编号检索books表并统计页数的数量直方图分布
// author string 作者
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorPriceSeq(es *elasticsearch.Client, author string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并统计页数的数量直方图分布
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorReleaseDateSeq 根据作者、发布日期、编号检索books表并统计价格的数量直方图分布
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorReleaseDateSeq(es *elasticsearch.Client, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2Name 根据类别、子类别、书名检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2Name(es *elasticsearch.Client, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2PageCount 根据类别、子类别、页数检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2PageCount(es *elasticsearch.Client, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2Price 根据类别、子类别、价格检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2Price(es *elasticsearch.Client, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2ReleaseDate 根据类别、子类别、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2ReleaseDate(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2Seq 根据类别、子类别、编号检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2Seq(es *elasticsearch.Client, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNamePageCount 根据类别、书名、页数检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNamePageCount(es *elasticsearch.Client, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNamePrice 根据类别、书名、价格检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNamePrice(es *elasticsearch.Client, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNameReleaseDate 根据类别、书名、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNameReleaseDate(es *elasticsearch.Client, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNameSeq 根据类别、书名、编号检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNameSeq 根据类别、书名、编号检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNameSeq(es *elasticsearch.Client, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassPageCountReleaseDate 根据类别、页数、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassPageCountReleaseDate(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassPageCountSeq 根据类别、页数、编号检索books表并统计价格的数量直方图分布
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassPageCountSeq(es *elasticsearch.Client, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassPriceReleaseDate 根据类别、价格、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassPriceReleaseDate(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassPriceSeq 根据类别、价格、编号检索books表并统计页数的数量直方图分布
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassPriceSeq(es *elasticsearch.Client, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并统计页数的数量直方图分布
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassReleaseDateSeq 根据类别、发布日期、编号检索books表并统计价格的数量直方图分布
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassReleaseDateSeq(es *elasticsearch.Client, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NamePageCount 根据子类别、书名、页数检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NamePageCount(es *elasticsearch.Client, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NamePrice 根据子类别、书名、价格检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NamePrice(es *elasticsearch.Client, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NameReleaseDate 根据子类别、书名、发布日期检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NameReleaseDate(es *elasticsearch.Client, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NameSeq 根据子类别、书名、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NameSeq(es *elasticsearch.Client, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2PageCountReleaseDate 根据子类别、页数、发布日期检索books表并统计价格的数量直方图分布
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2PageCountReleaseDate(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2PageCountSeq 根据子类别、页数、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2PageCountSeq(es *elasticsearch.Client, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2PriceReleaseDate 根据子类别、价格、发布日期检索books表并统计页数的数量直方图分布
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2PriceReleaseDate(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2PriceSeq 根据子类别、价格、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2PriceSeq(es *elasticsearch.Client, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2ReleaseDateSeq 根据子类别、发布日期、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2ReleaseDateSeq(es *elasticsearch.Client, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNamePageCountReleaseDate 根据书名、页数、发布日期检索books表并统计价格的数量直方图分布
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNamePageCountReleaseDate(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNamePageCountSeq 根据书名、页数、编号检索books表并统计价格的数量直方图分布
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNamePageCountSeq(es *elasticsearch.Client, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNamePriceReleaseDate 根据书名、价格、发布日期检索books表并统计页数的数量直方图分布
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNamePriceReleaseDate(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNamePriceSeq 根据书名、价格、编号检索books表并统计页数的数量直方图分布
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNamePriceSeq(es *elasticsearch.Client, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并统计页数的数量直方图分布
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNameReleaseDateSeq 根据书名、发布日期、编号检索books表并统计价格的数量直方图分布
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNameReleaseDateSeq(es *elasticsearch.Client, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByPageCountReleaseDateSeq 根据页数、发布日期、编号检索books表并统计价格的数量直方图分布
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByPageCountReleaseDateSeq(es *elasticsearch.Client, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByPriceReleaseDateSeq 根据价格、发布日期、编号检索books表并统计页数的数量直方图分布
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByPriceReleaseDateSeq(es *elasticsearch.Client, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClassClass2 根据全文本、作者、类别、子类别检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// class2 string 子类别
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClassClass2(es *elasticsearch.Client, allText, author, class, class2 string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClassName 根据全文本、作者、类别、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClassName(es *elasticsearch.Client, allText, author, class, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClassPageCount 根据全文本、作者、类别、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClassPageCount(es *elasticsearch.Client, allText, author, class string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClassPrice 根据全文本、作者、类别、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClassPrice(es *elasticsearch.Client, allText, author, class string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClassReleaseDate 根据全文本、作者、类别、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClassReleaseDate(es *elasticsearch.Client, allText, author, class string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClassSeq 根据全文本、作者、类别、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class string 类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClassSeq(es *elasticsearch.Client, allText, author, class, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass2Name 根据全文本、作者、子类别、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass2Name(es *elasticsearch.Client, allText, author, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass2PageCount 根据全文本、作者、子类别、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass2PageCount(es *elasticsearch.Client, allText, author, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass2Price 根据全文本、作者、子类别、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass2Price(es *elasticsearch.Client, allText, author, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass2ReleaseDate 根据全文本、作者、子类别、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass2ReleaseDate(es *elasticsearch.Client, allText, author, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorClass2Seq 根据全文本、作者、子类别、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorClass2Seq(es *elasticsearch.Client, allText, author, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorNamePageCount 根据全文本、作者、书名、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorNamePageCount(es *elasticsearch.Client, allText, author, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorNamePrice 根据全文本、作者、书名、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorNamePrice(es *elasticsearch.Client, allText, author, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorNameReleaseDate 根据全文本、作者、书名、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorNameReleaseDate(es *elasticsearch.Client, allText, author, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorNameSeq 根据全文本、作者、书名、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorNameSeq(es *elasticsearch.Client, allText, author, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorPageCountReleaseDate 根据全文本、作者、页数、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorPageCountReleaseDate(es *elasticsearch.Client, allText, author string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorPageCountSeq 根据全文本、作者、页数、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorPageCountSeq(es *elasticsearch.Client, allText, author string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorPriceReleaseDate 根据全文本、作者、价格、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorPriceReleaseDate(es *elasticsearch.Client, allText, author string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorPriceSeq 根据全文本、作者、价格、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorPriceSeq(es *elasticsearch.Client, allText, author string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextAuthorReleaseDateSeq 根据全文本、作者、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// author string 作者
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextAuthorReleaseDateSeq(es *elasticsearch.Client, allText, author string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassClass2Name 根据全文本、类别、子类别、书名检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassClass2Name(es *elasticsearch.Client, allText, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassClass2PageCount 根据全文本、类别、子类别、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassClass2PageCount(es *elasticsearch.Client, allText, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassClass2Price 根据全文本、类别、子类别、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassClass2Price(es *elasticsearch.Client, allText, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassClass2ReleaseDate 根据全文本、类别、子类别、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassClass2ReleaseDate(es *elasticsearch.Client, allText, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassClass2Seq 根据全文本、类别、子类别、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassClass2Seq(es *elasticsearch.Client, allText, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassNamePageCount 根据全文本、类别、书名、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassNamePageCount(es *elasticsearch.Client, allText, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassNamePrice 根据全文本、类别、书名、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassNamePrice(es *elasticsearch.Client, allText, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassNameReleaseDate 根据全文本、类别、书名、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassNameReleaseDate(es *elasticsearch.Client, allText, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassNameSeq 根据全文本、类别、书名、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassNameSeq(es *elasticsearch.Client, allText, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassPageCountReleaseDate 根据全文本、类别、页数、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassPageCountReleaseDate(es *elasticsearch.Client, allText, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassPageCountSeq 根据全文本、类别、页数、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassPageCountSeq(es *elasticsearch.Client, allText, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassPriceReleaseDate 根据全文本、类别、价格、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassPriceReleaseDate(es *elasticsearch.Client, allText, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassPriceSeq 根据全文本、类别、价格、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassPriceSeq(es *elasticsearch.Client, allText, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClassReleaseDateSeq 根据全文本、类别、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClassReleaseDateSeq(es *elasticsearch.Client, allText, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2NamePageCount 根据全文本、子类别、书名、页数检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2NamePageCount(es *elasticsearch.Client, allText, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2NamePrice 根据全文本、子类别、书名、价格检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2NamePrice(es *elasticsearch.Client, allText, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2NameReleaseDate 根据全文本、子类别、书名、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2NameReleaseDate(es *elasticsearch.Client, allText, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2NameSeq 根据全文本、子类别、书名、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2NameSeq(es *elasticsearch.Client, allText, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2PageCountReleaseDate 根据全文本、子类别、页数、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2PageCountReleaseDate(es *elasticsearch.Client, allText, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2PageCountSeq 根据全文本、子类别、页数、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2PageCountSeq(es *elasticsearch.Client, allText, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2PriceReleaseDate 根据全文本、子类别、价格、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2PriceReleaseDate(es *elasticsearch.Client, allText, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2PriceSeq 根据全文本、子类别、价格、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2PriceSeq(es *elasticsearch.Client, allText, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextClass2ReleaseDateSeq 根据全文本、子类别、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextClass2ReleaseDateSeq(es *elasticsearch.Client, allText, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNamePageCountReleaseDate 根据全文本、书名、页数、发布日期检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNamePageCountReleaseDate(es *elasticsearch.Client, allText, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNamePageCountSeq 根据全文本、书名、页数、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNamePageCountSeq(es *elasticsearch.Client, allText, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNamePriceReleaseDate 根据全文本、书名、价格、发布日期检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNamePriceReleaseDate(es *elasticsearch.Client, allText, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNamePriceSeq 根据全文本、书名、价格、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNamePriceSeq(es *elasticsearch.Client, allText, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextNameReleaseDateSeq 根据全文本、书名、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextNameReleaseDateSeq(es *elasticsearch.Client, allText, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAllTextPageCountReleaseDateSeq 根据全文本、页数、发布日期、编号检索books表并统计价格的数量直方图分布
// allText string 全文本
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAllTextPageCountReleaseDateSeq(es *elasticsearch.Client, allText string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAllTextPriceReleaseDateSeq 根据全文本、价格、发布日期、编号检索books表并统计页数的数量直方图分布
// allText string 全文本
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAllTextPriceReleaseDateSeq(es *elasticsearch.Client, allText string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassClass2Name 根据作者、类别、子类别、书名检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// name string 书名
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassClass2Name(es *elasticsearch.Client, author, class, class2, name string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassClass2PageCount 根据作者、类别、子类别、页数检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassClass2PageCount(es *elasticsearch.Client, author, class, class2 string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassClass2Price 根据作者、类别、子类别、价格检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassClass2Price(es *elasticsearch.Client, author, class, class2 string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassClass2ReleaseDate 根据作者、类别、子类别、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassClass2ReleaseDate(es *elasticsearch.Client, author, class, class2 string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassClass2Seq 根据作者、类别、子类别、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// class2 string 子类别
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassClass2Seq(es *elasticsearch.Client, author, class, class2, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassNamePageCount 根据作者、类别、书名、页数检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassNamePageCount(es *elasticsearch.Client, author, class, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassNamePrice 根据作者、类别、书名、价格检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassNamePrice(es *elasticsearch.Client, author, class, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassNameReleaseDate 根据作者、类别、书名、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassNameReleaseDate(es *elasticsearch.Client, author, class, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassNameSeq 根据作者、类别、书名、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassNameSeq(es *elasticsearch.Client, author, class, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassPageCountReleaseDate 根据作者、类别、页数、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassPageCountReleaseDate(es *elasticsearch.Client, author, class string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassPageCountSeq 根据作者、类别、页数、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassPageCountSeq(es *elasticsearch.Client, author, class string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassPriceReleaseDate 根据作者、类别、价格、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassPriceReleaseDate(es *elasticsearch.Client, author, class string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassPriceSeq 根据作者、类别、价格、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassPriceSeq(es *elasticsearch.Client, author, class string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClassReleaseDateSeq 根据作者、类别、发布日期、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class string 类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClassReleaseDateSeq(es *elasticsearch.Client, author, class string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2NamePageCount 根据作者、子类别、书名、页数检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2NamePageCount(es *elasticsearch.Client, author, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2NamePrice 根据作者、子类别、书名、价格检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2NamePrice(es *elasticsearch.Client, author, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2NameReleaseDate 根据作者、子类别、书名、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2NameReleaseDate(es *elasticsearch.Client, author, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2NameSeq 根据作者、子类别、书名、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2NameSeq(es *elasticsearch.Client, author, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2PageCountReleaseDate 根据作者、子类别、页数、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2PageCountReleaseDate(es *elasticsearch.Client, author, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2PageCountSeq 根据作者、子类别、页数、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2PageCountSeq(es *elasticsearch.Client, author, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2PriceReleaseDate 根据作者、子类别、价格、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2PriceReleaseDate(es *elasticsearch.Client, author, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2PriceSeq 根据作者、子类别、价格、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2PriceSeq(es *elasticsearch.Client, author, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并统计页数的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorClass2ReleaseDateSeq 根据作者、子类别、发布日期、编号检索books表并统计价格的数量直方图分布
// author string 作者
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorClass2ReleaseDateSeq(es *elasticsearch.Client, author, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNamePageCountReleaseDate 根据作者、书名、页数、发布日期检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNamePageCountReleaseDate(es *elasticsearch.Client, author, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNamePageCountSeq 根据作者、书名、页数、编号检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNamePageCountSeq(es *elasticsearch.Client, author, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNamePriceReleaseDate 根据作者、书名、价格、发布日期检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNamePriceReleaseDate(es *elasticsearch.Client, author, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNamePriceSeq 根据作者、书名、价格、编号检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNamePriceSeq(es *elasticsearch.Client, author, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并统计页数的数量直方图分布
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorNameReleaseDateSeq 根据作者、书名、发布日期、编号检索books表并统计价格的数量直方图分布
// author string 作者
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorNameReleaseDateSeq(es *elasticsearch.Client, author, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByAuthorPageCountReleaseDateSeq 根据作者、页数、发布日期、编号检索books表并统计价格的数量直方图分布
// author string 作者
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByAuthorPageCountReleaseDateSeq(es *elasticsearch.Client, author string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByAuthorPriceReleaseDateSeq 根据作者、价格、发布日期、编号检索books表并统计页数的数量直方图分布
// author string 作者
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByAuthorPriceReleaseDateSeq(es *elasticsearch.Client, author string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2NamePageCount 根据类别、子类别、书名、页数检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2NamePageCount(es *elasticsearch.Client, class, class2, name string, pageCount int64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2NamePrice 根据类别、子类别、书名、价格检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// price float64 价格
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2NamePrice(es *elasticsearch.Client, class, class2, name string, price float64, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2NameReleaseDate 根据类别、子类别、书名、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2NameReleaseDate(es *elasticsearch.Client, class, class2, name string, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2NameSeq 根据类别、子类别、书名、编号检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// name string 书名
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2NameSeq(es *elasticsearch.Client, class, class2, name, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2PageCountReleaseDate 根据类别、子类别、页数、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2PageCountReleaseDate(es *elasticsearch.Client, class, class2 string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2PageCountSeq 根据类别、子类别、页数、编号检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2PageCountSeq(es *elasticsearch.Client, class, class2 string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2PriceReleaseDate 根据类别、子类别、价格、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2PriceReleaseDate(es *elasticsearch.Client, class, class2 string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2PriceSeq 根据类别、子类别、价格、编号检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2PriceSeq(es *elasticsearch.Client, class, class2 string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并统计页数的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassClass2ReleaseDateSeq 根据类别、子类别、发布日期、编号检索books表并统计价格的数量直方图分布
// class string 类别
// class2 string 子类别
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassClass2ReleaseDateSeq(es *elasticsearch.Client, class, class2 string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNamePageCountReleaseDate 根据类别、书名、页数、发布日期检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNamePageCountReleaseDate(es *elasticsearch.Client, class, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNamePageCountSeq 根据类别、书名、页数、编号检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNamePageCountSeq(es *elasticsearch.Client, class, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNamePriceReleaseDate 根据类别、书名、价格、发布日期检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNamePriceReleaseDate(es *elasticsearch.Client, class, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNamePriceSeq 根据类别、书名、价格、编号检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNamePriceSeq(es *elasticsearch.Client, class, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并统计页数的数量直方图分布
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassNameReleaseDateSeq 根据类别、书名、发布日期、编号检索books表并统计价格的数量直方图分布
// class string 类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassNameReleaseDateSeq(es *elasticsearch.Client, class, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClassPageCountReleaseDateSeq 根据类别、页数、发布日期、编号检索books表并统计价格的数量直方图分布
// class string 类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClassPageCountReleaseDateSeq(es *elasticsearch.Client, class string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClassPriceReleaseDateSeq 根据类别、价格、发布日期、编号检索books表并统计页数的数量直方图分布
// class string 类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClassPriceReleaseDateSeq(es *elasticsearch.Client, class string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NamePageCountReleaseDate 根据子类别、书名、页数、发布日期检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NamePageCountReleaseDate(es *elasticsearch.Client, class2, name string, pageCount int64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NamePageCountSeq 根据子类别、书名、页数、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// pageCount int64 页数
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NamePageCountSeq(es *elasticsearch.Client, class2, name string, pageCount int64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NamePriceReleaseDate 根据子类别、书名、价格、发布日期检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NamePriceReleaseDate(es *elasticsearch.Client, class2, name string, price float64, releaseDate time.Time, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NamePriceSeq 根据子类别、书名、价格、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// price float64 价格
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NamePriceSeq(es *elasticsearch.Client, class2, name string, price float64, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2NameReleaseDateSeq 根据子类别、书名、发布日期、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// name string 书名
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2NameReleaseDateSeq(es *elasticsearch.Client, class2, name string, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByClass2PageCountReleaseDateSeq 根据子类别、页数、发布日期、编号检索books表并统计价格的数量直方图分布
// class2 string 子类别
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByClass2PageCountReleaseDateSeq(es *elasticsearch.Client, class2 string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByClass2PriceReleaseDateSeq 根据子类别、价格、发布日期、编号检索books表并统计页数的数量直方图分布
// class2 string 子类别
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByClass2PriceReleaseDateSeq(es *elasticsearch.Client, class2 string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPriceOfBooksByNamePageCountReleaseDateSeq 根据书名、页数、发布日期、编号检索books表并统计价格的数量直方图分布
// name string 书名
// pageCount int64 页数
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的价格间隔
func HistPriceOfBooksByNamePageCountReleaseDateSeq(es *elasticsearch.Client, name string, pageCount int64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("page_count", pageCount),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("price", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// HistPageCountOfBooksByNamePriceReleaseDateSeq 根据书名、价格、发布日期、编号检索books表并统计页数的数量直方图分布
// name string 书名
// price float64 价格
// releaseDate time.Time 发布日期
// seq string 编号
// histInterval float64 桶聚合的页数间隔
func HistPageCountOfBooksByNamePriceReleaseDateSeq(es *elasticsearch.Client, name string, price float64, releaseDate time.Time, seq string, histInterval float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("price", price),
		eq.Term("release_date", releaseDate),
		eq.Term("seq", seq),
	}
	aggs := eq.HistogramAgg("page_count", eq.WithInterval(histInterval))
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.
// gen_agg_range_terms.go

package model

import (
	"time"

	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// TermsClassOfBooksByPageCountGte 根据页数大于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGte(es *elasticsearch.Client, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGt 根据页数大于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGt(es *elasticsearch.Client, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLt 根据页数小于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLt(es *elasticsearch.Client, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLte 根据页数小于等于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLte(es *elasticsearch.Client, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLte 根据页数大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGte 根据页数大于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGte(es *elasticsearch.Client, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGt 根据页数大于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGt(es *elasticsearch.Client, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLt 根据页数小于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLt(es *elasticsearch.Client, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLte 根据页数小于等于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLte(es *elasticsearch.Client, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLte 根据页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGte 根据页数大于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGte(es *elasticsearch.Client, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGt 根据页数大于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGt(es *elasticsearch.Client, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLt 根据页数小于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLt(es *elasticsearch.Client, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLte 根据页数小于等于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLte(es *elasticsearch.Client, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLte 根据页数大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGte 根据价格大于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGte(es *elasticsearch.Client, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGt 根据价格大于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGt(es *elasticsearch.Client, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLt 根据价格小于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLt(es *elasticsearch.Client, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLte 根据价格小于等于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLte(es *elasticsearch.Client, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLte 根据价格大于等于和小于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLte(es *elasticsearch.Client, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGte 根据价格大于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGte(es *elasticsearch.Client, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGt 根据价格大于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGt(es *elasticsearch.Client, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLt 根据价格小于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLt(es *elasticsearch.Client, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLte 根据价格小于等于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLte(es *elasticsearch.Client, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLte 根据价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLte(es *elasticsearch.Client, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGte 根据价格大于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGte(es *elasticsearch.Client, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGt 根据价格大于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGt(es *elasticsearch.Client, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLt 根据价格小于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLt(es *elasticsearch.Client, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLte 根据价格小于等于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLte(es *elasticsearch.Client, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLte 根据价格大于等于和小于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLte(es *elasticsearch.Client, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGte 根据发布日期大于等于检索books表并分组统计类别的分布情况
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGt 根据发布日期大于检索books表并分组统计类别的分布情况
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLt 根据发布日期小于检索books表并分组统计类别的分布情况
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLte 根据发布日期小于等于检索books表并分组统计类别的分布情况
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGte 根据发布日期大于等于检索books表并分组统计子类别的分布情况
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGt 根据发布日期大于检索books表并分组统计子类别的分布情况
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLt 根据发布日期小于检索books表并分组统计子类别的分布情况
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLte 根据发布日期小于等于检索books表并分组统计子类别的分布情况
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGte 根据发布日期大于等于检索books表并分组统计编号的分布情况
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGte(es *elasticsearch.Client, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGt 根据发布日期大于检索books表并分组统计编号的分布情况
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGt(es *elasticsearch.Client, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLt 根据发布日期小于检索books表并分组统计编号的分布情况
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLt(es *elasticsearch.Client, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLte 根据发布日期小于等于检索books表并分组统计编号的分布情况
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLte(es *elasticsearch.Client, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLte 根据发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLte(es *elasticsearch.Client, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAllText 根据全文本、页数大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAllText 根据全文本、页数大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAllText 根据全文本、页数小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAllText 根据全文本、页数小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAllText 根据全文本、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAllText 根据全文本、页数大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAllText 根据全文本、页数大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAllText 根据全文本、页数小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAllText 根据全文本、页数小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAllText 根据全文本、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAllText 根据全文本、页数大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAllText 根据全文本、页数大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAllText 根据全文本、页数小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAllText 根据全文本、页数小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAllText 根据全文本、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAllText 根据全文本、价格大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAllText(es *elasticsearch.Client, allText string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAllText 根据全文本、价格大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAllText(es *elasticsearch.Client, allText string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAllText 根据全文本、价格小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAllText(es *elasticsearch.Client, allText string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAllText 根据全文本、价格小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAllText(es *elasticsearch.Client, allText string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAllText 根据全文本、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAllText 根据全文本、价格大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAllText(es *elasticsearch.Client, allText string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAllText 根据全文本、价格大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAllText(es *elasticsearch.Client, allText string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAllText 根据全文本、价格小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAllText(es *elasticsearch.Client, allText string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAllText 根据全文本、价格小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAllText(es *elasticsearch.Client, allText string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAllText 根据全文本、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAllText 根据全文本、价格大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAllText(es *elasticsearch.Client, allText string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAllText 根据全文本、价格大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAllText(es *elasticsearch.Client, allText string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAllText 根据全文本、价格小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAllText(es *elasticsearch.Client, allText string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAllText 根据全文本、价格小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAllText(es *elasticsearch.Client, allText string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAllText 根据全文本、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAllText 根据全文本、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAllText(es *elasticsearch.Client, allText string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAllText 根据全文本、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAllText(es *elasticsearch.Client, allText string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAllText 根据全文本、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAllText(es *elasticsearch.Client, allText string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAllText 根据全文本、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAllText(es *elasticsearch.Client, allText string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAllText 根据全文本、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAuthor 根据作者、页数大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAuthor 根据作者、页数大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAuthor 根据作者、页数小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAuthor 根据作者、页数小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAuthor 根据作者、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAuthor 根据作者、页数大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAuthor 根据作者、页数大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAuthor 根据作者、页数小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAuthor 根据作者、页数小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAuthor 根据作者、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAuthor 根据作者、页数大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAuthor 根据作者、页数大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAuthor 根据作者、页数小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAuthor 根据作者、页数小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAuthor 根据作者、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAuthor 根据作者、价格大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAuthor(es *elasticsearch.Client, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAuthor 根据作者、价格大于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAuthor(es *elasticsearch.Client, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAuthor 根据作者、价格小于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAuthor(es *elasticsearch.Client, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAuthor 根据作者、价格小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAuthor(es *elasticsearch.Client, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAuthor 根据作者、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAuthor 根据作者、价格大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAuthor(es *elasticsearch.Client, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAuthor 根据作者、价格大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAuthor(es *elasticsearch.Client, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAuthor 根据作者、价格小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAuthor(es *elasticsearch.Client, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAuthor 根据作者、价格小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAuthor(es *elasticsearch.Client, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAuthor 根据作者、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAuthor 根据作者、价格大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAuthor(es *elasticsearch.Client, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAuthor 根据作者、价格大于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAuthor(es *elasticsearch.Client, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAuthor 根据作者、价格小于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAuthor(es *elasticsearch.Client, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAuthor 根据作者、价格小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAuthor(es *elasticsearch.Client, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAuthor 根据作者、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAuthor 根据作者、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAuthor(es *elasticsearch.Client, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAuthor 根据作者、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAuthor(es *elasticsearch.Client, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAuthor 根据作者、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAuthor(es *elasticsearch.Client, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAuthor 根据作者、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAuthor(es *elasticsearch.Client, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAuthor 根据作者、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteClass 根据类别、页数大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteClass(es *elasticsearch.Client, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtClass 根据类别、页数大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtClass(es *elasticsearch.Client, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtClass 根据类别、页数小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtClass(es *elasticsearch.Client, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteClass 根据类别、页数小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteClass(es *elasticsearch.Client, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteClass 根据类别、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteClass 根据类别、页数大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteClass(es *elasticsearch.Client, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtClass 根据类别、页数大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtClass(es *elasticsearch.Client, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtClass 根据类别、页数小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtClass(es *elasticsearch.Client, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteClass 根据类别、页数小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteClass(es *elasticsearch.Client, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteClass 根据类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteClass 根据类别、价格大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteClass(es *elasticsearch.Client, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtClass 根据类别、价格大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtClass(es *elasticsearch.Client, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtClass 根据类别、价格小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtClass(es *elasticsearch.Client, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteClass 根据类别、价格小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteClass(es *elasticsearch.Client, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteClass 根据类别、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteClass 根据类别、价格大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteClass(es *elasticsearch.Client, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtClass 根据类别、价格大于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtClass(es *elasticsearch.Client, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtClass 根据类别、价格小于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtClass(es *elasticsearch.Client, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteClass 根据类别、价格小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteClass(es *elasticsearch.Client, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteClass 根据类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteClass 根据类别、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteClass(es *elasticsearch.Client, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtClass 根据类别、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtClass(es *elasticsearch.Client, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtClass 根据类别、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtClass(es *elasticsearch.Client, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteClass 根据类别、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteClass(es *elasticsearch.Client, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteClass 根据类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteClass(es *elasticsearch.Client, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteClass2 根据子类别、页数大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtClass2 根据子类别、页数大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtClass2 根据子类别、页数小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteClass2 根据子类别、页数小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteClass2 根据子类别、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteClass2 根据子类别、页数大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtClass2 根据子类别、页数大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtClass2 根据子类别、页数小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteClass2 根据子类别、页数小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteClass2 根据子类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteClass2 根据子类别、价格大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteClass2(es *elasticsearch.Client, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtClass2 根据子类别、价格大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtClass2(es *elasticsearch.Client, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtClass2 根据子类别、价格小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtClass2(es *elasticsearch.Client, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteClass2 根据子类别、价格小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteClass2(es *elasticsearch.Client, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteClass2 根据子类别、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteClass2 根据子类别、价格大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteClass2(es *elasticsearch.Client, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtClass2 根据子类别、价格大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtClass2(es *elasticsearch.Client, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtClass2 根据子类别、价格小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtClass2(es *elasticsearch.Client, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteClass2 根据子类别、价格小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteClass2(es *elasticsearch.Client, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteClass2 根据子类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteClass2 根据子类别、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteClass2(es *elasticsearch.Client, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtClass2 根据子类别、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtClass2(es *elasticsearch.Client, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtClass2 根据子类别、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtClass2(es *elasticsearch.Client, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteClass2 根据子类别、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteClass2(es *elasticsearch.Client, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteClass2 根据子类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteName 根据书名、页数大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteName(es *elasticsearch.Client, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtName 根据书名、页数大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtName(es *elasticsearch.Client, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtName 根据书名、页数小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtName(es *elasticsearch.Client, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteName 根据书名、页数小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteName(es *elasticsearch.Client, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteName 根据书名、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteName 根据书名、页数大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteName(es *elasticsearch.Client, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtName 根据书名、页数大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtName(es *elasticsearch.Client, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtName 根据书名、页数小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtName(es *elasticsearch.Client, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteName 根据书名、页数小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteName(es *elasticsearch.Client, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteName 根据书名、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteName 根据书名、页数大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteName(es *elasticsearch.Client, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtName 根据书名、页数大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtName(es *elasticsearch.Client, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtName 根据书名、页数小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtName(es *elasticsearch.Client, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteName 根据书名、页数小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteName(es *elasticsearch.Client, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteName 根据书名、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteName 根据书名、价格大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteName(es *elasticsearch.Client, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtName 根据书名、价格大于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtName(es *elasticsearch.Client, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtName 根据书名、价格小于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtName(es *elasticsearch.Client, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteName 根据书名、价格小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteName(es *elasticsearch.Client, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteName 根据书名、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteName 根据书名、价格大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteName(es *elasticsearch.Client, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtName 根据书名、价格大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtName(es *elasticsearch.Client, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtName 根据书名、价格小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtName(es *elasticsearch.Client, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteName 根据书名、价格小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteName(es *elasticsearch.Client, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteName 根据书名、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteName 根据书名、价格大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteName(es *elasticsearch.Client, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtName 根据书名、价格大于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtName(es *elasticsearch.Client, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtName 根据书名、价格小于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtName(es *elasticsearch.Client, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteName 根据书名、价格小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteName(es *elasticsearch.Client, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteName 根据书名、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteName 根据书名、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteName(es *elasticsearch.Client, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtName 根据书名、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtName(es *elasticsearch.Client, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtName 根据书名、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtName(es *elasticsearch.Client, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteName 根据书名、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteName(es *elasticsearch.Client, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteName 根据书名、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteName(es *elasticsearch.Client, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGt 根据页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGt(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLt 根据页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLt(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLte 根据页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLte(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLte 根据页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGt 根据页数大于、发布日期大于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGt(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLt 根据页数大于、发布日期小于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLt(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLte 根据页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLte(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLte 根据页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGt 根据页数小于、发布日期大于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGt(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLt 根据页数小于、发布日期小于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLt(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLte 根据页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLte(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLte 根据页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGt 根据页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGt(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLt 根据页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLt(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLte 根据页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLte(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLte 根据页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGt 根据页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLt 根据页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLte 根据页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLte 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGt 根据页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGt(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLt 根据页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLt(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLte 根据页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLte(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLte 根据页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGt 根据页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGt(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLt 根据页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLt(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLte 根据页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLte(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLte 根据页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGt 根据页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGt(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLt 根据页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLt(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLte 根据页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLte(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLte 根据页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGt 根据页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGt(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLt 根据页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLt(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLte 根据页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLte(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLte 根据页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGt 根据页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLt 根据页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLte 根据页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLte 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGte 根据页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGt 根据页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGt(es *elasticsearch.Client, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLt 根据页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLt(es *elasticsearch.Client, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLte 根据页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLte(es *elasticsearch.Client, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLte 根据页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGte 根据页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGt 根据页数大于、发布日期大于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGt(es *elasticsearch.Client, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLt 根据页数大于、发布日期小于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLt(es *elasticsearch.Client, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLte 根据页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLte(es *elasticsearch.Client, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLte 根据页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLte(es *elasticsearch.Client, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGte 根据页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGt 根据页数小于、发布日期大于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGt(es *elasticsearch.Client, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLt 根据页数小于、发布日期小于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLt(es *elasticsearch.Client, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLte 根据页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLte(es *elasticsearch.Client, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLte 根据页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLte(es *elasticsearch.Client, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGte 根据页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGt 根据页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGt(es *elasticsearch.Client, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLt 根据页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLt(es *elasticsearch.Client, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLte 根据页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLte(es *elasticsearch.Client, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLte 根据页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLte(es *elasticsearch.Client, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGte 根据页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGt 根据页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLt 根据页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLt(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLte 根据页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLte 根据页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLte(es *elasticsearch.Client, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteSeq 根据编号、页数大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtSeq 根据编号、页数大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtSeq 根据编号、页数小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteSeq 根据编号、页数小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteSeq 根据编号、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteSeq 根据编号、页数大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtSeq 根据编号、页数大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtSeq 根据编号、页数小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteSeq 根据编号、页数小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteSeq 根据编号、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGt 根据价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGt(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLt 根据价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLt(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLte 根据价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLte(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLte 根据价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLte(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGte 根据价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGt 根据价格大于、发布日期大于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGt(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLt 根据价格大于、发布日期小于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLt(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLte 根据价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLte(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLte 根据价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLte(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGte 根据价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGt 根据价格小于、发布日期大于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGt(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLt 根据价格小于、发布日期小于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLt(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLte 根据价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLte(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLte 根据价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLte(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGt 根据价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGt(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLt 根据价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLt(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLte 根据价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLte(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLte 根据价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLte(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGt 根据价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLt 根据价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLte 根据价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLte 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGt 根据价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGt(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLt 根据价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLt(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLte 根据价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLte(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLte 根据价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLte(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGte 根据价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGt 根据价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGt(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLt 根据价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLt(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLte 根据价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLte(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLte 根据价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLte(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGte 根据价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGt 根据价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGt(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLt 根据价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLt(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLte 根据价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLte(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLte 根据价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLte(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGt 根据价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGt(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLt 根据价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLt(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLte 根据价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLte(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLte 根据价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLte(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGt 根据价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLt 根据价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLte 根据价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLte 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGte 根据价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGte(es *elasticsearch.Client, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGt 根据价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGt(es *elasticsearch.Client, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLt 根据价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLt(es *elasticsearch.Client, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLte 根据价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLte(es *elasticsearch.Client, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLte 根据价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLte(es *elasticsearch.Client, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGte 根据价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGte(es *elasticsearch.Client, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGt 根据价格大于、发布日期大于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGt(es *elasticsearch.Client, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLt 根据价格大于、发布日期小于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLt(es *elasticsearch.Client, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLte 根据价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLte(es *elasticsearch.Client, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLte 根据价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLte(es *elasticsearch.Client, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGte 根据价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGte(es *elasticsearch.Client, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGt 根据价格小于、发布日期大于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGt(es *elasticsearch.Client, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLt 根据价格小于、发布日期小于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLt(es *elasticsearch.Client, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLte 根据价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLte(es *elasticsearch.Client, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLte 根据价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLte(es *elasticsearch.Client, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGte 根据价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGte(es *elasticsearch.Client, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGt 根据价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGt(es *elasticsearch.Client, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLt 根据价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLt(es *elasticsearch.Client, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLte 根据价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLte(es *elasticsearch.Client, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLte 根据价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLte(es *elasticsearch.Client, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGte 根据价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGt 根据价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLt 根据价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLt(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLte 根据价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLte 根据价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLte(es *elasticsearch.Client, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteSeq 根据编号、价格大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteSeq(es *elasticsearch.Client, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtSeq 根据编号、价格大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtSeq(es *elasticsearch.Client, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtSeq 根据编号、价格小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtSeq(es *elasticsearch.Client, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteSeq 根据编号、价格小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteSeq(es *elasticsearch.Client, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteSeq 根据编号、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteSeq 根据编号、价格大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteSeq(es *elasticsearch.Client, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtSeq 根据编号、价格大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtSeq(es *elasticsearch.Client, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtSeq 根据编号、价格小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtSeq(es *elasticsearch.Client, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteSeq 根据编号、价格小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteSeq(es *elasticsearch.Client, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteSeq 根据编号、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteSeq 根据编号、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteSeq(es *elasticsearch.Client, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtSeq 根据编号、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtSeq(es *elasticsearch.Client, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtSeq 根据编号、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtSeq(es *elasticsearch.Client, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteSeq 根据编号、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteSeq(es *elasticsearch.Client, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteSeq 根据编号、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAllTextAuthor 根据全文本、作者、页数大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAllTextAuthor 根据全文本、作者、页数大于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAllTextAuthor 根据全文本、作者、页数小于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAllTextAuthor 根据全文本、作者、页数小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAllTextAuthor 根据全文本、作者、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAllTextAuthor 根据全文本、作者、页数大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAllTextAuthor 根据全文本、作者、页数大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAllTextAuthor 根据全文本、作者、页数小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAllTextAuthor 根据全文本、作者、页数小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAllTextAuthor 根据全文本、作者、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAllTextAuthor 根据全文本、作者、页数大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAllTextAuthor 根据全文本、作者、页数大于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAllTextAuthor 根据全文本、作者、页数小于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAllTextAuthor 根据全文本、作者、页数小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAllTextAuthor 根据全文本、作者、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAllTextAuthor 根据全文本、作者、价格大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAllTextAuthor 根据全文本、作者、价格大于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAllTextAuthor 根据全文本、作者、价格小于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAllTextAuthor 根据全文本、作者、价格小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAllTextAuthor 根据全文本、作者、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAllTextAuthor 根据全文本、作者、价格大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAllTextAuthor 根据全文本、作者、价格大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAllTextAuthor 根据全文本、作者、价格小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAllTextAuthor 根据全文本、作者、价格小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAllTextAuthor 根据全文本、作者、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAllTextAuthor 根据全文本、作者、价格大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAllTextAuthor 根据全文本、作者、价格大于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAllTextAuthor 根据全文本、作者、价格小于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAllTextAuthor 根据全文本、作者、价格小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAllTextAuthor 根据全文本、作者、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAllTextAuthor 根据全文本、作者、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAllTextAuthor 根据全文本、作者、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAllTextAuthor 根据全文本、作者、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAllTextAuthor 根据全文本、作者、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAllTextAuthor 根据全文本、作者、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// author string 作者
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAllTextAuthor(es *elasticsearch.Client, allText, author string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAllTextClass 根据全文本、类别、页数大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAllTextClass 根据全文本、类别、页数大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAllTextClass 根据全文本、类别、页数小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAllTextClass 根据全文本、类别、页数小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAllTextClass 根据全文本、类别、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAllTextClass 根据全文本、类别、页数大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAllTextClass 根据全文本、类别、页数大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAllTextClass 根据全文本、类别、页数小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAllTextClass 根据全文本、类别、页数小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAllTextClass 根据全文本、类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAllTextClass(es *elasticsearch.Client, allText, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAllTextClass 根据全文本、类别、价格大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAllTextClass 根据全文本、类别、价格大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAllTextClass(es *elasticsearch.Client, allText, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAllTextClass 根据全文本、类别、价格小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAllTextClass(es *elasticsearch.Client, allText, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAllTextClass 根据全文本、类别、价格小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAllTextClass(es *elasticsearch.Client, allText, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAllTextClass 根据全文本、类别、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAllTextClass 根据全文本、类别、价格大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAllTextClass 根据全文本、类别、价格大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAllTextClass(es *elasticsearch.Client, allText, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAllTextClass 根据全文本、类别、价格小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAllTextClass(es *elasticsearch.Client, allText, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAllTextClass 根据全文本、类别、价格小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAllTextClass(es *elasticsearch.Client, allText, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAllTextClass 根据全文本、类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAllTextClass(es *elasticsearch.Client, allText, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAllTextClass 根据全文本、类别、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAllTextClass 根据全文本、类别、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAllTextClass 根据全文本、类别、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAllTextClass 根据全文本、类别、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAllTextClass 根据全文本、类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAllTextClass(es *elasticsearch.Client, allText, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAllTextClass2 根据全文本、子类别、页数大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAllTextClass2 根据全文本、子类别、页数大于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAllTextClass2 根据全文本、子类别、页数小于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAllTextClass2 根据全文本、子类别、页数小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAllTextClass2 根据全文本、子类别、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAllTextClass2 根据全文本、子类别、页数大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAllTextClass2 根据全文本、子类别、页数大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAllTextClass2 根据全文本、子类别、页数小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAllTextClass2 根据全文本、子类别、页数小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAllTextClass2 根据全文本、子类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAllTextClass2 根据全文本、子类别、价格大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAllTextClass2 根据全文本、子类别、价格大于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAllTextClass2 根据全文本、子类别、价格小于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAllTextClass2 根据全文本、子类别、价格小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAllTextClass2 根据全文本、子类别、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAllTextClass2 根据全文本、子类别、价格大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAllTextClass2 根据全文本、子类别、价格大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAllTextClass2 根据全文本、子类别、价格小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAllTextClass2 根据全文本、子类别、价格小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAllTextClass2 根据全文本、子类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAllTextClass2 根据全文本、子类别、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAllTextClass2 根据全文本、子类别、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAllTextClass2 根据全文本、子类别、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAllTextClass2 根据全文本、子类别、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAllTextClass2 根据全文本、子类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAllTextClass2(es *elasticsearch.Client, allText, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAllTextName 根据全文本、书名、页数大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAllTextName 根据全文本、书名、页数大于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAllTextName(es *elasticsearch.Client, allText, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAllTextName 根据全文本、书名、页数小于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAllTextName(es *elasticsearch.Client, allText, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAllTextName 根据全文本、书名、页数小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAllTextName 根据全文本、书名、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAllTextName 根据全文本、书名、页数大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAllTextName 根据全文本、书名、页数大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAllTextName(es *elasticsearch.Client, allText, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAllTextName 根据全文本、书名、页数小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAllTextName(es *elasticsearch.Client, allText, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAllTextName 根据全文本、书名、页数小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAllTextName 根据全文本、书名、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAllTextName 根据全文本、书名、页数大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAllTextName 根据全文本、书名、页数大于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAllTextName(es *elasticsearch.Client, allText, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAllTextName 根据全文本、书名、页数小于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAllTextName(es *elasticsearch.Client, allText, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAllTextName 根据全文本、书名、页数小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAllTextName 根据全文本、书名、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAllTextName(es *elasticsearch.Client, allText, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAllTextName 根据全文本、书名、价格大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAllTextName(es *elasticsearch.Client, allText, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAllTextName 根据全文本、书名、价格大于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAllTextName(es *elasticsearch.Client, allText, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAllTextName 根据全文本、书名、价格小于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAllTextName(es *elasticsearch.Client, allText, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAllTextName 根据全文本、书名、价格小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAllTextName(es *elasticsearch.Client, allText, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAllTextName 根据全文本、书名、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAllTextName 根据全文本、书名、价格大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAllTextName(es *elasticsearch.Client, allText, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAllTextName 根据全文本、书名、价格大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAllTextName(es *elasticsearch.Client, allText, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAllTextName 根据全文本、书名、价格小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAllTextName(es *elasticsearch.Client, allText, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAllTextName 根据全文本、书名、价格小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAllTextName(es *elasticsearch.Client, allText, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAllTextName 根据全文本、书名、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAllTextName 根据全文本、书名、价格大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAllTextName(es *elasticsearch.Client, allText, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAllTextName 根据全文本、书名、价格大于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAllTextName(es *elasticsearch.Client, allText, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAllTextName 根据全文本、书名、价格小于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAllTextName(es *elasticsearch.Client, allText, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAllTextName 根据全文本、书名、价格小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAllTextName(es *elasticsearch.Client, allText, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAllTextName 根据全文本、书名、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAllTextName(es *elasticsearch.Client, allText, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAllTextName 根据全文本、书名、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAllTextName 根据全文本、书名、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAllTextName 根据全文本、书名、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAllTextName 根据全文本、书名、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAllTextName 根据全文本、书名、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAllTextName(es *elasticsearch.Client, allText, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteAllText 根据全文本、页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGtAllText 根据全文本、页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLtAllText 根据全文本、页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLteAllText 根据全文本、页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLteAllText 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteAllText 根据全文本、页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGtAllText 根据全文本、页数大于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLtAllText 根据全文本、页数大于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLteAllText 根据全文本、页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLteAllText 根据全文本、页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteAllText 根据全文本、页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGtAllText 根据全文本、页数小于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLtAllText 根据全文本、页数小于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLteAllText 根据全文本、页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLteAllText 根据全文本、页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteAllText 根据全文本、页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGtAllText 根据全文本、页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLtAllText 根据全文本、页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLteAllText 根据全文本、页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLteAllText 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGtAllText 根据全文本、页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLtAllText 根据全文本、页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLteAllText 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteAllText 根据全文本、页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGtAllText 根据全文本、页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLtAllText 根据全文本、页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLteAllText 根据全文本、页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLteAllText 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteAllText 根据全文本、页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGtAllText 根据全文本、页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLtAllText 根据全文本、页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLteAllText 根据全文本、页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLteAllText 根据全文本、页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteAllText 根据全文本、页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGtAllText 根据全文本、页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLtAllText 根据全文本、页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLteAllText 根据全文本、页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLteAllText 根据全文本、页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteAllText 根据全文本、页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGtAllText 根据全文本、页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLtAllText 根据全文本、页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLteAllText 根据全文本、页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLteAllText 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGtAllText 根据全文本、页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLtAllText 根据全文本、页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLteAllText 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteAllText 根据全文本、页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGtAllText 根据全文本、页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLtAllText 根据全文本、页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLteAllText 根据全文本、页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLteAllText 根据全文本、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteAllText 根据全文本、页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGtAllText 根据全文本、页数大于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLtAllText 根据全文本、页数大于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLteAllText 根据全文本、页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLteAllText 根据全文本、页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteAllText 根据全文本、页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGtAllText 根据全文本、页数小于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLtAllText 根据全文本、页数小于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLteAllText 根据全文本、页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLteAllText 根据全文本、页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteAllText 根据全文本、页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGtAllText 根据全文本、页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLtAllText 根据全文本、页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLteAllText 根据全文本、页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLteAllText 根据全文本、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGtAllText 根据全文本、页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLtAllText 根据全文本、页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLteAllText 根据全文本、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteAllText 根据全文本、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAllTextSeq 根据全文本、编号、页数大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAllTextSeq 根据全文本、编号、页数大于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAllTextSeq 根据全文本、编号、页数小于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAllTextSeq 根据全文本、编号、页数小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAllTextSeq 根据全文本、编号、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAllTextSeq 根据全文本、编号、页数大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAllTextSeq 根据全文本、编号、页数大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAllTextSeq 根据全文本、编号、页数小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAllTextSeq 根据全文本、编号、页数小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAllTextSeq 根据全文本、编号、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteAllText 根据全文本、价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGtAllText 根据全文本、价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLtAllText 根据全文本、价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLteAllText 根据全文本、价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLteAllText 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteAllText 根据全文本、价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGtAllText 根据全文本、价格大于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLtAllText 根据全文本、价格大于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLteAllText 根据全文本、价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLteAllText 根据全文本、价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteAllText 根据全文本、价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGtAllText 根据全文本、价格小于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLtAllText 根据全文本、价格小于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLteAllText 根据全文本、价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLteAllText 根据全文本、价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteAllText 根据全文本、价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGtAllText 根据全文本、价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLtAllText 根据全文本、价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLteAllText 根据全文本、价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLteAllText 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGtAllText 根据全文本、价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLtAllText 根据全文本、价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLteAllText 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteAllText 根据全文本、价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGtAllText 根据全文本、价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLtAllText 根据全文本、价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLteAllText 根据全文本、价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLteAllText 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteAllText 根据全文本、价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGtAllText 根据全文本、价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLtAllText 根据全文本、价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLteAllText 根据全文本、价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLteAllText 根据全文本、价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteAllText 根据全文本、价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGtAllText 根据全文本、价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLtAllText 根据全文本、价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLteAllText 根据全文本、价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLteAllText 根据全文本、价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteAllText 根据全文本、价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGtAllText 根据全文本、价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLtAllText 根据全文本、价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLteAllText 根据全文本、价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLteAllText 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGtAllText 根据全文本、价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLtAllText 根据全文本、价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLteAllText 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteAllText 根据全文本、价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGtAllText 根据全文本、价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLtAllText 根据全文本、价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLteAllText 根据全文本、价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLteAllText 根据全文本、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteAllText 根据全文本、价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGtAllText 根据全文本、价格大于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLtAllText 根据全文本、价格大于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLteAllText 根据全文本、价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLteAllText 根据全文本、价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteAllText 根据全文本、价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGtAllText 根据全文本、价格小于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLtAllText 根据全文本、价格小于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLteAllText 根据全文本、价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLteAllText 根据全文本、价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteAllText 根据全文本、价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGtAllText 根据全文本、价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLtAllText 根据全文本、价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLteAllText 根据全文本、价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLteAllText 根据全文本、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGtAllText 根据全文本、价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLtAllText 根据全文本、价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLtAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLteAllText 根据全文本、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLteAllText 根据全文本、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// allText string 全文本
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLteAllText(es *elasticsearch.Client, allText string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAllTextSeq 根据全文本、编号、价格大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAllTextSeq 根据全文本、编号、价格大于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAllTextSeq 根据全文本、编号、价格小于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAllTextSeq 根据全文本、编号、价格小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAllTextSeq 根据全文本、编号、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAllTextSeq 根据全文本、编号、价格大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAllTextSeq 根据全文本、编号、价格大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAllTextSeq 根据全文本、编号、价格小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAllTextSeq 根据全文本、编号、价格小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAllTextSeq 根据全文本、编号、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAllTextSeq 根据全文本、编号、发布日期大于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAllTextSeq 根据全文本、编号、发布日期大于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAllTextSeq 根据全文本、编号、发布日期小于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAllTextSeq 根据全文本、编号、发布日期小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAllTextSeq 根据全文本、编号、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// allText string 全文本
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAllTextSeq(es *elasticsearch.Client, allText, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("all_text", allText),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAuthorClass 根据作者、类别、页数大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAuthorClass 根据作者、类别、页数大于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAuthorClass(es *elasticsearch.Client, author, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAuthorClass 根据作者、类别、页数小于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAuthorClass(es *elasticsearch.Client, author, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAuthorClass 根据作者、类别、页数小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAuthorClass 根据作者、类别、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAuthorClass 根据作者、类别、页数大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAuthorClass 根据作者、类别、页数大于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAuthorClass(es *elasticsearch.Client, author, class string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAuthorClass 根据作者、类别、页数小于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAuthorClass(es *elasticsearch.Client, author, class string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAuthorClass 根据作者、类别、页数小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAuthorClass 根据作者、类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAuthorClass(es *elasticsearch.Client, author, class string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAuthorClass 根据作者、类别、价格大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAuthorClass(es *elasticsearch.Client, author, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAuthorClass 根据作者、类别、价格大于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAuthorClass(es *elasticsearch.Client, author, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAuthorClass 根据作者、类别、价格小于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAuthorClass(es *elasticsearch.Client, author, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAuthorClass 根据作者、类别、价格小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAuthorClass(es *elasticsearch.Client, author, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAuthorClass 根据作者、类别、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAuthorClass(es *elasticsearch.Client, author, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAuthorClass 根据作者、类别、价格大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAuthorClass(es *elasticsearch.Client, author, class string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAuthorClass 根据作者、类别、价格大于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAuthorClass(es *elasticsearch.Client, author, class string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAuthorClass 根据作者、类别、价格小于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAuthorClass(es *elasticsearch.Client, author, class string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAuthorClass 根据作者、类别、价格小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAuthorClass(es *elasticsearch.Client, author, class string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAuthorClass 根据作者、类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAuthorClass(es *elasticsearch.Client, author, class string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAuthorClass 根据作者、类别、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAuthorClass 根据作者、类别、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAuthorClass 根据作者、类别、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAuthorClass 根据作者、类别、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAuthorClass 根据作者、类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class string 类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAuthorClass(es *elasticsearch.Client, author, class string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAuthorClass2 根据作者、子类别、页数大于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAuthorClass2 根据作者、子类别、页数大于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAuthorClass2 根据作者、子类别、页数小于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAuthorClass2 根据作者、子类别、页数小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAuthorClass2 根据作者、子类别、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAuthorClass2 根据作者、子类别、页数大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAuthorClass2 根据作者、子类别、页数大于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAuthorClass2 根据作者、子类别、页数小于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAuthorClass2 根据作者、子类别、页数小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAuthorClass2 根据作者、子类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAuthorClass2 根据作者、子类别、价格大于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAuthorClass2 根据作者、子类别、价格大于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAuthorClass2 根据作者、子类别、价格小于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAuthorClass2 根据作者、子类别、价格小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAuthorClass2 根据作者、子类别、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAuthorClass2 根据作者、子类别、价格大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAuthorClass2 根据作者、子类别、价格大于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAuthorClass2 根据作者、子类别、价格小于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAuthorClass2 根据作者、子类别、价格小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAuthorClass2 根据作者、子类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAuthorClass2 根据作者、子类别、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAuthorClass2 根据作者、子类别、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAuthorClass2 根据作者、子类别、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAuthorClass2 根据作者、子类别、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAuthorClass2 根据作者、子类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAuthorClass2(es *elasticsearch.Client, author, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAuthorName 根据作者、书名、页数大于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAuthorName 根据作者、书名、页数大于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAuthorName(es *elasticsearch.Client, author, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAuthorName 根据作者、书名、页数小于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAuthorName(es *elasticsearch.Client, author, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAuthorName 根据作者、书名、页数小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAuthorName(es *elasticsearch.Client, author, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAuthorName 根据作者、书名、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAuthorName 根据作者、书名、页数大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAuthorName 根据作者、书名、页数大于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAuthorName(es *elasticsearch.Client, author, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAuthorName 根据作者、书名、页数小于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAuthorName(es *elasticsearch.Client, author, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAuthorName 根据作者、书名、页数小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAuthorName(es *elasticsearch.Client, author, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAuthorName 根据作者、书名、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteAuthorName 根据作者、书名、页数大于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtAuthorName 根据作者、书名、页数大于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtAuthorName(es *elasticsearch.Client, author, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtAuthorName 根据作者、书名、页数小于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtAuthorName(es *elasticsearch.Client, author, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteAuthorName 根据作者、书名、页数小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteAuthorName(es *elasticsearch.Client, author, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteAuthorName 根据作者、书名、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteAuthorName(es *elasticsearch.Client, author, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAuthorName 根据作者、书名、价格大于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAuthorName(es *elasticsearch.Client, author, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAuthorName 根据作者、书名、价格大于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAuthorName(es *elasticsearch.Client, author, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAuthorName 根据作者、书名、价格小于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAuthorName(es *elasticsearch.Client, author, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAuthorName 根据作者、书名、价格小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAuthorName(es *elasticsearch.Client, author, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAuthorName 根据作者、书名、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAuthorName(es *elasticsearch.Client, author, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAuthorName 根据作者、书名、价格大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAuthorName(es *elasticsearch.Client, author, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAuthorName 根据作者、书名、价格大于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAuthorName(es *elasticsearch.Client, author, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAuthorName 根据作者、书名、价格小于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAuthorName(es *elasticsearch.Client, author, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAuthorName 根据作者、书名、价格小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAuthorName(es *elasticsearch.Client, author, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAuthorName 根据作者、书名、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAuthorName(es *elasticsearch.Client, author, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteAuthorName 根据作者、书名、价格大于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteAuthorName(es *elasticsearch.Client, author, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtAuthorName 根据作者、书名、价格大于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtAuthorName(es *elasticsearch.Client, author, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtAuthorName 根据作者、书名、价格小于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtAuthorName(es *elasticsearch.Client, author, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteAuthorName 根据作者、书名、价格小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteAuthorName(es *elasticsearch.Client, author, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteAuthorName 根据作者、书名、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteAuthorName(es *elasticsearch.Client, author, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteAuthorName 根据作者、书名、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtAuthorName 根据作者、书名、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtAuthorName(es *elasticsearch.Client, author, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtAuthorName 根据作者、书名、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtAuthorName(es *elasticsearch.Client, author, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteAuthorName 根据作者、书名、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteAuthorName 根据作者、书名、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteAuthorName(es *elasticsearch.Client, author, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteAuthor 根据作者、页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGtAuthor 根据作者、页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLtAuthor 根据作者、页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLteAuthor 根据作者、页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLteAuthor 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteAuthor 根据作者、页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGtAuthor 根据作者、页数大于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLtAuthor 根据作者、页数大于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLteAuthor 根据作者、页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLteAuthor 根据作者、页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteAuthor 根据作者、页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGtAuthor 根据作者、页数小于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLtAuthor 根据作者、页数小于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLteAuthor 根据作者、页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLteAuthor 根据作者、页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteAuthor 根据作者、页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGtAuthor 根据作者、页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLtAuthor 根据作者、页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLteAuthor 根据作者、页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLteAuthor 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGtAuthor 根据作者、页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLtAuthor 根据作者、页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLteAuthor 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteAuthor 根据作者、页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGtAuthor 根据作者、页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLtAuthor 根据作者、页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLteAuthor 根据作者、页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLteAuthor 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteAuthor 根据作者、页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGtAuthor 根据作者、页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLtAuthor 根据作者、页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLteAuthor 根据作者、页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLteAuthor 根据作者、页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteAuthor 根据作者、页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGtAuthor 根据作者、页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLtAuthor 根据作者、页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLteAuthor 根据作者、页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLteAuthor 根据作者、页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteAuthor 根据作者、页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGtAuthor 根据作者、页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLtAuthor 根据作者、页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLteAuthor 根据作者、页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLteAuthor 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGtAuthor 根据作者、页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLtAuthor 根据作者、页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLteAuthor 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteAuthor 根据作者、页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGtAuthor 根据作者、页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLtAuthor 根据作者、页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLteAuthor 根据作者、页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLteAuthor 根据作者、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteAuthor 根据作者、页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGtAuthor 根据作者、页数大于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLtAuthor 根据作者、页数大于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLteAuthor 根据作者、页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLteAuthor 根据作者、页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteAuthor 根据作者、页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGtAuthor 根据作者、页数小于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLtAuthor 根据作者、页数小于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLteAuthor 根据作者、页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLteAuthor 根据作者、页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteAuthor 根据作者、页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGtAuthor 根据作者、页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLtAuthor 根据作者、页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLteAuthor 根据作者、页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLteAuthor 根据作者、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGtAuthor 根据作者、页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLtAuthor 根据作者、页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLteAuthor 根据作者、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteAuthor 根据作者、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteAuthorSeq 根据作者、编号、页数大于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtAuthorSeq 根据作者、编号、页数大于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtAuthorSeq 根据作者、编号、页数小于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteAuthorSeq 根据作者、编号、页数小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteAuthorSeq 根据作者、编号、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteAuthorSeq 根据作者、编号、页数大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtAuthorSeq 根据作者、编号、页数大于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtAuthorSeq 根据作者、编号、页数小于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteAuthorSeq 根据作者、编号、页数小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteAuthorSeq 根据作者、编号、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteAuthor 根据作者、价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGtAuthor 根据作者、价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLtAuthor 根据作者、价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLteAuthor 根据作者、价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLteAuthor 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteAuthor 根据作者、价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGtAuthor 根据作者、价格大于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLtAuthor 根据作者、价格大于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLteAuthor 根据作者、价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLteAuthor 根据作者、价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteAuthor 根据作者、价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGtAuthor 根据作者、价格小于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLtAuthor 根据作者、价格小于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLteAuthor 根据作者、价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLteAuthor 根据作者、价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteAuthor 根据作者、价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGtAuthor 根据作者、价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLtAuthor 根据作者、价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLteAuthor 根据作者、价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLteAuthor 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGtAuthor 根据作者、价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLtAuthor 根据作者、价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLteAuthor 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteAuthor 根据作者、价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGtAuthor 根据作者、价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLtAuthor 根据作者、价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLteAuthor 根据作者、价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLteAuthor 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteAuthor 根据作者、价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGtAuthor 根据作者、价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLtAuthor 根据作者、价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLteAuthor 根据作者、价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLteAuthor 根据作者、价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteAuthor 根据作者、价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGtAuthor 根据作者、价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLtAuthor 根据作者、价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLteAuthor 根据作者、价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLteAuthor 根据作者、价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteAuthor 根据作者、价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGtAuthor 根据作者、价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLtAuthor 根据作者、价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLteAuthor 根据作者、价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLteAuthor 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGtAuthor 根据作者、价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLtAuthor 根据作者、价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLteAuthor 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteAuthor 根据作者、价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGtAuthor 根据作者、价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLtAuthor 根据作者、价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLteAuthor 根据作者、价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLteAuthor 根据作者、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteAuthor 根据作者、价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGtAuthor 根据作者、价格大于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLtAuthor 根据作者、价格大于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLteAuthor 根据作者、价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLteAuthor 根据作者、价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteAuthor 根据作者、价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGtAuthor 根据作者、价格小于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLtAuthor 根据作者、价格小于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLteAuthor 根据作者、价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLteAuthor 根据作者、价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteAuthor 根据作者、价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGtAuthor 根据作者、价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLtAuthor 根据作者、价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLteAuthor 根据作者、价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLteAuthor 根据作者、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGtAuthor 根据作者、价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLtAuthor 根据作者、价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLtAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLteAuthor 根据作者、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLteAuthor 根据作者、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// author string 作者
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLteAuthor(es *elasticsearch.Client, author string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteAuthorSeq 根据作者、编号、价格大于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtAuthorSeq 根据作者、编号、价格大于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtAuthorSeq(es *elasticsearch.Client, author, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtAuthorSeq 根据作者、编号、价格小于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtAuthorSeq(es *elasticsearch.Client, author, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteAuthorSeq 根据作者、编号、价格小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteAuthorSeq 根据作者、编号、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteAuthorSeq 根据作者、编号、价格大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtAuthorSeq 根据作者、编号、价格大于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtAuthorSeq(es *elasticsearch.Client, author, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtAuthorSeq 根据作者、编号、价格小于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtAuthorSeq(es *elasticsearch.Client, author, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteAuthorSeq 根据作者、编号、价格小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteAuthorSeq 根据作者、编号、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteAuthorSeq 根据作者、编号、发布日期大于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtAuthorSeq 根据作者、编号、发布日期大于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtAuthorSeq 根据作者、编号、发布日期小于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteAuthorSeq 根据作者、编号、发布日期小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteAuthorSeq 根据作者、编号、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// author string 作者
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteAuthorSeq(es *elasticsearch.Client, author, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("author", author),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteClassClass2 根据类别、子类别、页数大于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtClassClass2 根据类别、子类别、页数大于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtClassClass2 根据类别、子类别、页数小于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteClassClass2 根据类别、子类别、页数小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteClassClass2 根据类别、子类别、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteClassClass2(es *elasticsearch.Client, class, class2 string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteClassClass2 根据类别、子类别、价格大于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtClassClass2 根据类别、子类别、价格大于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtClassClass2(es *elasticsearch.Client, class, class2 string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtClassClass2 根据类别、子类别、价格小于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtClassClass2(es *elasticsearch.Client, class, class2 string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteClassClass2 根据类别、子类别、价格小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteClassClass2(es *elasticsearch.Client, class, class2 string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteClassClass2 根据类别、子类别、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteClassClass2(es *elasticsearch.Client, class, class2 string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteClassClass2 根据类别、子类别、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtClassClass2 根据类别、子类别、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtClassClass2 根据类别、子类别、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteClassClass2 根据类别、子类别、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteClassClass2 根据类别、子类别、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// class2 string 子类别
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteClassClass2(es *elasticsearch.Client, class, class2 string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteClassName 根据类别、书名、页数大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteClassName(es *elasticsearch.Client, class, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtClassName 根据类别、书名、页数大于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtClassName(es *elasticsearch.Client, class, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtClassName 根据类别、书名、页数小于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtClassName(es *elasticsearch.Client, class, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteClassName 根据类别、书名、页数小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteClassName(es *elasticsearch.Client, class, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteClassName 根据类别、书名、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteClassName(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteClassName 根据类别、书名、页数大于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteClassName(es *elasticsearch.Client, class, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtClassName 根据类别、书名、页数大于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtClassName(es *elasticsearch.Client, class, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtClassName 根据类别、书名、页数小于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtClassName(es *elasticsearch.Client, class, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteClassName 根据类别、书名、页数小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteClassName(es *elasticsearch.Client, class, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteClassName 根据类别、书名、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteClassName(es *elasticsearch.Client, class, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteClassName 根据类别、书名、价格大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteClassName(es *elasticsearch.Client, class, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtClassName 根据类别、书名、价格大于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtClassName(es *elasticsearch.Client, class, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtClassName 根据类别、书名、价格小于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtClassName(es *elasticsearch.Client, class, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteClassName 根据类别、书名、价格小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteClassName(es *elasticsearch.Client, class, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteClassName 根据类别、书名、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteClassName(es *elasticsearch.Client, class, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteClassName 根据类别、书名、价格大于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteClassName(es *elasticsearch.Client, class, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtClassName 根据类别、书名、价格大于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtClassName(es *elasticsearch.Client, class, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtClassName 根据类别、书名、价格小于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtClassName(es *elasticsearch.Client, class, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteClassName 根据类别、书名、价格小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteClassName(es *elasticsearch.Client, class, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteClassName 根据类别、书名、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteClassName(es *elasticsearch.Client, class, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteClassName 根据类别、书名、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteClassName(es *elasticsearch.Client, class, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtClassName 根据类别、书名、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtClassName(es *elasticsearch.Client, class, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtClassName 根据类别、书名、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtClassName(es *elasticsearch.Client, class, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteClassName 根据类别、书名、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteClassName(es *elasticsearch.Client, class, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteClassName 根据类别、书名、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteClassName(es *elasticsearch.Client, class, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteClass 根据类别、页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGtClass 根据类别、页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLtClass 根据类别、页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLteClass 根据类别、页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLteClass 根据类别、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteClass 根据类别、页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGtClass 根据类别、页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLtClass 根据类别、页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLteClass 根据类别、页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLteClass 根据类别、页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteClass 根据类别、页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGtClass 根据类别、页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLtClass 根据类别、页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLteClass 根据类别、页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLteClass 根据类别、页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteClass 根据类别、页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGtClass 根据类别、页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLtClass 根据类别、页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLteClass 根据类别、页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLteClass 根据类别、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteClass 根据类别、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGtClass 根据类别、页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLtClass 根据类别、页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLteClass 根据类别、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteClass 根据类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteClass 根据类别、页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGtClass 根据类别、页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLtClass 根据类别、页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLteClass 根据类别、页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLteClass 根据类别、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteClass 根据类别、页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGtClass 根据类别、页数大于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLtClass 根据类别、页数大于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLteClass 根据类别、页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLteClass 根据类别、页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteClass 根据类别、页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGtClass 根据类别、页数小于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLtClass 根据类别、页数小于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLteClass 根据类别、页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLteClass 根据类别、页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteClass 根据类别、页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGtClass 根据类别、页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLtClass 根据类别、页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLteClass 根据类别、页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLteClass 根据类别、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteClass 根据类别、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGtClass 根据类别、页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLtClass 根据类别、页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLteClass 根据类别、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteClass 根据类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteClassSeq 根据类别、编号、页数大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtClassSeq 根据类别、编号、页数大于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtClassSeq(es *elasticsearch.Client, class, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtClassSeq 根据类别、编号、页数小于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtClassSeq(es *elasticsearch.Client, class, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteClassSeq 根据类别、编号、页数小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteClassSeq 根据类别、编号、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteClassSeq(es *elasticsearch.Client, class, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteClass 根据类别、价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGtClass 根据类别、价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLtClass 根据类别、价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLteClass 根据类别、价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLteClass 根据类别、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteClass 根据类别、价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGtClass 根据类别、价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLtClass 根据类别、价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLteClass 根据类别、价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLteClass 根据类别、价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteClass 根据类别、价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGtClass 根据类别、价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLtClass 根据类别、价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLteClass 根据类别、价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLteClass 根据类别、价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteClass 根据类别、价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGtClass 根据类别、价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLtClass 根据类别、价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLteClass 根据类别、价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLteClass 根据类别、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteClass 根据类别、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGtClass 根据类别、价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLtClass 根据类别、价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLteClass 根据类别、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLteClass 根据类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteClass 根据类别、价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGtClass 根据类别、价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLtClass 根据类别、价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLteClass 根据类别、价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLteClass 根据类别、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteClass 根据类别、价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGtClass 根据类别、价格大于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLtClass 根据类别、价格大于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLtClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLteClass 根据类别、价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLteClass 根据类别、价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteClass 根据类别、价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGtClass 根据类别、价格小于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLtClass 根据类别、价格小于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLtClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLteClass 根据类别、价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLteClass 根据类别、价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteClass 根据类别、价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGtClass 根据类别、价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLtClass 根据类别、价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLteClass 根据类别、价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLteClass 根据类别、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteClass 根据类别、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGtClass 根据类别、价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLtClass 根据类别、价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLtClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLteClass 根据类别、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLteClass 根据类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class string 类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLteClass(es *elasticsearch.Client, class string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteClassSeq 根据类别、编号、价格大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteClassSeq(es *elasticsearch.Client, class, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtClassSeq 根据类别、编号、价格大于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtClassSeq(es *elasticsearch.Client, class, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtClassSeq 根据类别、编号、价格小于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtClassSeq(es *elasticsearch.Client, class, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteClassSeq 根据类别、编号、价格小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteClassSeq(es *elasticsearch.Client, class, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteClassSeq 根据类别、编号、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteClassSeq(es *elasticsearch.Client, class, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteClassSeq 根据类别、编号、发布日期大于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtClassSeq 根据类别、编号、发布日期大于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtClassSeq 根据类别、编号、发布日期小于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteClassSeq 根据类别、编号、发布日期小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteClassSeq 根据类别、编号、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// class string 类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteClassSeq(es *elasticsearch.Client, class, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class", class),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteClass2Name 根据子类别、书名、页数大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtClass2Name 根据子类别、书名、页数大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtClass2Name(es *elasticsearch.Client, class2, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtClass2Name 根据子类别、书名、页数小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtClass2Name(es *elasticsearch.Client, class2, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteClass2Name 根据子类别、书名、页数小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteClass2Name 根据子类别、书名、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteClass2Name 根据子类别、书名、页数大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
func TermsSeqOfBooksByPageCountGteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtClass2Name 根据子类别、书名、页数大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCountGt int64 页数大于
func TermsSeqOfBooksByPageCountGtClass2Name(es *elasticsearch.Client, class2, name string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtClass2Name 根据子类别、书名、页数小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCountLt int64 页数小于
func TermsSeqOfBooksByPageCountLtClass2Name(es *elasticsearch.Client, class2, name string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteClass2Name 根据子类别、书名、页数小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteClass2Name 根据子类别、书名、页数大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsSeqOfBooksByPageCountGteLteClass2Name(es *elasticsearch.Client, class2, name string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteClass2Name 根据子类别、书名、价格大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteClass2Name(es *elasticsearch.Client, class2, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtClass2Name 根据子类别、书名、价格大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtClass2Name(es *elasticsearch.Client, class2, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtClass2Name 根据子类别、书名、价格小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtClass2Name(es *elasticsearch.Client, class2, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteClass2Name 根据子类别、书名、价格小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteClass2Name(es *elasticsearch.Client, class2, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteClass2Name 根据子类别、书名、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteClass2Name(es *elasticsearch.Client, class2, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteClass2Name 根据子类别、书名、价格大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
func TermsSeqOfBooksByPriceGteClass2Name(es *elasticsearch.Client, class2, name string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtClass2Name 根据子类别、书名、价格大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// priceGt float64 价格大于
func TermsSeqOfBooksByPriceGtClass2Name(es *elasticsearch.Client, class2, name string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtClass2Name 根据子类别、书名、价格小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// priceLt float64 价格小于
func TermsSeqOfBooksByPriceLtClass2Name(es *elasticsearch.Client, class2, name string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteClass2Name 根据子类别、书名、价格小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceLteClass2Name(es *elasticsearch.Client, class2, name string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteClass2Name 根据子类别、书名、价格大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsSeqOfBooksByPriceGteLteClass2Name(es *elasticsearch.Client, class2, name string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteClass2Name 根据子类别、书名、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByReleaseDateGteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGtClass2Name 根据子类别、书名、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByReleaseDateGtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLtClass2Name 根据子类别、书名、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByReleaseDateLtClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateLteClass2Name 根据子类别、书名、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByReleaseDateGteLteClass2Name 根据子类别、书名、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// name string 书名
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByReleaseDateGteLteClass2Name(es *elasticsearch.Client, class2, name string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteClass2 根据子类别、页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGtClass2 根据子类别、页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLtClass2 根据子类别、页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLteClass2 根据子类别、页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLteClass2 根据子类别、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteClass2 根据子类别、页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGtClass2 根据子类别、页数大于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLtClass2 根据子类别、页数大于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLteClass2 根据子类别、页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLteClass2 根据子类别、页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteClass2 根据子类别、页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGtClass2 根据子类别、页数小于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLtClass2 根据子类别、页数小于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLteClass2 根据子类别、页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLteClass2 根据子类别、页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteClass2 根据子类别、页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGtClass2 根据子类别、页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLtClass2 根据子类别、页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLteClass2 根据子类别、页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLteClass2 根据子类别、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGtClass2 根据子类别、页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLtClass2 根据子类别、页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLteClass2 根据子类别、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteClass2 根据子类别、页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGtClass2 根据子类别、页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLtClass2 根据子类别、页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLteClass2 根据子类别、页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLteClass2 根据子类别、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteClass2 根据子类别、页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGtClass2 根据子类别、页数大于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLtClass2 根据子类别、页数大于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLteClass2 根据子类别、页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLteClass2 根据子类别、页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteClass2 根据子类别、页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGtClass2 根据子类别、页数小于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLtClass2 根据子类别、页数小于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLteClass2 根据子类别、页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLteClass2 根据子类别、页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteClass2 根据子类别、页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGtClass2 根据子类别、页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLtClass2 根据子类别、页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLteClass2 根据子类别、页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLteClass2 根据子类别、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGtClass2 根据子类别、页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLtClass2 根据子类别、页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLteClass2 根据子类别、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteClass2 根据子类别、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteClass2Seq 根据子类别、编号、页数大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtClass2Seq 根据子类别、编号、页数大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtClass2Seq 根据子类别、编号、页数小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteClass2Seq 根据子类别、编号、页数小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteClass2Seq 根据子类别、编号、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteClass2 根据子类别、价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGtClass2 根据子类别、价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLtClass2 根据子类别、价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLteClass2 根据子类别、价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLteClass2 根据子类别、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteClass2 根据子类别、价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGtClass2 根据子类别、价格大于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLtClass2 根据子类别、价格大于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLteClass2 根据子类别、价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLteClass2 根据子类别、价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteClass2 根据子类别、价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGtClass2 根据子类别、价格小于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLtClass2 根据子类别、价格小于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLteClass2 根据子类别、价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLteClass2 根据子类别、价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteClass2 根据子类别、价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGtClass2 根据子类别、价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLtClass2 根据子类别、价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLteClass2 根据子类别、价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLteClass2 根据子类别、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGtClass2 根据子类别、价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLtClass2 根据子类别、价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLteClass2 根据子类别、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteClass2 根据子类别、价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGtClass2 根据子类别、价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLtClass2 根据子类别、价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLteClass2 根据子类别、价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLteClass2 根据子类别、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteClass2 根据子类别、价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGtClass2 根据子类别、价格大于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLtClass2 根据子类别、价格大于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLteClass2 根据子类别、价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLteClass2 根据子类别、价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteClass2 根据子类别、价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGtClass2 根据子类别、价格小于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLtClass2 根据子类别、价格小于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLteClass2 根据子类别、价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLteClass2 根据子类别、价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteClass2 根据子类别、价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGtClass2 根据子类别、价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLtClass2 根据子类别、价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLteClass2 根据子类别、价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLteClass2 根据子类别、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGtClass2 根据子类别、价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLtClass2 根据子类别、价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLtClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLteClass2 根据子类别、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLteClass2 根据子类别、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// class2 string 子类别
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLteClass2(es *elasticsearch.Client, class2 string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteClass2Seq 根据子类别、编号、价格大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtClass2Seq 根据子类别、编号、价格大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtClass2Seq(es *elasticsearch.Client, class2, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtClass2Seq 根据子类别、编号、价格小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtClass2Seq(es *elasticsearch.Client, class2, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteClass2Seq 根据子类别、编号、价格小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteClass2Seq 根据子类别、编号、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteClass2Seq 根据子类别、编号、发布日期大于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtClass2Seq 根据子类别、编号、发布日期大于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtClass2Seq 根据子类别、编号、发布日期小于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteClass2Seq 根据子类别、编号、发布日期小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteClass2Seq 根据子类别、编号、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// class2 string 子类别
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteClass2Seq(es *elasticsearch.Client, class2, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("class2", class2),
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteName 根据书名、页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGtName 根据书名、页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLtName 根据书名、页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLteName 根据书名、页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLteName 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteName 根据书名、页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGtName 根据书名、页数大于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLtName 根据书名、页数大于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLteName 根据书名、页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLteName 根据书名、页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteName 根据书名、页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGtName 根据书名、页数小于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLtName 根据书名、页数小于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLteName 根据书名、页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLteName 根据书名、页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteName 根据书名、页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGtName 根据书名、页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLtName 根据书名、页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLteName 根据书名、页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLteName 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteName 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGtName 根据书名、页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLtName 根据书名、页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLteName 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLteName 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteName 根据书名、页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGtName 根据书名、页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLtName 根据书名、页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLteName 根据书名、页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLteName 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteName 根据书名、页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGtName 根据书名、页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLtName 根据书名、页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLteName 根据书名、页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLteName 根据书名、页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteName 根据书名、页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGtName 根据书名、页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLtName 根据书名、页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLteName 根据书名、页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLteName 根据书名、页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteName 根据书名、页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGtName 根据书名、页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLtName 根据书名、页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLteName 根据书名、页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLteName 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteName 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGtName 根据书名、页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLtName 根据书名、页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLteName 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteName 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteName 根据书名、页数大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGtName 根据书名、页数大于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLtName 根据书名、页数大于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateLteName 根据书名、页数大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteReleaseDateGteLteName 根据书名、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteName 根据书名、页数大于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGtName 根据书名、页数大于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLtName 根据书名、页数大于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateLteName 根据书名、页数大于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGtReleaseDateGteLteName 根据书名、页数大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteName 根据书名、页数小于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGtName 根据书名、页数小于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLtReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLtName 根据书名、页数小于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLtReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateLteName 根据书名、页数小于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLtReleaseDateGteLteName 根据书名、页数小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLtReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteName 根据书名、页数小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGtName 根据书名、页数小于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLtName 根据书名、页数小于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateLteName 根据书名、页数小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountLteReleaseDateGteLteName 根据书名、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteName 根据书名、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGtName 根据书名、页数大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLtName 根据书名、页数大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLtName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateLteName 根据书名、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteName 根据书名、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPageCountGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteNameSeq 根据书名、编号、页数大于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClassOfBooksByPageCountGteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtNameSeq 根据书名、编号、页数大于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
func TermsClassOfBooksByPageCountGtNameSeq(es *elasticsearch.Client, name, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtNameSeq 根据书名、编号、页数小于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
func TermsClassOfBooksByPageCountLtNameSeq(es *elasticsearch.Client, name, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteNameSeq 根据书名、编号、页数小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteNameSeq 根据书名、编号、页数大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClassOfBooksByPageCountGteLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteNameSeq 根据书名、编号、页数大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
func TermsClass2OfBooksByPageCountGteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtNameSeq 根据书名、编号、页数大于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// pageCountGt int64 页数大于
func TermsClass2OfBooksByPageCountGtNameSeq(es *elasticsearch.Client, name, seq string, pageCountGt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtNameSeq 根据书名、编号、页数小于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// pageCountLt int64 页数小于
func TermsClass2OfBooksByPageCountLtNameSeq(es *elasticsearch.Client, name, seq string, pageCountLt int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteNameSeq 根据书名、编号、页数小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteNameSeq 根据书名、编号、页数大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
func TermsClass2OfBooksByPageCountGteLteNameSeq(es *elasticsearch.Client, name, seq string, pageCountGte, pageCountLte int64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteName 根据书名、价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGtName 根据书名、价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLtName 根据书名、价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLteName 根据书名、价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLteName 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteName 根据书名、价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGtName 根据书名、价格大于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLtName 根据书名、价格大于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLteName 根据书名、价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLteName 根据书名、价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteName 根据书名、价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGtName 根据书名、价格小于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLtName 根据书名、价格小于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLteName 根据书名、价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLteName 根据书名、价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteName 根据书名、价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGtName 根据书名、价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLtName 根据书名、价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLteName 根据书名、价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLteName 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteName 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGtName 根据书名、价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLtName 根据书名、价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLteName 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLteName 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteName 根据书名、价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGtName 根据书名、价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLtName 根据书名、价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLteName 根据书名、价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLteName 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteName 根据书名、价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGtName 根据书名、价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLtName 根据书名、价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLteName 根据书名、价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLteName 根据书名、价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteName 根据书名、价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGtName 根据书名、价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLtName 根据书名、价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLteName 根据书名、价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLteName 根据书名、价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteName 根据书名、价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGtName 根据书名、价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLtName 根据书名、价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLteName 根据书名、价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLteName 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteName 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGtName 根据书名、价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLtName 根据书名、价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLteName 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLteName 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteName 根据书名、价格大于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGtName 根据书名、价格大于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLtName 根据书名、价格大于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateLteName 根据书名、价格大于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteReleaseDateGteLteName 根据书名、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteName 根据书名、价格大于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGtName 根据书名、价格大于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGtReleaseDateGtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLtName 根据书名、价格大于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGtReleaseDateLtName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateLteName 根据书名、价格大于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGtReleaseDateGteLteName 根据书名、价格大于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteName 根据书名、价格小于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGtName 根据书名、价格小于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLtReleaseDateGtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLtName 根据书名、价格小于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLtReleaseDateLtName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateLteName 根据书名、价格小于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLtReleaseDateGteLteName 根据书名、价格小于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLtReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteName 根据书名、价格小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGtName 根据书名、价格小于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceLteReleaseDateGtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLtName 根据书名、价格小于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceLteReleaseDateLtName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateLteName 根据书名、价格小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceLteReleaseDateGteLteName 根据书名、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteName 根据书名、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGtName 根据书名、价格大于等于和小于等于、发布日期大于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsSeqOfBooksByPriceGteLteReleaseDateGtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLtName 根据书名、价格大于等于和小于等于、发布日期小于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsSeqOfBooksByPriceGteLteReleaseDateLtName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateLteName 根据书名、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsSeqOfBooksByPriceGteLteReleaseDateGteLteName 根据书名、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计编号的分布情况
// name string 书名
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsSeqOfBooksByPriceGteLteReleaseDateGteLteName(es *elasticsearch.Client, name string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("seq")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteNameSeq 根据书名、编号、价格大于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
func TermsClassOfBooksByPriceGteNameSeq(es *elasticsearch.Client, name, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtNameSeq 根据书名、编号、价格大于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// priceGt float64 价格大于
func TermsClassOfBooksByPriceGtNameSeq(es *elasticsearch.Client, name, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtNameSeq 根据书名、编号、价格小于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// priceLt float64 价格小于
func TermsClassOfBooksByPriceLtNameSeq(es *elasticsearch.Client, name, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteNameSeq 根据书名、编号、价格小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceLteNameSeq(es *elasticsearch.Client, name, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteNameSeq 根据书名、编号、价格大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClassOfBooksByPriceGteLteNameSeq(es *elasticsearch.Client, name, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteNameSeq 根据书名、编号、价格大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
func TermsClass2OfBooksByPriceGteNameSeq(es *elasticsearch.Client, name, seq string, priceGte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtNameSeq 根据书名、编号、价格大于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// priceGt float64 价格大于
func TermsClass2OfBooksByPriceGtNameSeq(es *elasticsearch.Client, name, seq string, priceGt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtNameSeq 根据书名、编号、价格小于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// priceLt float64 价格小于
func TermsClass2OfBooksByPriceLtNameSeq(es *elasticsearch.Client, name, seq string, priceLt float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteNameSeq 根据书名、编号、价格小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceLteNameSeq(es *elasticsearch.Client, name, seq string, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteNameSeq 根据书名、编号、价格大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
func TermsClass2OfBooksByPriceGteLteNameSeq(es *elasticsearch.Client, name, seq string, priceGte, priceLte float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteNameSeq 根据书名、编号、发布日期大于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByReleaseDateGteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGtNameSeq 根据书名、编号、发布日期大于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByReleaseDateGtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLtNameSeq 根据书名、编号、发布日期小于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByReleaseDateLtNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateLteNameSeq 根据书名、编号、发布日期小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByReleaseDateGteLteNameSeq 根据书名、编号、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// name string 书名
// seq string 编号
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByReleaseDateGteLteNameSeq(es *elasticsearch.Client, name, seq string, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Match("name", name),
	}
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches), eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteSeq 根据编号、页数大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGtSeq 根据编号、页数大于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLtSeq 根据编号、页数大于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateLteSeq 根据编号、页数大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteReleaseDateGteLteSeq 根据编号、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteSeq 根据编号、页数大于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGtSeq 根据编号、页数大于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLtSeq 根据编号、页数大于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateLteSeq 根据编号、页数大于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGtReleaseDateGteLteSeq 根据编号、页数大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteSeq 根据编号、页数小于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGtSeq 根据编号、页数小于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLtSeq 根据编号、页数小于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateLteSeq 根据编号、页数小于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLtReleaseDateGteLteSeq 根据编号、页数小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteSeq 根据编号、页数小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGtSeq 根据编号、页数小于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLtSeq 根据编号、页数小于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateLteSeq 根据编号、页数小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountLteReleaseDateGteLteSeq 根据编号、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGtSeq 根据编号、页数大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPageCountGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLtSeq 根据编号、页数大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPageCountGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateLteSeq 根据编号、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPageCountGteLteReleaseDateGteLteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPageCountGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteSeq 根据编号、页数大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGtSeq 根据编号、页数大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLtSeq 根据编号、页数大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateLteSeq 根据编号、页数大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteReleaseDateGteLteSeq 根据编号、页数大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteSeq 根据编号、页数大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGtSeq 根据编号、页数大于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLtSeq 根据编号、页数大于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateLteSeq 根据编号、页数大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGtReleaseDateGteLteSeq 根据编号、页数大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGt int64 页数大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, pageCountGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteSeq 根据编号、页数小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGtSeq 根据编号、页数小于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLtSeq 根据编号、页数小于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateLteSeq 根据编号、页数小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLtReleaseDateGteLteSeq 根据编号、页数小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLt int64 页数小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLt int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, pageCountLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteSeq 根据编号、页数小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGtSeq 根据编号、页数小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLtSeq 根据编号、页数小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateLteSeq 根据编号、页数小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountLteReleaseDateGteLteSeq 根据编号、页数小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", nil, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGtSeq 根据编号、页数大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLtSeq 根据编号、页数大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateLteSeq 根据编号、页数大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteSeq 根据编号、页数大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// pageCountGte int64 页数大于等于
// pageCountLte int64 页数小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPageCountGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, pageCountGte, pageCountLte int64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("page_count", pageCountGte, nil, nil, pageCountLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteSeq 根据编号、价格大于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGtSeq 根据编号、价格大于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLtSeq 根据编号、价格大于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateLteSeq 根据编号、价格大于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteReleaseDateGteLteSeq 根据编号、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteSeq 根据编号、价格大于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGtSeq 根据编号、价格大于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLtSeq 根据编号、价格大于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateLteSeq 根据编号、价格大于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGtReleaseDateGteLteSeq 根据编号、价格大于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteSeq 根据编号、价格小于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGtSeq 根据编号、价格小于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLtSeq 根据编号、价格小于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateLteSeq 根据编号、价格小于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLtReleaseDateGteLteSeq 根据编号、价格小于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteSeq 根据编号、价格小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGtSeq 根据编号、价格小于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLtSeq 根据编号、价格小于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateLteSeq 根据编号、价格小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceLteReleaseDateGteLteSeq 根据编号、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGtSeq 根据编号、价格大于等于和小于等于、发布日期大于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClassOfBooksByPriceGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLtSeq 根据编号、价格大于等于和小于等于、发布日期小于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClassOfBooksByPriceGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateLteSeq 根据编号、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClassOfBooksByPriceGteLteReleaseDateGteLteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClassOfBooksByPriceGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteSeq 根据编号、价格大于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGtSeq 根据编号、价格大于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLtSeq 根据编号、价格大于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateLteSeq 根据编号、价格大于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteReleaseDateGteLteSeq 根据编号、价格大于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteSeq 根据编号、价格大于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGtSeq 根据编号、价格大于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLtSeq 根据编号、价格大于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateLteSeq 根据编号、价格大于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGtReleaseDateGteLteSeq 根据编号、价格大于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGt float64 价格大于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, priceGt, nil, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteSeq 根据编号、价格小于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGtSeq 根据编号、价格小于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLtReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLtSeq 根据编号、价格小于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLtReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateLteSeq 根据编号、价格小于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLtReleaseDateGteLteSeq 根据编号、价格小于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLt float64 价格小于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLtReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLt float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, priceLt, nil),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteSeq 根据编号、价格小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGtSeq 根据编号、价格小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLtSeq 根据编号、价格小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateLteSeq 根据编号、价格小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceLteReleaseDateGteLteSeq 根据编号、价格小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", nil, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGtSeq 根据编号、价格大于等于和小于等于、发布日期大于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGt time.Time 发布日期大于
func TermsClass2OfBooksByPriceGteLteReleaseDateGtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, releaseDateGt, nil, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLtSeq 根据编号、价格大于等于和小于等于、发布日期小于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLt time.Time 发布日期小于
func TermsClass2OfBooksByPriceGteLteReleaseDateLtSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLt time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, releaseDateLt, nil),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateLteSeq 根据编号、价格大于等于和小于等于、发布日期小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", nil, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

// TermsClass2OfBooksByPriceGteLteReleaseDateGteLteSeq 根据编号、价格大于等于和小于等于、发布日期大于等于和小于等于检索books表并分组统计子类别的分布情况
// seq string 编号
// priceGte float64 价格大于等于
// priceLte float64 价格小于等于
// releaseDateGte time.Time 发布日期大于等于
// releaseDateLte time.Time 发布日期小于等于
func TermsClass2OfBooksByPriceGteLteReleaseDateGteLteSeq(es *elasticsearch.Client, seq string, priceGte, priceLte float64, releaseDateGte, releaseDateLte time.Time) (*eq.Data, *eq.Query, error) {
	terms := []eq.Map{
		eq.Term("seq", seq),
		eq.Range("price", priceGte, nil, nil, priceLte),
		eq.Range("release_date", releaseDateGte, nil, nil, releaseDateLte),
	}
	aggs := eq.TermsAgg("class2")
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithFilter(terms)), Agg: aggs}
	return queryBooksList(es, esQuery)
}

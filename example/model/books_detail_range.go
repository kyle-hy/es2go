// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// RangeBooksByPageCountGte 查找page_count大于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
func RangeBooksByPageCountGte(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", pageCount, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGt 查找page_count大于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
func RangeBooksByPageCountGt(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, pageCount, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLt 查找page_count小于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
func RangeBooksByPageCountLt(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, pageCount, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLte 查找page_count小于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
func RangeBooksByPageCountLte(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, nil, pageCount),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGte 查找价格大于等于指定数值的Books的详细数据列表和总数量
// price float64 价格
func RangeBooksByPriceGte(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", price, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceGt 查找价格大于指定数值的Books的详细数据列表和总数量
// price float64 价格
func RangeBooksByPriceGt(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, price, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLt 查找价格小于指定数值的Books的详细数据列表和总数量
// price float64 价格
func RangeBooksByPriceLt(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, price, nil),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPriceLte 查找价格小于等于指定数值的Books的详细数据列表和总数量
// price float64 价格
func RangeBooksByPriceLte(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, nil, price),
	}

	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtePriceLt 查找page_count大于等于、价格小于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountGtePriceLt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtePriceLte 查找page_count大于等于、价格小于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountGtePriceLte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtPriceLt 查找page_count大于、价格小于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountGtPriceLt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountGtPriceLte 查找page_count大于、价格小于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountGtPriceLte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtPriceGte 查找page_count小于、价格大于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountLtPriceGte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtePriceGte 查找page_count小于等于、价格大于等于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountLtePriceGte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtPriceGt 查找page_count小于、价格大于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountLtPriceGt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// RangeBooksByPageCountLtePriceGt 查找page_count小于等于、价格大于指定数值的Books的详细数据列表和总数量
// pageCount int64 page_count
// price float64 价格
func RangeBooksByPageCountLtePriceGt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// QueryBooksByPageCountGTE 查找page_count大于等于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountGTE(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", pageCount, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGT 查找page_count大于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountGT(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, pageCount, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLT 查找page_count小于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountLT(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, pageCount, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLTE 查找page_count小于等于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountLTE(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, nil, pageCount),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceGTE 查找价格大于等于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceGTE(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", price, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceGT 查找价格大于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceGT(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, price, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceLT 查找价格小于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceLT(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, price, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceLTE 查找价格小于等于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceLTE(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, nil, price),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGTEPriceLT 查找page_count大于等于、价格小于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGTEPriceLT(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGTEPriceLTE 查找page_count大于等于、价格小于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGTEPriceLTE(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGTPriceLT 查找page_count大于、价格小于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGTPriceLT(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGTPriceLTE 查找page_count大于、价格小于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGTPriceLTE(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLTPriceGTE 查找page_count小于、价格大于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLTPriceGTE(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLTEPriceGTE 查找page_count小于等于、价格大于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLTEPriceGTE(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLTPriceGT 查找page_count小于、价格大于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLTPriceGT(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLTEPriceGT 查找page_count小于等于、价格大于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLTEPriceGT(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

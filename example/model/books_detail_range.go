// Code generated by es2go. DO NOT EDIT.

package model

import (
	"github.com/elastic/go-elasticsearch/v8"
	eq "github.com/kyle-hy/esquery"
)

// QueryBooksByPageCountGte 查找page_count大于等于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountGte(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", pageCount, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGt 查找page_count大于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountGt(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, pageCount, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLt 查找page_count小于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountLt(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, pageCount, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLte 查找page_count小于等于指定数值的Books详细数据
// pageCount int64 page_count
func QueryBooksByPageCountLte(es *elasticsearch.Client, pageCount int64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("page_count", nil, nil, nil, pageCount),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceGte 查找价格大于等于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceGte(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", price, nil, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceGt 查找价格大于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceGt(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, price, nil, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceLt 查找价格小于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceLt(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, price, nil),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPriceLte 查找价格小于等于指定数值的Books详细数据
// price float64 价格
func QueryBooksByPriceLte(es *elasticsearch.Client, price float64) (*eq.Data, *eq.Query, error) {
	esQuery := &eq.ESQuery{
		Query: eq.Range("price", nil, nil, nil, price),
	}

	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGtePriceLt 查找page_count大于等于、价格小于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGtePriceLt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGtePriceLte 查找page_count大于等于、价格小于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGtePriceLte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", pageCount, nil, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGtPriceLt 查找page_count大于、价格小于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGtPriceLt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, price, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountGtPriceLte 查找page_count大于、价格小于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountGtPriceLte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, pageCount, nil, nil),
		eq.Range("price", nil, nil, nil, price),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLtPriceGte 查找page_count小于、价格大于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLtPriceGte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLtePriceGte 查找page_count小于等于、价格大于等于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLtePriceGte(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", price, nil, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLtPriceGt 查找page_count小于、价格大于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLtPriceGt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, pageCount, nil),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}

// QueryBooksByPageCountLtePriceGt 查找page_count小于等于、价格大于指定数值的Books详细数据
// pageCount int64 page_count
// price float64 价格
func QueryBooksByPageCountLtePriceGt(es *elasticsearch.Client, pageCount int64, price float64) (*eq.Data, *eq.Query, error) {
	matches := []eq.Map{
		eq.Range("page_count", nil, nil, nil, pageCount),
		eq.Range("price", nil, price, nil, nil),
	}
	esQuery := &eq.ESQuery{Query: eq.Bool(eq.WithMust(matches))}
	return queryBooksList(es, esQuery)
}
